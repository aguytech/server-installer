#!/bin/bash
#
# write by Aguy

<<MANUALLY
# iptables-save / iptables-restore

iptables -L
iptables -t nat -S
iptables -t nat -D

iptables -nvL
iptables -t nat -nvL
iptables -t mangle -nvL

iptables -nvL --line-number; iptables -nvL -t nat --line-number
MANUALLY


_echoT "\n==========================================  $S_RELEASE $_PART"

file_xtra_script=${S_PATH_INSTALL_XTRA}/firewall
file_xtra_conf=${S_PATH_INSTALL_CONF}/firewall.conf
file_xtra_log=${S_PATH_INSTALL_CONF}/rsyslog/iptables.conf
file_script=/usr/sbin/${file_xtra_script##*/}

_echoT "------------------ required files"

_require ${file_xtra_script} ${file_xtra_conf} ${file_xtra_log}


####################################  SYSCTL

_echoT "----------  sysctl conf"

file=/etc/sysctl.conf
_keepcpts ${file}
sed -i 's|||' ${file}
echo "
# iptables
net.ipv4.ip_forward = ${_SOMAXCONN}
net.core.netdev_max_backlog = ${_MAX_BACKLOG}
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout= ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time= ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl= ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}" > ${file}

_echoT "----------  sysctl restart"

systemctl restart systemd-sysctl.service


_echoT "----------  network forward"

# allow forwading
file=/proc/sys/net/ipv4/ip_forward
grep -q 1 ${file} || echo 1 > ${file}

_eval sysctl net.ipv4.ip_forward=1

file=/etc/sysctl.conf
_eval "sed -i 's|^#\?\(net.ipv4.ip_forward\)=.*|\1=1|' ${file}"

####################################  FIREWALL

_echoT "----------  firewall conf"

file=${S_PATH_CONF}/${file_xtra_conf##*/}
_keepcpts ${file}
_eval cp ${file_xtra_conf} ${file}


_echoT "----------  firewall bin"

file=${file_script}
_keepcpts ${file}
_eval cp ${file_xtra_script} ${file}
_eval chown root:root ${file}
_eval chmod 750 ${file}


_echoT "----------  systemd add service"

file=/etc/systemd/system/iptables-firewall.service
cat << EOF | _eval tee ${file}
[Unit]
Description=iptables firewall service
After=network.target

[Service]
Type=oneshot
ExecStart=${file_script} start
RemainAfterExit=true
ExecStop=${file_script} stop
StandardOutput=journal

[Install]
WantedBy=multi-user.target
EOF
_eval chmod 644 ${file}

file=/etc/systemd/system/iptables-firewall-test.service
cat << EOF | _eval tee ${file}
[Unit]
Description=iptables firewall service test
BindsTo=iptables-firewall.service
After=iptables-firewall.service

[Service]
Type=oneshot
ExecStart=/usr/bin/systemd-run --on-active=120 --timer-property=AccuracySec=1s /bin/systemctl stop iptables-firewall.service
StandardOutput=journal

[Install]
WantedBy=multi-user.target
EOF
_eval chmod 644 ${file}


_echoT "----------  systemd reload daemon"

_eval systemctl daemon-reload


_echoT "----------  iptables-firewall-test"

_echoI "To launch iptables rules for TEST, run: systemctl start iptables-firewall-test"
_echoI "You have 2 minutes after to verify iptables rules"

_echoT "----------  systemd iptables-firewall"

_askno "To start the service: iptables-firewall, valid"

_eval systemctl start iptables-firewall

_askno "To enable the service: iptables-firewall, valid"

_eval systemctl enable iptables-firewall


_echoT "----------  rsyslog conf"

_evalq cp -a ${file_xtra_log} /etc/rsyslog.d/


_echoT "----------  rsyslog restart"

_evalq service rsyslog restart


_echoT "----------  logrotate conf"

echo -e "# Logrotate file for iptables logs
$S_PATH_LOG/iptables/*.log {
\tmissingok
\tcompress
\tdelaycompress
\tnotifempty
\tweekly
\trotate 5
}
" > /etc/logrotate.d/iptables


_echoT "----------  firewall test"

_eval "service firewall stop"
_askyn "Verify iptables rules with 'iptl' & 'iptln'"
[ $_ANSWER == n ] && _exit 1

_eval "service firewall start"
_askyn "Verify iptables rules with 'iptl' & 'iptln'"
[ $_ANSWER == n ] && _exit 1


_echoT "---------- ${_PART} end"

_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<keep
-------------------------------------------------------
logging()

# to logging
iptables -N LOGGING
iptables -A LOGGING -m limit --limit 240/min -j LOG --log-prefix "iptables-tmp-"
#iptables -A INPUT -i eth0 -p icmp -j DROP # drop ping before
iptables -A INPUT -p tcp -j LOGGING # catch all TCP INPUT for all interfaces after all previous rules
iptables -A FORWARD -j LOGGING # catch all FORWARD (tcp,udp,icmp) for all interfaces after all previous rules
iptables -A OUTPUT -p tcp -j LOGGING # catch all TCP OUTPUT for all interfaces after all previous rules


sed "s|.*SRC=\([0-9\.]*\).*|\1|" $S_PATH_LOG/iptables/general.log | sort | uniq -c # count number of occurences


-------------------------------------------------------
iptables_persistent()

#apt-get install iptables-persistent

#service iptables save

#iptables-save > /etc/iptables/rules.v4 # ip6tables-save > /etc/iptables/rules.v6
#iptables-restore < /etc/iptables/rules.v4


-------------------------------------------------------
test()

service firewall stop

service firewall start

service firewall restart

iptables -nvL --line-number; iptables -nvL -t nat --line-number

iptables -nvL FORWARD --line-number


-------------------------------------------------------
w00tw00t()

# création de notre chaîne w00t :
#iptables -N w00t
# redirige les paquets TCP sur notre chaîne :
#iptables -A INPUT -p tcp -j w00t
# recherche du premier SYN et création de la liste :
#iptables -A w00t -m recent -p tcp --syn --dport 80 --set
# recherche du paquet SYN,ACK et mise à jour la liste :
#iptables -A w00t -m recent -p tcp --tcp-flags PSH,SYN,ACK SYN,ACK --sport 80 --update
# recherche du paquet ACK et mise à jour la liste
#iptables -A w00t -m recent -p tcp --tcp-flags PSH,SYN,ACK ACK --dport 80 --update
# recherche de la signature de DFind dans le prenier PSH+ACK. Si elle est présente, on DROP. On supprime la liste pour ne pas filtrer les paquets suivants
#iptables -A w00t -m recent -p tcp --tcp-flags PSH,ACK PSH,ACK --dport 80 --remove -m string --to 50 --algo bm --string "GET /w00tw00t.at.ISC.SANS." -j DROP
#EchoIO "Drop chaine contenant 'GET /w00tw00t.at.ISC.SANS.' :80"

#iptables -A INPUT -p tcp --dport 80 -m string --to 50 --algo bm --string 'GET /w00tw00t.at.ISC.SANS.' -j DROP
#EchoIO "Drop chaine contenant 'GET /w00tw00t.at.ISC.SANS.' :80"

# w00tw00t
#iptables -I INPUT -d $IpThis -p tcp --dport 80 -m string --to 70 --algo bm --string 'GET /w00tw00t.at.ISC.SANS.' -j DROP
#EchoIO "Stop w00tw00t"

keep
