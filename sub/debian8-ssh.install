#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  $S_RELEASE $_PART"


####################################  MAIN

_echoT "----------  ssh-keygen"

_askyn "Do you wante to generate new keys for ssh"
[ "$_ANSWER" == y ] && _eval "ssh-keygen -t rsa"


_echoT "----------  configure ssh"

_askno "Give an port for SSH connection ($S_SSH_PORT) "
[ "$_ANSWER" ] && S_SSH_PORT="$_ANSWER" && _confset S_SSH_PORT $S_SSH_PORT $S_GLOBAL_CONF

# client
FILE='/etc/ssh/ssh_config'
[ ! -f "$FILE.$DDATE" ] && _evalq cp -p "$FILE" "$FILE.$DDATE"
sed -i "s/^\( *GSSAPIAuthentication\).*/\1 no/" "$FILE"

# server
FILE='/etc/ssh/sshd_config'
[ ! -f "$FILE.$DDATE" ] && _evalq cp -p "$FILE" "$FILE.$DDATE"

str=$S_SSH_PORT; sed -i "s/^#\?\(Port \).*/\1$str/" "$FILE"
str=no; sed -i "s/^#\(GSSAPIAuthentication \).*/\1$str/" "$FILE"
! grep -q "^UseDNS no" "$FILE" && echo "UseDNS no" >> "$FILE"
str=no; sed -i "s/^#\?\(PasswordAuthentication \).*/\1$str/" "$FILE"
! grep -q "^ClientAliveInterval" "$FILE" && echo -e "\nClientAliveInterval 300\nClientAliveCountMax 3" >> "$FILE"


_eval "service ssh restart"


str=" home ovh "; if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ]; then

	_echoT "----------  ssh restore"

	# use saved keys
	FILE=${HOSTNAME}-ssh.tgz
	if [ -f "${S_PATH_INSTALL_XTRA}/$FILE" ]; then
		_askyn "Would you replace ssh keys with backuped ones in\n'${S_PATH_INSTALL_XTRA}/$FILE'"
		if [ "$_ANSWER" == y ]; then
			_evalq cd "$S_PATH_INSTALL_XTRA"
			_evalq tar xzf "$FILE"
			_evalq mv .ssh/id_rsa* ~/.ssh
			_evalq rm -fR .ssh
			_evalq cd
		fi
	else
		_echoT "Unable to find file: '${S_PATH_INSTALL_XTRA}/$FILE'"
		_askyn "If this installation are a reinstallation,\nPlease overwrite manually key files in ~/.ssh"
	fi

	if ! [ -f ~/.ssh/id_rsa ]
	then
		_echoT "----------  ssh-keygen"
		! [ -f ~/.ssh/id_rsa ] && _eval "ssh-keygen -t rsa"
		#ssh-copy-id <username>@<host>
		# root
		#sudo ssh-keygen -t rsa
		#gksudo ssh-copy-id <username>@<host>
		#exit
	fi

	_echoT "----------  ssh backup"

	FILE=${S_PATH_SAVE_BACKUP}/${HOSTNAME}-ssh.tgz
	cd
	tar cvzf "$FILE" .ssh/
	_echoT "a backup of path '.ssh' have been made in '$FILE'\nPlease keep it safe"

fi


_echoT "----------  end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<keep
# /etc/ssh/sshd_config
'PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication no
UsePAM yes
Match User git
    PasswordAuthentication yes'
keep

