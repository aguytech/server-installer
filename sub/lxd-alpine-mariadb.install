#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART}"

grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echoT "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_NAME_COM}$ || _exite "Unable to find image container: '${_CT_NAME_COM}"

_echoT "------------------ required vm"
lxc list -f csv -c n| grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: '${S_SERVICE[log]}'"

file_server="${S_PATH_INSTALL_CONF}/mariadb/mariadb-server.cnf"
file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-mariadb.conf
file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-mariadb.conf
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/host-mariadb
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-mariadb

_echoT "------------------ required files"
_require ${file_server} ${file_rsyslog_client} ${file_rsyslog_host} ${file_logrotate_client} ${file_logrotate_host}


########################  DATA

_echoT "------------------  data pwd"

_MDB_PWD_LOCAL=`_pwd`
_MDB_PWD_REMOTE=`_pwd`
[ -z ${_MDB_DB_HOST_PWD+x} ] && _MDB_DB_HOST_PWD=`_pwd` && _confset _MDB_DB_HOST_PWD "${_MDB_DB_HOST_PWD}"

_echoT "------------------  data"

_MDB_SERVICE=mariadb && _confset _MDB_SERVICE "${_MDB_SERVICE}"
_MDB_PATH_CONF=/etc/my.cnf.d && _confset _MDB_PATH_CONF "${_MDB_PATH_CONF}"


anstmp=mdb-${S_DOMAIN_NAME} && _askno "Name of the mariadb container & profile (${anstmp})" && _MDB_NAME="${_ANSWER:-${anstmp}}"
_CT_NAME=${_MDB_NAME}

[ -z ${_MDB_VM_PATH+x} ] && anstmp=/var/lib/mysql && _askno "Path for data (${anstmp})" && _MDB_VM_PATH="${_ANSWER:-${anstmp}}" && _confset _MDB_VM_PATH "${_MDB_VM_PATH}"

[ -z ${_MDB_PATH_BINLOG+x} ] && anstmp=/var/lib/mysql && _askno "Path for binary logs (${anstmp})" && _MDB_PATH_BINLOG="${_ANSWER:-${anstmp}}" && _confset _MDB_PATH_BINLOG "${_MDB_PATH_BINLOG}"

[ -z ${_MDB_PATH_LOG+x} ] && anstmp=${S_PATH_LOG}/mysql && _askno "Path for logs (${anstmp})" && _MDB_PATH_LOG="${_ANSWER:-${anstmp}}" && _confset _MDB_PATH_LOG "${_MDB_PATH_LOG}"


_MDB_HOST_PATH=${S_HOST_PATH}/mariadb/${_MDB_NAME} && _confset _MDB_HOST_PATH "${_MDB_HOST_PATH}"


########################  STORAGE MARIADB

if [ "${S_STORAGE_DRIVER}" = zfs ]; then

	name=mariadb
	_echoT "------------------  zfs ${name}"
	path_zfs=${_ZFS_ROOT}${S_HOST_PATH}/mariadb
	path=${S_HOST_PATH}/mariadb
	opts="-o mountpoint=${path} -o compression=lz4 -o  acltype=posixacl -o recordsize=8K -o primarycache=metadata"
	_evalr zfs list ${path_zfs} >/dev/null 2>&1 || _evalr zfs create ${opts} ${path_zfs}


	name=${_MDB_NAME}
	_echoT "------------------  zfs ${name}"
	path=${_MDB_HOST_PATH}
	path_zfs=${_ZFS_ROOT}${_MDB_HOST_PATH}

	# rename
	if zfs list ${path_zfs} >/dev/null 2>&1; then
	 	_echoT "------------------  unmount  ${path_zfs}"
	 	_evalr zfs unmount ${path_zfs} || _exite "Unable to unmount ${path_zfs}\nUnbind container using it"
		_echoI "------------------  zfs backup ${path_zfs} to ${path_zfs}.${_SDATE}"
	 	_evalr zfs rename ${path_zfs} ${path_zfs}.${_SDATE}
	 fi

	_echoT "------------------  zfs create ${path_zfs}"
	_evalr zfs create -o mountpoint=${path} ${path_zfs}


elif [ "${S_STORAGE_DRIVER}" = btrfs ]; then

	name=mariadb
	_echoT "------------------  btrfs ${name}"
	path=${S_HOST_PATH}/mariadb
	_evalr ls -1 ${path} >/dev/null 2>&1 || _evalr btrfs subvolume create ${path}

	name=${_MDB_NAME}
	_echoT "------------------  btrfs ${name}"
	# rename
	path=${_MDB_HOST_PATH}
	if _evalr ls -1 ${path} >/dev/null 2>&1; then
		_echoI "------------------  mv ${path} to ${path}.${_SDATE}"
	 	_evalr mv ${path} ${path}.${_SDATE}
	 fi

	_echoT "------------------  btrfs create ${path}"
	_evalr btrfs subvolume create ${path}

else
	_exite "This part have to be implemented"
fi

_echoT "------------------  rights ${name}"
_evalr chown ${_LXD_UID}:${_LXD_UID} ${_MDB_HOST_PATH}
_evalr setfacl -Rm u:${_LXD_UID}:rwx ${_MDB_HOST_PATH}
_evalr setfacl -Rm d:u:${_LXD_UID}:rwx ${_MDB_HOST_PATH}

########################  PROFILE

profile=${_MDB_NAME}
_echoT "------------------  profile ${profile}"

lxc profile list -f csv|grep -q "^${profile}," && _eval lxc profile rename ${profile} ${profile}.${_SDATE}
_eval lxc profile create ${profile}

path=${_MDB_HOST_PATH}
path_ct=${_MDB_VM_PATH}
[ -d ${path} ] || _evalr mkdir -p ${path}
_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}

########################  INIT

_echoT "------------------  init"

if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_echoT "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
fi

_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global -p ${profile}

_echoT "------------------  ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}

########################  METADATA

_echoT "------------------  metadata"
_lxc_meta_set ${_CT_NAME} profiles default global ${profile}
_lxc_meta_add ${_CT_NAME} apps mariadb

########################  IPTABLES

_echoT "------------------  iptables"
sed -i '/^_NAT_SGBD=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
_service restart ${_IPT_SERVICE}

########################  INSTALL

_echoT "------------------  host install"
_install mariadb-client

_echoT "------------------  update"
_lxc_exec ${_CT_NAME} "apk update"

_echoT "------------------  install mariadb"
_lxc_exec ${_CT_NAME} "apk add mariadb mariadb-client mariadb-mytop"

_echoT "------------------  initialize mariadb"
_lxc_exec ${_CT_NAME} "mysql_install_db --user=mysql --datadir=${_MDB_VM_PATH}"

_echoT "------------------  service set & start"
service=mariadb
_lxc_exec ${_CT_NAME} "rc-update add ${service}"
_lxc_exec ${_CT_NAME} "rc-service ${service} start"


########################  PATH

_echoT "------------------  paths"
paths="${_MDB_PATH_DATA} ${_MDB_PATH_BINLOG} ${_MDB_PATH_LOG}"
for path in ${paths}; do
	_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"
	_lxc_exec ${_CT_NAME} "chown mysql ${path}"
done


########################  MYSQL INIT

_echoT "------------------  root passwd"
_lxc_exec ${_CT_NAME} "mysqladmin -u root password ${_MDB_PWD_LOCAL}"

_echoT "------------------  secure"
_echoW "Use this password: ${_MDB_PWD_LOCAL}"
_lxc_exec ${_CT_NAME} "mysql_secure_installation"

########################  CONF

_echoT "------------------  conf server"

file=${_MDB_PATH_CONF}/${file_server##*/}
_lxc_exec ${_CT_NAME} "[ -f ${file} ] && cp -a ${file} ${file}.${_SDATE}"
_eval lxc file push -q ${file_server} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} mariadb

########################  PASSWORD

_echoT "------------------  variables set"
strpass="root @ localhost - $_MDB_PWD_LOCAL\n"

_echoT "------------------  right roothost"
for ip in ${_IPS_CLUSTER} ${_IP_HOST_VM}; do
	strpass+="roothost @ ${ip} - ${_MDB_DB_HOST_PWD}\n"
	cmd="GRANT ALL PRIVILEGES ON *.* TO roothost@'${ip}' IDENTIFIED BY '${_MDB_DB_HOST_PWD}' WITH GRANT OPTION"
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""
done

_echoT "------------------  right rootremote"
for ip in ${S_IPS_ADMIN}; do
	strpass+="rootremote @ ${ip} - ${_MDB_PWD_REMOTE}\n"
	cmd="GRANT ALL PRIVILEGES ON *.* TO rootremote@'${ip}' IDENTIFIED BY '${_MDB_PWD_REMOTE}' WITH GRANT OPTION"
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""
	cmd="GRANT PROXY ON ''@'%' TO 'rootremote'@'${ip}' WITH GRANT OPTION"
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""
done

########################  RESTART

_echoT "------------------  ${_MDB_SERVICE} restart"
_lxc_exec ${_CT_NAME} "rc-service ${_MDB_SERVICE} restart"

########################  RSYSLOG

_echoT "------------------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}/mysql
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"


_echoT "------------------  ${S_SERVICE[log]} host"
file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push -q ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog php

_echoT "------------------  ${S_SERVICE[log]} rsyslog restart"
_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"


_echoT "------------------  ${_CT_NAME} client path"
path=${S_PATH_LOG}/mysql
_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"

_echoT "------------------  ${_CT_NAME} client"
file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push -q ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog php

_echoT "------------------  ${_CT_NAME} rsyslog restart"
_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"

########################  LOGROTATE

_echoT "------------------  ${S_SERVICE[log]} logrotate"
file=/etc/logrotate.d/${file_logrotate_host##*/}
_eval lxc file push -q ${file_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate

_echoT "------------------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} "rc-service crond restart"


_echoT "------------------  ${_CT_NAME} logrotate"
file=/etc/logrotate.d/${file_logrotate_client##*/}
_eval lxc file push -q ${file_logrotate_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} logrotate

_echoT "------------------  ${_CT_NAME} crond restart"
_lxc_exec ${_CT_NAME} "rc-service crond restart"

########################  CLEAN LOG

_echoT "------------------  ${_CT_NAME} log clean"
_lxc_exec ${_CT_NAME} "find ${S_PATH_LOG}/mysql -name *.log -exec rm {} \;"

########################  STRPASS

_echoT "------------------  ${_CT_NAME} passwd"
file=${S_PATH_CONF}/mariadb
strpass=${strpass%\\n}
_lxc_exec ${_CT_NAME} "echo -e ${strpass//\\n/\\\\n} > ${file}"

########################  SHOW

_echoT "------------------  show privileges"
# show users
_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e 'FLUSH PRIVILEGES';"
_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e 'SELECT user,host FROM mysql.user';"
#_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"SELECT user,host FROM mysql.user WHERE Host <> 'localhost'\""

_echoT "------------------  show passwords"
_echoI "Keep this passwords:"
_echoW "${strpass}"

#########################  TEST

_echoT "------------------  maria test"
_echoW "To verify maria configuration, from the host type:"
_echo "mysql -uroothost -h${_CT_NAME} -p${_MDB_DB_HOST_PWD} "

#######################  PUBLISH

_echoT "------------------  publish ${_CT_NAME}"
lxc image list -f csv -c l | grep -q ^${_CT_NAME}$ && _eval lxc image alias rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
_eval lxc publish --force ${_CT_NAME} --alias ${_CT_NAME}

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}


<<KEEP
######################## SQL

# SHOW VARIABLES LIKE 'character%';


_MDB_PWD_LOCAL=

# show log variables
mysql -uroot -p${_MDB_PWD_LOCAL} -e "show variables like '%log%';"

# show users
mysql -uroot -p${_MDB_PWD_LOCAL} -e "SELECT User, Host FROM mysql.user"
mysql -h10.0.0.120 -uroothost -p${_MDB_PWD_LOCAL} -e "SELECT User, Host FROM mysql.user"

# show grants
mysql -h 10.0.0.120 -u root -p${_MDB_PWD_LOCAL} -e "SHOW GRANTS;"

# tables by engine
mysql -uroot -p"${_MDB_PWD_LOCAL}" -e "SELECT ENGINE, COUNT(*) AS count FROM INFORMATION_SCHEMA.TABLES GROUP BY ENGINE;"


######################## Restore root password
rc-service mysql stop
kill  \$(cat /run/mysqld/mysqld.pid)
/usr/bin/mysqld --datadir=/var/lib/mysql --pid-file=/run/mysqld/mysqld.pid --skip-grant-tables --skip-networking &
mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';FLUSH PRIVILEGES;ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';FLUSH PRIVILEGES;set password = password('MyNewPass');"
kill  \$(cat /run/mysqld/mysqld.pid)
rc-service mariadb restart

KEEP