#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART#++}"
grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART#++}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

imgs_init=$(lxc image list -f csv -c l | grep ^alpine.*init$)
[ "${imgs_init}" ] || _exite "Unable to find image of alpine for initialisation (alpine.*init)"

_echot "------------------ required vm"
lxc list -f csv -c n| grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: '${S_SERVICE[log]}'"

fc_mdb_server="${S_PATH_INSTALL_CONF}/mariadb/mariadb-server.cnf"

fc_mdb_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-mariadb.conf
fc_mdb_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-mariadb.conf
fc_mdb_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/host-mariadb
fc_mdb_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-mariadb

_echot "------------------ required files"
_require ${fc_mdb_server} ${fc_mdb_rsyslog_client} ${fc_mdb_rsyslog_host} ${fc_mdb_logrotate_client} ${fc_mdb_logrotate_host}

########################  DATA

_echot "------------------  data name"

[ -z ${_MDB_CT_NAME+x} ] && { anstmp=mdb-${S_DOM_FQDN//./-}; _askno "Base name of the mariadb container to build (${anstmp})"; _MDB_CT_NAME="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_CT_PROFILE+x} ] && { anstmp=${_MDB_CT_NAME}; _askno "Base name of the mariadb profile (${anstmp})"; _MDB_CT_PROFILE="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_CT_NUM+x} ] && { anstmp=2 && _askno "Number of containers to build (${anstmp})"; _MDB_CT_NUM="${_ANSWER:-$anstmp}"; }


_echot "------------------  data pwd"

[ -z ${_MDB_PWD_LOCAL+x} ] && { anstmp=`_pwd`; _askno "Password for root local access (${anstmp})"; 	_MDB_PWD_LOCAL="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_PWD_HOST+x} ] && { anstmp=`_pwd`; _askno "Password for root host access (${anstmp})"; _MDB_PWD_HOST="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_PWD_REMOTE+x} ] && { anstmp=`_pwd`; _askno "Password for root remote access (${anstmp})"; _MDB_PWD_REMOTE="${_ANSWER:-${anstmp}}"; }

_echot "------------------  data"

[ -z ${_MDB_INIT+x} ] && { _menu "An image for intialisation" ${imgs_init}; _MDB_INIT="${_ANSWER}"; }

[ -z ${_MDB_VM_PATH+x} ] && { anstmp=/var/lib/mysql; _askno "Path for data (${anstmp})"; _MDB_VM_PATH="${_ANSWER:-${anstmp}}"; }
_confset _MDB_VM_PATH "${_MDB_VM_PATH}"

[ -z ${_MDB_PATH_BINLOG+x} ] && { anstmp=/var/lib/mysql; _askno "Path for binary logs (${anstmp})"; _MDB_PATH_BINLOG="${_ANSWER:-${anstmp}}"; }
_confset _MDB_PATH_BINLOG "${_MDB_PATH_BINLOG}"

[ -z ${_MDB_PATH_LOG+x} ] && { anstmp=${S_PATH_LOG}/mysql; _askno "Path for logs (${anstmp})"; _MDB_PATH_LOG="${_ANSWER:-${anstmp}}"; }
_confset _MDB_PATH_LOG "${_MDB_PATH_LOG}"

_MDB_PATH_CONF=/etc/my.cnf.d && _confset _MDB_PATH_CONF "${_MDB_PATH_CONF}"

########################  CONFIGURATION

# load configuration file
. ${S_FILE_INSTALL_CONF}

########################  STORAGE MARIADB

name=mariadb
path_base=${S_HOST_PATH}/mariadb

if [ "${_DEV_DRIVER}" = zfs ]; then

	if ! zfs list ${_ZFS_ROOT}${S_HOST_PATH}|grep -q ^mariadb; then
		_echot "------------------  zfs ${name}"
		path_zfs=${_ZFS_ROOT}${path_base}
		path=${path_base}
		opts="-o mountpoint=${path} -o compression=lz4 -o  acltype=posixacl -o recordsize=8K -o primarycache=metadata"
		_evalr zfs list ${path_zfs} >/dev/null 2>&1 || _evalr zfs create ${opts} ${path_zfs}
	fi

elif [ "${_DEV_DRIVER}" = btrfs ]; then

	if ! ls -1 ${S_HOST_PATH}|grep -q ^mariadb; then
		_echot "------------------  btrfs ${name}"
		path=${path_base}
		_evalr ls -1 ${path} >/dev/null 2>&1 || _evalr btrfs subvolume create ${path}
	fi

fi

########################  IPTABLES

_echot "------------------  iptables"
sed -i '/^_NAT_SGBD=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
_service restart ${_IPT_SERVICE}



########################  LOOP

for i in $(seq 1 ${_PHP_CT_NUM}); do

	_echot "\n++++++++++++++++++  ${_CT_NAME}"
	_CT_NAME=${_MDB_CT_NAME}-${i}
	path_host=${path_base}/${_CT_NAME}

	if [ "${_DEV_DRIVER}" = zfs ]; then

		_echot "------------------  zfs ${_CT_NAME}"
		path=${path_host}
		path_zfs=${_ZFS_ROOT}${path_host}

		# rename
		if zfs list ${path_zfs} >/dev/null 2>&1; then
		 	_echot "------------------  unmount  ${path_zfs}"
		 	_evalr zfs unmount ${path_zfs} || _exite "Unable to unmount ${path_zfs}\nUnbind container using it"
			_echot "------------------  zfs backup ${path_zfs} to ${path_zfs}.${_SDATE}"
		 	_evalr zfs rename ${path_zfs} ${path_zfs}.${_SDATE}
		 fi

		_echot "------------------  zfs create ${path_zfs}"
		_evalr zfs create -o mountpoint=${path} ${path_zfs}

	elif [ "${_DEV_DRIVER}" = btrfs ]; then

		_echot "------------------  btrfs ${_CT_NAME}"
		# rename
		path=${path_host}
		if _evalr ls -1 ${path} >/dev/null 2>&1; then
			_echot "------------------  mv ${path} to ${path}.${_SDATE}"
		 	_evalr mv ${path} ${path}.${_SDATE}
		 fi

		_echot "------------------  btrfs create ${path}"
		_evalr btrfs subvolume create ${path}

	else
		_exite "This part have to be implemented"
	fi

	_echot "------------------  rights ${_CT_NAME}"
	_evalr chown ${_LXD_UID}:${_LXD_UID} ${path_host}
	_evalr setfacl -Rm u:${_LXD_UID}:rwx ${path_host}
	_evalr setfacl -Rm d:u:${_LXD_UID}:rwx ${path_host}

	########################  PROFILE

	profile=${_MDB_CT_PROFILE}-${i}
	_echot "------------------  profile ${profile}"

	lxc profile list -f csv|grep -q "^${profile}," && _eval lxc profile rename ${profile} ${profile}.${_SDATE}
	_eval lxc profile create ${profile}

	path=${path_host}
	path_ct=${_MDB_VM_PATH}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}

	########################  INIT

	_echot "------------------  init"
	if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
		lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
		_echot "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
	fi
	_eval lxc init ${_MDB_INIT} ${_CT_NAME} -p default -p global -p ${profile}

	_echot "------------------  ${_CT_NAME} start"
	_eval lxc start ${_CT_NAME}

	########################  METADATA

	_echot "------------------  metadata"
	_lxc_meta_set ${_CT_NAME} profiles default global ${profile}
	_lxc_meta_add ${_CT_NAME} apps mariadb

	########################  INSTALL

	_echot "------------------  host install"
	_install mariadb-client

	_echot "------------------  update"
	_lxc_exec ${_CT_NAME} "apk update"

	_echot "------------------  install mariadb"
	_lxc_exec ${_CT_NAME} "apk add mariadb mariadb-client mariadb-mytop"

	_echot "------------------  initialize mariadb"
	_lxc_exec ${_CT_NAME} "mysql_install_db --user=mysql --datadir=${_MDB_VM_PATH}"

	_echot "------------------  service set & start"
	service=mariadb
	_lxc_exec ${_CT_NAME} "rc-update add ${service}"
	_lxc_exec ${_CT_NAME} "rc-service ${service} start"

	########################  PATH

	_echot "------------------  paths"
	paths="${_MDB_PATH_DATA} ${_MDB_PATH_BINLOG} ${_MDB_PATH_LOG}"
	for path in ${paths}; do
		_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"
		_lxc_exec ${_CT_NAME} "chown mysql ${path}"
	done

	########################  MYSQL INIT

	_echot "------------------  root passwd"
	_lxc_exec ${_CT_NAME} "mysqladmin -u root password ${_MDB_PWD_LOCAL}"

	_echot "------------------  secure"
	#_echoA "Use this password: ${_MDB_PWD_LOCAL}"
	#_lxc_exec ${_CT_NAME} "mysql_secure_installation"
	cmd="DELETE FROM mysql.user WHERE User=''; DROP user ''@'%'; DROP DATABASE IF EXISTS test;"
	# DROP USER ''@'%'
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""

	########################  CONF

	_echot "------------------  conf server"
	file=${_MDB_PATH_CONF}/${fc_mdb_server##*/}
	_lxc_exec ${_CT_NAME} "[ -f ${file} ] && cp -a ${file} ${file}.${_SDATE}"
	_eval lxc file push -q ${fc_mdb_server} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} mariadb

	########################  PASSWORD

	_echot "------------------  variables set"
	strpass="root @ localhost - ${_MDB_PWD_LOCAL}\n"

	_echot "------------------  right roothost"
	for ip in ${_IPS_CLUSTER} ${_CIDR_VM%/*} ${S_SERVICE[proxy]}.lxd; do
		strpass+="roothost @ ${ip} - ${_MDB_PWD_HOST}\n"
		cmd="GRANT ALL PRIVILEGES ON *.* TO roothost@'${ip}' IDENTIFIED BY '${_MDB_PWD_HOST}' WITH GRANT OPTION;"
		_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""
	done

	_echot "------------------  right rootremote"
	for ip in ${S_IPS_ADMIN} ${S_SERVICE[proxy]}.lxd; do
		strpass+="rootremote @ ${ip} - ${_MDB_PWD_REMOTE}\n"
		cmd="GRANT ALL PRIVILEGES ON *.* TO rootremote@'${ip}' IDENTIFIED BY '${_MDB_PWD_REMOTE}' WITH GRANT OPTION"
		_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""
		cmd="GRANT PROXY ON ''@'%' TO 'rootremote'@'${ip}' WITH GRANT OPTION"
		_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""
	done

	_echot "------------------  right check"
	ip=${S_SERVICE[proxy]}.lxd
	strpass+="check @ ${ip} - nopwd\n"
	cmd="CREATE USER 'check'@'${ip}';"
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"${cmd}\""

	########################  RESTART

	_echot "------------------  mariadb restart"
	_lxc_exec ${_CT_NAME} "rc-service mariadb restart"

	########################  RSYSLOG

	_echot "------------------  ${_CT_NAME} client path"
	path=${S_PATH_LOG}/mysql
	_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"

	_echot "------------------  ${_CT_NAME} client"
	file=/etc/rsyslog.d/${fc_mdb_rsyslog_client##*/}
	_eval lxc file push -q ${fc_mdb_rsyslog_client} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} rsyslog

	_echot "------------------  ${_CT_NAME} rsyslog restart"
	_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"

	########################  LOGROTATE

	_echot "------------------  ${_CT_NAME} logrotate"
	file=/etc/logrotate.d/${fc_mdb_logrotate_client##*/}
	_eval lxc file push -q ${fc_mdb_logrotate_client} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} logrotate
	_lxc_exec ${_CT_NAME} "chmod g-w,o= /etc/logrotate.d/*"

	_echot "------------------  ${_CT_NAME} crond restart"
	_lxc_exec ${_CT_NAME} "rc-service crond restart"

	########################  CLEAN LOG

	_echot "------------------  ${_CT_NAME} log clean"
	_lxc_exec ${_CT_NAME} "find ${S_PATH_LOG}/mysql -name *.log -exec rm {} \;"

	########################  SHOW

	_echot "------------------  show privileges"
	# show users
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e 'FLUSH PRIVILEGES';"
	_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e 'SELECT user,host FROM mysql.user';"
	#_lxc_exec ${_CT_NAME} "mysql -uroot -p${_MDB_PWD_LOCAL} -e \"SELECT user,host FROM mysql.user WHERE Host <> 'localhost'\""

done

########################  ENDLOOP



########################  RSYSLOG

_echot "------------------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}/mysql
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"


_echot "------------------  ${S_SERVICE[log]} host"
file=/etc/rsyslog.d/${fc_mdb_rsyslog_host##*/}
_eval lxc file push -q ${fc_mdb_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echot "------------------  ${S_SERVICE[log]} rsyslog restart"
_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"

########################  LOGROTATE

_echot "------------------  ${S_SERVICE[log]} logrotate"
file=/etc/logrotate.d/${fc_mdb_logrotate_host##*/}
_eval lxc file push -q ${fc_mdb_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate
_lxc_exec ${S_SERVICE[log]} "chmod g-w,o= /etc/logrotate.d/*"

_echot "------------------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} "rc-service crond restart"

########################  SHOW

_echot "------------------  show passwords"
_echoA "Keep this passwords:"
_echo "${strpass%\\n}"

#########################  TEST

_echot "------------------  test connections"
for i in $(seq 1 ${_PHP_CT_NUM}); do
	ct_name=${_MDB_CT_NAME}-${i}
	_echo_ -n "${ct_name}: "
	mysql -s -uroothost -h${ct_name} -p${_MDB_PWD_HOST} -e '' && _echo ok || _echoe failed
done

#######################  PUBLISH

for i in $(seq 1 ${_PHP_CT_NUM}); do
	ct_name=${_MDB_CT_NAME}-${i}
	_echot "------------------  publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}


<<KEEP
######################## SQL

# SHOW VARIABLES LIKE 'character%';


_MDB_PWD_LOCAL=

# show log variables
mysql -uroot -p${_MDB_PWD_LOCAL} -e "show variables like '%log%';"

# show users
mysql -uroot -p${_MDB_PWD_LOCAL} -e "SELECT User, Host FROM mysql.user"
mysql -h10.0.0.120 -uroothost -p${_MDB_PWD_LOCAL} -e "SELECT User, Host FROM mysql.user"

# show grants
mysql -h 10.0.0.120 -u root -p${_MDB_PWD_LOCAL} -e "SHOW GRANTS;"

# tables by engine
mysql -uroot -p"${_MDB_PWD_LOCAL}" -e "SELECT ENGINE, COUNT(*) AS count FROM INFORMATION_SCHEMA.TABLES GROUP BY ENGINE;"


######################## Restore root password
rc-service mysql stop
kill  \$(cat /run/mysqld/mysqld.pid)
/usr/bin/mysqld --datadir=/var/lib/mysql --pid-file=/run/mysqld/mysqld.pid --skip-grant-tables --skip-networking &
mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';FLUSH PRIVILEGES;ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass';FLUSH PRIVILEGES;set password = password('MyNewPass');"
kill  \$(cat /run/mysqld/mysqld.pid)
rc-service mariadb restart

KEEP