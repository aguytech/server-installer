#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_RELEASE} ${_PART}"


########################  REQUIRED

_echoT "------------------ required vm image"
lxc image list -f json |jq -r '.[].aliases[].name' | grep -q ^${_CT_NAME_COM}$ || _exite "Unable to find image container: '${_CT_NAME_COM}'"

_echoT "------------------ required vm"
lxc list -f json | jq -r '.[].name' | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find image container: '${S_SERVICE[log]}'"
lxc list -f json | jq -r '.[].name' | grep -q ^${S_SERVICE[http]}$ || _exite "Unable to find image container: '${S_SERVICE[http]}'"

file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-redis.conf
file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-redis.conf
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-redis
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/client-redis


_echoT "------------------ required files"
_require ${file_rsyslog_host} ${file_rsyslog_client} ${file_logrotate_host} ${file_logrotate_client}


########################  DATA

_CT_NAME=${S_SERVICE[cache]}

#eval ${S_HOST_VM_ETH[default]}
#_CT_IP=${s_base}.${S_SERVICE_BITS[cache]}


_echoT "----------  data sysctl.conf"

[ -z ${_RDS_MAX_SYN_BACKLOG+x} ] && anstmp="${_MAX_SYN_BACKLOG}" && _askno "Set $(sysctl net.ipv4.tcp_max_syn_backlog) - (${anstmp})" && _RDS_MAX_SYN_BACKLOG=${_ANSWER:-$anstmp} && _confset _RDS_MAX_SYN_BACKLOG "${_RDS_MAX_SYN_BACKLOG}"

[ -z ${_RDS_MAX_TW_BUCKETS+x} ] && anstmp="${_MAX_TW_BUCKETS}" && _askno "Set $(sysctl net.ipv4.tcp_max_tw_buckets) - (${anstmp})" && _RDS_MAX_TW_BUCKETS=${_ANSWER:-$anstmp} && _confset _RDS_MAX_TW_BUCKETS "${_RDS_MAX_TW_BUCKETS}"

[ -z ${_RDS_FIN_TIMEOUT+x} ] && anstmp="${_FIN_TIMEOUT}" && _askno "Set $(sysctl net.ipv4.tcp_fin_timeout) - (${anstmp})" && _RDS_FIN_TIMEOUT=${_ANSWER:-$anstmp} && _confset _RDS_FIN_TIMEOUT "${_RDS_FIN_TIMEOUT}"

[ -z ${_RDS_KEEPALIVE_TIME+x} ] && anstmp="240" && _askno "Set $(sysctl net.ipv4.tcp_keepalive_time) - (${anstmp})" && _RDS_KEEPALIVE_TIME=${_ANSWER:-$anstmp} && _confset _RDS_KEEPALIVE_TIME "${_RDS_KEEPALIVE_TIME}"

[ -z ${_RDS_KEEPALIVE_INTVL+x} ] && anstmp="30" && _askno "Set $(sysctl net.ipv4.tcp_keepalive_intvl) - (${anstmp})" && _RDS_KEEPALIVE_INTVL=${_ANSWER:-$anstmp} && _confset _RDS_KEEPALIVE_INTVL "${_RDS_KEEPALIVE_INTVL}"

[ -z ${_RDS_KEEPALIVE_PROBES+x} ] && anstmp="9" && _askno "Set $(sysctl net.ipv4.tcp_keepalive_probes) - (${anstmp})" && _RDS_KEEPALIVE_PROBES=${_ANSWER:-$anstmp} && _confset _RDS_KEEPALIVE_PROBES "${_RDS_KEEPALIVE_PROBES}"


_echoT "----------  data redis"

[ -z "${_RDS_BACKLOG+x}" ] && anstmp="$(( ${_RDS_MAX_SYN_BACKLOG} / 2 ))" && _askno "Give a value for 'tcp-backlog', if change adjust sysctl parameters... (${anstmp})" && _RDS_BACKLOG=${_ANSWER:-$anstmp} && _confset _RDS_BACKLOG "${_RDS_BACKLOG}"

[ -z "${_RDS_KEEPALIVE+x}" ] && anstmp="$(( ${_APA_KEEPALIVE_TIME} + 60 ))" && _askno "Give time to keep alive (sends acks) 'tcp-keepalive' (${anstmp})s" && _RDS_KEEPALIVE=${_ANSWER:-$anstmp} && _confset _RDS_KEEPALIVE "${_RDS_KEEPALIVE}"

[ -z "${_RDS_TIMEOUT+x}" ] && anstmp="3600" && _askno "Give time to idle connection 'timeout' (${anstmp})s" && _RDS_TIMEOUT=${_ANSWER:-$anstmp} && _confset _RDS_TIMEOUT "${_RDS_TIMEOUT}"

[ -z "${_RDS_DATABASES+x}" ] && anstmp="16" && _askno "Give a number of max 'databases' (${anstmp})" && _RDS_DATABASES=${_ANSWER:-$anstmp} && _confset _RDS_DATABASES "${_RDS_DATABASES}"

[ -z "${_RDS_LOGLEVEL+x}" ] && anstmp="notice" && _askno "Give the log level 'loglevel': debug/verbose/notice/warning  (${anstmp})" && _RDS_LOGLEVEL=${_ANSWER:-$anstmp} && _confset _RDS_LOGLEVEL "${_RDS_LOGLEVEL}"


########################  INIT

_echoT "----------  init"

! lxc image list -f json|jq -r '.[].aliases[].name'|grep -q ^${_CT_NAME_COM}$ && _exite "Unable to find image container '${_CT_NAME_COM}'"
if lxc list -f json |jq -r '.[].name' | grep -q ^${_CT_NAME}$; then
	if lxc list -f json | jq -r '.[] | select(.status == "Running").name' | grep -q ^${_CT_NAME}$; then
		_eval lxc stop ${_CT_NAME}
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
		_eval lxc start ${_CT_NAME}-${_SDATE}
	else
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
	fi

fi

_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global


#_echoT "----------  network fixed ip"
#
#if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
#	_eval lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
#fi
#_eval lxc config device set ${_CT_NAME} eth0 ipv4.address ${_CT_IP}


_echoT "----------  ${_CT_NAME} start"

_eval lxc start ${_CT_NAME}

_eval sleep 1


########################  SYSCTL

_echoT "----------  conf sysctl.conf"

file=/etc/sysctl.d/20-lxd.conf

txt="# apache2 php-fpm
net.ipv4.tcp_max_syn_backlog = ${_RDS_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_RDS_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout= ${_RDS_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time= ${_RDS_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl= ${_RDS_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_RDS_KEEPALIVE_PROBES}"

_lxc_exec ${_CT_NAME} "echo '${txt}' > ${file}"


########################  INSTALL

_echoT "----------  host install"

_eval apt install -y redis-tools


_echoT "----------  install"

_lxc_exec ${_CT_NAME} "apk update"
_lxc_exec ${_CT_NAME} "apk add redis"

_echoT "----------  service set"

service=redis
_lxc_exec ${_CT_NAME} "rc-update add ${service}"
_lxc_exec ${_CT_NAME} "rc-service ${service} start"


########################  CONF

_echoT "----------  conf"

file=/etc/redis.conf

_lxc_exec ${_CT_NAME} "sed -i 's|^\(bind\) .*$|\1 * -::*|'  ${file}"
_lxc_exec ${_CT_NAME} "sed -i '/^logfile / s|^|#|'  ${file}"

cmds=; while read str val; do
	cmds+="sed -i 's|^\(${str}\) .*|\1 ${val}|' ${file}
"; done <<< "port  ${S_CACHE_PORT}
tcp-backlog  ${_RDS_BACKLOG}
timeout  ${_RDS_TIMEOUT}
tcp-keepalive  ${_RDS_KEEPALIVE}
databases  ${_RDS_DATABASES}
loglevel  ${_RDS_LOGLEVEL}
syslog-enabled  yes
syslog-ident  redis
syslog-facility  local7"
_lxc_exec ${_CT_NAME} "${cmds}"


_echoT "----------  restart redis"

_lxc_exec ${_CT_NAME} "rc-service redis restart"


########################  RSYSLOG

_echoT "----------  ${S_SERVICE[log]} host path"

path=${S_VM_PATH_LOG}/redis
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"


_echoT "----------  ${S_SERVICE[log]} host-redis"

file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echoT "----------  restart rsyslog ${S_SERVICE[log]}"

_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"


_echoT "----------  ${S_SERVICE[log]} client path"

path=${S_PATH_LOG}/redis
_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"
_lxc_exec ${_CT_NAME} "rm ${path}/redis.log 2>/dev/null"


_echoT "----------  ${S_SERVICE[log]} client-redis"

file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog

_echoT "----------  rsyslog restart ${_CT_NAME}"

_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"


########################  TEST

_echoT "----------  redis test acces"

_echo "timeout 3 redis-cli -h ${_CT_NAME} ping"
_evalq "timeout 3 redis-cli -h ${_CT_NAME} ping 2>/dev/null"

_echoI "\nTo do a benchmark, just type:" && sleep 0.1
_echo "redis-benchmark -h ${_CT_NAME} -p ${S_CACHE_PORT} -n 1000 -c 10 -k 1 -q"
_echo "redis-benchmark -h ${_CT_NAME} -p ${S_CACHE_PORT} -n 10000 -c 10 -k 1"
_echoI "\nTo see latency, just type:" && sleep 0.1
_echo "redis-cli -h ${_CT_NAME} -p ${S_CACHE_PORT} --latency-dist"

########################  PUBLISH

_echoT "----------  publish ${_CT_NAME}"

_eval lxc image list -f json | jq -r '.[].aliases[].name' | grep -q ^${_CT_NAME}$ && lxc image alias rename ${_CT_NAME} ${_CT_NAME}-$(date +%s)
_eval lxc publish --force ${_CT_NAME} --alias ${_CT_NAME}


########################  END

_echoT "---------- ${_PART} end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"
