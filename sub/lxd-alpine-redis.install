#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART}"

grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_INIT_NAME}$ || _exite "Unable to find image container: '${_CT_INIT_NAME}'"

_echot "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: '${S_SERVICE[log]}'"

file_conf_redis=${S_PATH_INSTALL_CONF}/redis/redis.conf
file_conf_sentinel=${S_PATH_INSTALL_CONF}/redis/sentinel.conf
file_conf_sentinel_notify=${S_PATH_INSTALL_CONF}/redis/notify.sh

file_conf_ha_front=${S_PATH_INSTALL_CONF}/haproxy/conf-available/40-fronts-redis
file_conf_ha_back=${S_PATH_INSTALL_CONF}/haproxy/conf-available/60-backs-redis

file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-redis.conf
file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-redis.conf
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-redis
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/client-redis

_echot "------------------ required files"
_require ${file_conf_redis} ${file_conf_sentinel} ${file_conf_sentinel_notify}
_require ${file_conf_ha_front} ${file_conf_ha_back}
_require ${file_rsyslog_host} ${file_rsyslog_client} ${file_logrotate_host} ${file_logrotate_client}

########################  DATA

_echot "------------------  data domain"

anstmp=rds-${S_DOM_FQDN//./-} && _askno "Base name of containers to build (${anstmp})"
_RDS_CT_NAME="${_ANSWER:-$anstmp}" && _confset _HPX_CT_NAME "${_HPX_CT_NAME}"

[ -z ${_RDS_CLIENT+x} ] && _askyn "Install redis-client on Host" && _RDS_CLIENT="${_ANSWER}" && _confset _RDS_CLIENT "${_RDS_CLIENT}"

anstmp=${S_DOM_FQDN%.lxd} && _askno "Prefix for proxy name (${anstmp})"
_RDS_PROXY="${_ANSWER:-$anstmp}" && _confset _RDS_PROXY "${_RDS_PROXY}"

_echot "------------------  data sentinel"

anstmp=1000 && _askno "Time to consider server are down (${anstmp})"
_RDS_DOWN="${_ANSWER:-$anstmp}" && _confset _RDS_DOWN "${_RDS_DOWN}"

anstmp=10000 && _askno "Sentinel failover-timeout (${anstmp})"
_RDS_FAILOVER="${_ANSWER:-$anstmp}" && _confset _RDS_FAILOVER "${_RDS_FAILOVER}"

_echot "------------------  data sysctl.conf"

[ -z ${_RDS_MAX_SYN_BACKLOG+x} ] && anstmp="${_MAX_SYN_BACKLOG}" && _askno "Set $(sysctl net.ipv4.tcp_max_syn_backlog) - (${anstmp})" && _RDS_MAX_SYN_BACKLOG="${_ANSWER:-$anstmp}" && _confset _RDS_MAX_SYN_BACKLOG "${_RDS_MAX_SYN_BACKLOG}"

[ -z ${_RDS_MAX_TW_BUCKETS+x} ] && anstmp="${_MAX_TW_BUCKETS}" && _askno "Set $(sysctl net.ipv4.tcp_max_tw_buckets) - (${anstmp})" && _RDS_MAX_TW_BUCKETS="${_ANSWER:-$anstmp}" && _confset _RDS_MAX_TW_BUCKETS "${_RDS_MAX_TW_BUCKETS}"

[ -z ${_RDS_FIN_TIMEOUT+x} ] && anstmp="${_FIN_TIMEOUT}" && _askno "Set $(sysctl net.ipv4.tcp_fin_timeout) - (${anstmp})" && _RDS_FIN_TIMEOUT="${_ANSWER:-$anstmp}" && _confset _RDS_FIN_TIMEOUT "${_RDS_FIN_TIMEOUT}"

[ -z ${_RDS_KEEPALIVE_TIME+x} ] && anstmp=240 && _askno "Set $(sysctl net.ipv4.tcp_keepalive_time) - (${anstmp})" && _RDS_KEEPALIVE_TIME="${_ANSWER:-$anstmp}" && _confset _RDS_KEEPALIVE_TIME "${_RDS_KEEPALIVE_TIME}"

[ -z ${_RDS_KEEPALIVE_INTVL+x} ] && anstmp=30 && _askno "Set $(sysctl net.ipv4.tcp_keepalive_intvl) - (${anstmp})" && _RDS_KEEPALIVE_INTVL="${_ANSWER:-$anstmp}" && _confset _RDS_KEEPALIVE_INTVL "${_RDS_KEEPALIVE_INTVL}"

[ -z ${_RDS_KEEPALIVE_PROBES+x} ] && anstmp=9 && _askno "Set $(sysctl net.ipv4.tcp_keepalive_probes) - (${anstmp})" && _RDS_KEEPALIVE_PROBES="${_ANSWER:-$anstmp}" && _confset _RDS_KEEPALIVE_PROBES "${_RDS_KEEPALIVE_PROBES}"

_echot "------------------  data redis"

anstmp="$(( ${_RDS_MAX_SYN_BACKLOG} / 2 ))" && _askno "Value for 'tcp-backlog', if change adjust sysctl parameters... (${anstmp})"
_RDS_BACKLOG="${_ANSWER:-$anstmp}" && _confset _RDS_BACKLOG "${_RDS_BACKLOG}"

anstmp="$(( ${_APA_KEEPALIVE_TIME} + 60 ))" && _askno "Time to keep alive (sends acks) 'tcp-keepalive' (${anstmp})s"
_RDS_KEEPALIVE="${_ANSWER:-$anstmp}" && _confset _RDS_KEEPALIVE "${_RDS_KEEPALIVE}"

anstmp=3600 && _askno "Time to idle connection 'timeout' (${anstmp})s"
_RDS_TIMEOUT="${_ANSWER:-$anstmp}" && _confset _RDS_TIMEOUT "${_RDS_TIMEOUT}"

anstmp=16 && _askno "Number of max 'databases' (${anstmp})"
_RDS_DATABASES="${_ANSWER:-$anstmp}" && _confset _RDS_DATABASES "${_RDS_DATABASES}"

anstmp=512mb && _askno "Memory usage limit (${anstmp})"
_RDS_MEM_MAX="${_ANSWER:-$anstmp}" && _confset _RDS_MEM_MAX "${_RDS_MEM_MAX}"

_echoa "MAXMEMORY POLICY"
_echo "# allkeys-lru -> Evict any key using approximated LRU
# volatile-lfu -> Evict using approximated LFU, only keys with an expire set
# allkeys-lfu -> Evict any key using approximated LFU
# volatile-random -> Remove a random key having an expire set
# allkeys-random -> Remove a random key, any key
# volatile-ttl -> Remove the key with the nearest expire time (minor TTL)
# noeviction -> Don't evict anything, just return an error on write operations"
_menu "Policy to remove keys when maxmemory is reached (volatile-ttl) " volatile-ttl volatile-lfu allkeys-lfu volatile-random allkeys-random noeviction
_RDS_MEM_POL="${_ANSWER:-$anstmp}" && _confset _RDS_MEM_POL "${_RDS_MEM_POL}"

_menu "Give the log level (notice)" notice debug verbose warning
_RDS_LOGLEVEL="${_ANSWER:-$anstmp}" && _confset _RDS_LOGLEVEL "${_RDS_LOGLEVEL}"

_CT_NAME=${_RDS_CT_NAME}-1
_RDS_PATH_LIB=/var/lib/redis
_RDS_QUORUM=1

################################################  MASTER

########################  INIT

_echot "------------------  init"
if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_echot "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
fi
_eval lxc init ${_CT_INIT_NAME} ${_CT_NAME} -p default -p global

_echot "------------------  ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}

########################  METADATA

_echot "------------------  metadata"
_lxc_meta_set ${_CT_NAME} profiles default global
_lxc_meta_add ${_CT_NAME} apps redis

########################  SYSCTL

_echot "------------------  host conf sysctl.conf"
if grep -q vm.overcommit_memory ${_SYS_FILE}; then
	_evalr "sed -i '/vm.overcommit_memory/ s|=.*|= 1|' ${_SYS_FILE}"
else
	_evalr "sh -c \"echo 'vm.overcommit_memory = 1' >> ${_SYS_FILE}\""
fi
_service restart systemd-sysctl

_echot "------------------  conf sysctl.conf"
file=/etc/sysctl.d/20-lxd.conf
txt="# apache2 php-fpm
net.ipv4.tcp_max_syn_backlog = ${_RDS_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_RDS_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout = ${_RDS_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time = ${_RDS_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl = ${_RDS_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_RDS_KEEPALIVE_PROBES}"
_lxc_exec ${_CT_NAME} "echo '${txt}' > ${file}"

########################  INSTALL

if [ "${_RDS_CLIENT}" = y ]; then
	_echot "------------------  host install"
	_install redis-tools
fi

_echot "------------------  install"
_lxc_exec ${_CT_NAME} "apk update"
_lxc_exec ${_CT_NAME} "apk add redis"

_echot "------------------  service set"
_lxc_exec ${_CT_NAME} "rc-update add redis"
_lxc_exec_t ${_CT_NAME} "rc-service -S redis start"

########################  CONF

_echot "------------------  redis conf"
file=/etc/${file_conf_redis##*/}
_eval lxc file push -q ${file_conf_redis} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} redis
_lxc_exec_t ${_CT_NAME} "chmod 644 ${file}"
_lxc_exec_t ${_CT_NAME} "cp -a ${file} ${file}.keep"

_echot "------------------  restart redis"
_lxc_exec_t ${_CT_NAME} "rc-service redis restart"

########################  SENTINEL

_echot "------------------  sentinel service"
file=/etc/init.d/redis-sentinel
_lxc_exec ${_CT_NAME} "sed -i '/command_user:/ s|redis|root|g'  ${file}"

_echot "------------------  sentinel conf"
file=/etc/sentinel.conf
_eval lxc file push -q ${file_conf_sentinel} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} redis
_lxc_exec_t ${_CT_NAME} "chmod 644 ${file}"
_lxc_exec_t ${_CT_NAME} "cp -a ${file} ${file}.keep"

_echot "------------------  sentinel notify"
file=${_RDS_PATH_LIB}/${file_conf_sentinel_notify##*/}
_eval lxc file push -q ${file_conf_sentinel_notify} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} redis
_lxc_exec ${_CT_NAME} "chown redis:redis ${file} && chmod 550 ${file}"

########################  RSYSLOG

_echot "------------------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}/redis
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"


_echot "------------------  ${S_SERVICE[log]} host-redis"
file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push -q ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echot "------------------  restart rsyslog ${S_SERVICE[log]}"
_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"

_echot "------------------  ${_CT_NAME} client path"
path=${S_PATH_LOG}/redis
_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"
_lxc_exec ${_CT_NAME} "[ -f ${path}/redis.log ]  && rm ${path}/redis.log"

_echot "------------------  ${_CT_NAME} client-redis"
file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push -q ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog

_echot "------------------  ${_CT_NAME} rsyslog restart"
_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"

########################  LOGROTATE

_echot "------------------  ${S_SERVICE[log]} logrotate"
file=/etc/logrotate.d/${file_logrotate_host##*/}
_eval lxc file push -q ${file_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate
_lxc_exec ${S_SERVICE[log]} "chmod g-w,o= /etc/logrotate.d/*"

_echot "------------------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} "rc-service crond restart"

_echot "------------------  ${_CT_NAME} logrotate"
file=/etc/logrotate.d/${file_logrotate_client##*/}
_eval lxc file push -q ${file_logrotate_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} logrotate
_lxc_exec ${_CT_NAME} "chmod g-w,o= /etc/logrotate.d/*"

_echot "------------------  ${_CT_NAME} crond restart"
_lxc_exec ${_CT_NAME} "rc-service crond restart"

################################################  SLAVE

_CT_NAME_2=${_RDS_CT_NAME}-2

_echot "------------------ init ${_CT_NAME_2}"
if lxc list -f csv -c n | grep -q ^${_CT_NAME_2}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME_2}$ && _eval lxc stop ${_CT_NAME_2}
	_eval lxc rename ${_CT_NAME_2} ${_CT_NAME_2}-${_SDATE}
fi
_eval lxc copy ${_CT_NAME} ${_CT_NAME_2}
_eval lxc start ${_CT_NAME_2}

_echot "------------------ conf replica ${_CT_NAME_2}"
file=/etc/redis.conf
_lxc_exec ${_CT_NAME_2} "sed -i '/^replica-priority / c\replica-priority 200' ${file}"
_lxc_exec ${_CT_NAME_2} "echo -e '\n# replica settings\nreplicaof ${_CT_NAME} ${S_CACHE_PORT}' >> ${file}"
_echot "------------------  restart redis ${_CT_NAME_2}"
_lxc_exec_t ${_CT_NAME_2} "rc-service redis restart"

_echot "------------------  service sentinel"
file=/etc/init.d/redis-sentinel
_lxc_exec ${_CT_NAME_2} "rc-update add redis-sentinel"
_lxc_exec_t ${_CT_NAME_2} "rc-service redis-sentinel start"

########################  HAPROXY

ct_proxy=${S_SERVICE[proxy]}

_echot "------------------  haproxy conf"
path=/etc/haproxy
for file in ${file_conf_ha_front} ${file_conf_ha_back}; do
	_eval lxc file push -q ${file} ${ct_proxy}${path}/conf-available/${file##*/}
	file=${file##*/}
	_lxc_exec ${ct_proxy} "[ -h ${path}/conf-enabled/${file} ] || ln -s ${path}/conf-available/${file}  ${path}/conf-enabled/${file}"
done
_lxc_var_replace ${ct_proxy} /etc/haproxy/conf-available redis

_echot "------------------  haproxy reload"
_lxc_exec_e ${ct_proxy} "rc-service haproxy reload"

########################  SHOW

_echot "------------------  show role"
for i in 1 2; do
	ct=${_RDS_CT_NAME}-$i
	echo -n "$ct - "; redis-cli -h ${ct} -p ${S_CACHE_PORT} info replication|sed -n 's/role://p'
done

_echot "------------------  show role"
redis-cli -h ${_RDS_CT_NAME}-$i -p 2${S_CACHE_PORT} info sentinel

########################  TEST

_echoA "To do a benchmark, just type:" && sleep 0.1
_echoa "redis-benchmark -h ${_CT_NAME} -p ${S_CACHE_PORT} -n 1000 -c 10 -k 1 -q"
_echoa "redis-benchmark -h ${_CT_NAME} -p ${S_CACHE_PORT} -n 10000 -c 10 -k 1"
_echoA "To see latency, just type:" && sleep 0.1
_echoa "redis-cli -h ${_CT_NAME} -p ${S_CACHE_PORT} --latency-dist"

########################  PUBLISH

for i in 1 2; do
 	ct_name=${_RDS_CT_NAME}-${i}
	_echot "------------------  publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
