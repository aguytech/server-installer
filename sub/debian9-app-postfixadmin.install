#!/bin/bash
#
# write by Aguy

PARTNAME="${_PART#*-}"


_echoT "\n==========================================  $S_RELEASE $_PART"

_echoT "------------------ file required"
FILE_XTRA_SUB=${S_PATH_INSTALL_CONF}/apache2/sub-site.conf
FILE_XTRA_SUB_SSL=${S_PATH_INSTALL_CONF}/apache2/sub-site-ssl.conf

FILES="$FILE_XTRA_SUB $FILE_XTRA_SUB_SSL"
for FILE in $FILES; do ! [ -f "$FILE" ] && _exite "Unable to find file: '$FILE'"; done


####################################  FUNCTION


####################################  CONTAINER

if [ "$S_SERVER_TYPE" == vz ]; then
	_echoT "----------  ctid"

	[ "${S_SERVICE_IPS['admin']/$_IPTHIS/}" == "${S_SERVICE_IPS['admin']}" ] && _askyn "This container is not the default one for Administration: '${S_SERVICE_IPS['admin']}'\nConfirm or type 'n' to exit"
	[ "$_ANSWER" == "n" ] && _exite "Bye"
fi


####################################  MAIN

_echoT "------------------ fileconf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

[ -z ${_MYDOMAIN+x} ] && anstmp="$S_DOMAIN_FQDN" && _askno "Please enter a domain name ($anstmp)" && _MYDOMAIN="${_ANSWER:-$anstmp}" && _confset _MYDOMAIN "$_MYDOMAIN"

[ -z ${_SUBDOMAIN+x} ] && anstmp="pfa" && _askno "Give a name for subdomain access ($anstmp)" && _SUBDOMAIN=${_ANSWER:-$anstmp} && _confset _SUBDOMAIN "$_SUBDOMAIN"

[ -z ${_PATH_WWW+x} ] && anstmp="/var/www" && _askno "Give a path for www ($anstmp)" && _PATH_WWW=${_ANSWER:-$anstmp} && _confset _PATH_WWW "$_PATH_WWW"

[ -z ${_PATH_INSTALL+x} ] && anstmp="/var/www/$_MYDOMAIN" && _askno "Give a path to install ($anstmp)" && _PATH_INSTALL=${_ANSWER:-$anstmp} && _confset _PATH_INSTALL "$_PATH_INSTALL"

[ -z ${_DBHOST+x} ] && anstmp="${S_SERVICE_IPS['sgbd']%% *}" && _askno "Give the location of database server ? ($anstmp)" && _DBHOST=${_ANSWER:-$anstmp} && _confset _DBHOST "$_DBHOST"

[ -z ${_DBNAME+x} ] && anstmp="${PARTNAME}" && _askno "Give name for database ($anstmp)" && _DBNAME=${_ANSWER:-$anstmp} && _confset _DBNAME "$_DBNAME"

[ -z ${_DBUSER+x} ] && anstmp="$_SUBDOMAIN" && _askno "Give a name for database user ($anstmp)" && _DBUSER=${_ANSWER:-$anstmp} && _confset _DBUSER "$_DBUSER"

[ -z ${_DBPWD+x} ] && anstmp="$(_pwd)" && _askno "Give a password for database user '$_DBUSER' ($anstmp)" && _DBPWD=${_ANSWER:-$anstmp} && _confset _DBPWD "$_DBPWD"

if [ -z ${_PWDROOTADMIN+x} ]; then
    _ask "Give password for user 'rootadmin'@'$_DBHOST'"
    _PWDROOTADMIN="$_ANSWER"
    while ! timeout 2 mysql -h$_DBHOST -urootadmin -p$_PWDROOTADMIN -e "" 2>/dev/null; do
        _echoE "Unable to connect to database: 'rootadmin'@'$_DBHOST' pass=$_PWDROOTADMIN"
        _ask "Give password for user 'rootadmin'@'$_DBHOST'"
        _PWDROOTADMIN=$_ANSWER
    done
fi

PATH_ADMIN="$_PATH_INSTALL/admin"


_echoT "----------  path create"

for PATHTMP in "$_PATH_WWW" "$_PATH_INSTALL" "$PATH_ADMIN"; do
    ! [ -d "$PATHTMP" ] && _evalq mkdir -p "$PATHTMP"
    _evalq chown www-data:www-data "$PATHTMP"
    _evalq chmod 755 "$PATHTMP"
done


####################################  INSTALL

_echoT "----------  download"

_eval cd "$_PATH_INSTALL"

URLDOWN="https://github.com/postfixadmin/postfixadmin.git"
[ -d "postfixadmin" ] && ! [ -d "postfixadmin.$_DDATE" ] && _evalq mv "postfixadmin" "postfixadmin.$DDATE"
[ -e "postfixadmin" ] && _evalq rm -fR "postfixadmin"
# asks
while ! git clone "$URLDOWN" "postfixadmin"; do
	_echoE "${redb}Unable to download software with URL:\n$URLDOWN"
	_ask "Please give a URL to download"
	URLDOWN=$_ANSWER
done


_echoT "----------  install"

[ -d "postfixadmin/.git" ] && _evalq rm -fR "postfixadmin/.git"
[ -f "postfixadmin/.gitignore" ] && _evalq rm -fR  "postfixadmin/.gitignore"

_VERSION=$(grep -m1 '^Version [\.0-9]\+ - .*' postfixadmin/CHANGELOG.TXT |sed 's/^Version \([\.0-9]\+\) - .*/\1/') && _confset _VERSION "$_VERSION"
PATHTO="postfixadmin-${_VERSION}"
[ -d "$PATHTO" ] && ! [ -d "$PATHTO.$_DDATE" ] && _evalq mv "$PATHTO" "$PATHTO.$DDATE"
[ -d "$PATHTO" ] && _evalq rm -fR "$PATHTO"
_evalq mv "${PARTNAME}" "$PATHTO"
_evalq ln -sv "$PATHTO" "$_SUBDOMAIN"


_echoT "----------  create template_c"

PATHTMP="$_PATH_INSTALL/$PATHTO/templates_c"
! [ -d "$PATHTMP" ] && _evalq mkdir "$PATHTMP"

_evalq chown www-data:www-data "$PATHTMP"


_echoT "----------  rights www-data"

_evalq chown www-data:www-data -R "$_PATH_INSTALL/$PATHTO" "$_PATH_INSTALL/$_SUBDOMAIN" "$PATH_ADMIN"


_echoT "----------  $_DBHOST create db & user"

_evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"CREATE DATABASE IF NOT EXISTS $_DBNAME DEFAULT CHARACTER SET utf8;\""
for IP in ${S_SERVICE_IPS['admin']}; do
    _evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"GRANT USAGE ON *.* TO '$_DBUSER'@'${IP}' IDENTIFIED BY '$_DBPWD'\""
    _evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"GRANT ALL PRIVILEGES ON $_DBNAME.* TO '$_DBUSER'@'${IP}'\""
done
_evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"FLUSH PRIVILEGES\""


_echoT "----------  php-imap && dovecot-core install"

_eval "apt install -y php-imap dovecot-core"


####################################  APACHE

PATH_APACHE="/etc/apache2/sites-available"
FILES="$FILE_XTRA_SUB $PATH_APACHE/${_MYDOMAIN}.conf
$FILE_XTRA_SUB_SSL $PATH_APACHE/${_MYDOMAIN}-ssl.conf"

# SUBDOMAINS="$_SUBDOMAIN"
SUBDOMAINS="admin $_SUBDOMAIN"

SUBDOMAIN=$_SUBDOMAIN
for _SUBDOMAIN in $SUBDOMAINS; do
    while read FILEFROM FILETO; do
        ! [ -f "$FILETO" ] && _evalq touch "$FILETO"

        _echoT "----------  apache ${_SUBDOMAIN} $FILETO"

        if ! grep -q "ServerName ${_SUBDOMAIN}.${_MYDOMAIN}" "$FILETO"; then
            _evalq "cat '$FILEFROM' >> '$FILETO'"
            _evalq "sed -i 's|_PATH_WWW/_MYDOMAIN/_SUBDOMAIN|$_PATH_WWW/$_MYDOMAIN/$_SUBDOMAIN/public|' '$FILETO'"
            _evalq _var_replace_www "$FILETO"
        fi

    done < <(echo "$FILES")
done
_SUBDOMAIN=$SUBDOMAIN


_echoT "----------  phpinfo & monitor"

for PATHTMP in "/var/www/html" "$_PATH_INSTALL" "$PATH_ADMIN"; do
    _evalq "echo '<?php phpinfo(); ?>' > '$PATHTMP/phpinf.php.keep'"
    _evalq "echo 'admin' > '$PATHTMP/ping-monitor.html'"
    _evalq "echo '<?php echo \"admin\"; ?>' > '$PATHTMP/ping-monitor.php'"

    _evalq chown www-data:www-data -R "$PATHTMP"
done


_echoT "----------  apache enable sites"

_evalq a2ensite "${_MYDOMAIN}.conf"


_echoT "----------  rights www-data"

_eval chown www-data:www-data -R "$_PATH_INSTALL/$PATHTO"

_echoT "----------  apache reload"

_evalq systemctl reload apache2


_echoT "----------  postfixadmin conf access"

FILE=${PATHTO}/config.local.php

echo "<?php

// configuration
\$CONF['configured'] = true;

// password for www access
\$CONF['setup_password'] = '';

// Database
\$CONF['database_type'] = 'mysqli';
\$CONF['database_host'] = '$_DBHOST';
\$CONF['database_port'] = '$S_MARIA_PORT';
\$CONF['database_name'] = '$_DBNAME';
\$CONF['database_user'] = '$_DBUSER';
\$CONF['database_password'] = '$_DBPWD';

// Encrypt
\$CONF['encrypt'] = 'dovecot:SHA512-CRYPT';
\$CONF['dovecotpw'] = '/usr/bin/doveadm pw';

// Mailboxes
// If you want to store the mailboxes per domain set this to 'YES'.
\$CONF['domain_path'] = 'YES';
// If you don't want to have the domain in your mailbox set this to 'NO'.
\$CONF['domain_in_mailbox'] = 'NO';
// If you want to define your own function to generate a maildir path set this to the name of the function.
\$CONF['maildir_name_hook'] = 'NO';

// Sub-folders which should automatically be created for new users.
//\$CONF['create_mailbox_subdirs'] = array('Drafts','Junk','Trash','Sent');
//\$CONF['create_mailbox_subdirs_host']='localhost';
// Specify '' for Dovecot and 'INBOX.' for Courier.
//\$CONF['create_mailbox_subdirs_prefix']='INBOX.';
// Show used quotas from Dovecot dictionary backend in virtual
\$CONF['used_quotas'] = 'YES';
// Note about dovecot config: table 'quota' is for 1.0 & 1.1, table 'quota2' is for dovecot 1.2 and newer
\$CONF['new_quota_table'] = 'YES';

// Mail
// Allows a user to reset his forgotten password with a code sent by email/SMS
\$CONF['forgotten_user_password_reset'] = true;
// Allows an admin to reset his forgotten password with a code sent by email/SMS
\$CONF['forgotten_admin_password_reset'] = false;
// Admin
\$CONF['admin_email'] = 'postmaster@${_MYDOMAIN}';
\$CONF['admin_name'] = 'Postmaster';
// Mail parmeters
\$CONF['default_aliases'] = array (
    'abuse' => 'postmaster@${_MYDOMAIN}',
    'hostmaster' => 'postmaster@${_MYDOMAIN}',
    'webmaster' => 'postmaster@${_MYDOMAIN}'
    'postmaster' => '${S_DOMAIN_EMAIL_TECH}'
);

// Fetchmail
// If you don't want fetchmail tab set this to 'NO';
\$CONF['fetchmail'] = 'YES';
// fetchmail_extra_options allows users to specify any fetchmail options and any MDA
// This should be set to NO, except if you *really* trust *all* your users.
\$CONF['fetchmail_extra_options'] = 'NO';

// Vacation
\$CONF['vacation'] = 'NO';
// This domain must exclusively be used for vacation. Do NOT use it for 'normal' mail addresses.
\$CONF['vacation_domain'] = 'autoreply.local';
// If you want users to take control of vacation set this to 'YES'.
\$CONF['vacation_control'] ='YES';
// Set to 'YES' if your domain admins should be able to edit user vacation.
\$CONF['vacation_control_admin'] = 'YES';
// reply
\$CONF['vacation_choice_of_reply'] = array (
   0 => 'reply_once',        // Sends only Once the message during Out of Office
   1 => 'reply_every_mail',       // Reply on every email
   60*60 *24*7 => 'reply_once_per_week'        // Reply if last autoreply was at least a week ago
);

// Header
\$CONF['show_header_text'] = 'NO';
\$CONF['header_text'] = ':: Postfix Admin ::';
// Footer
\$CONF['show_footer_text'] = 'YES';
\$CONF['footer_text'] = 'Return to ${_MYDOMAIN}';
\$CONF['footer_link'] = 'http://${_MYDOMAIN}';
" > "$FILE"


_echoT "----------  rights www-data"

_evalq chown www-data:www-data -R "$_PATH_INSTALL/$PATHTO" "$_PATH_INSTALL/$_SUBDOMAIN"


_echoT "----------  setup"

_askno "Load the following url in your browser to setup\nhttps://${_SUBDOMAIN}.${_MYDOMAIN}/\nConfirm"


_echoT "----------  password"

_echoA "Don't forget to keep password"
_echoa "- $_DBUSER @ $_DBHOST - $_DBPWD"


_echoT "----------  end"

_evalq _var_unset "part" "*"
_evalq "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"

