#!/bin/bash
#
# write by Aguy

<<TODO
USE FALLBACK RELAY to 181
relayhost = [admin1.hl.local]
fallback_relay = [admin2.hl.local]
TODO

_echoT "\n==========================================  ${S_RELEASE}-${_PART}"

grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART}" >> ${S_FILE_INSTALL_CONF}

file_env=${S_PATH_SCRIPT_CONF}/env
file_bash_aliases=${S_PATH_SCRIPT_CONF}/.bash_aliases
file_bash_functions=${S_PATH_SCRIPT_CONF}/.bash_functions
path_install_bash_completion=${S_PATH_INSTALL_CONF}/bash-completion

file_rsyslog_cron=${S_PATH_INSTALL_CONF}/rsyslog/cron.conf
file_rsyslog_client_auth=${S_PATH_INSTALL_CONF}/rsyslog/client-auth.conf
file_logrotate_server=${S_PATH_INSTALL_CONF}/logrotate/server

file_vim=${S_PATH_SCRIPT_CONF}/.vimrc
file_tmux=${S_PATH_SCRIPT_CONF}/.tmux.conf

_echot "------------------  required files"
_require ${file_env} ${file_bash_aliases} ${file_bash_functions}
_require ${file_rsyslog_cron} ${file_rsyslog_client_auth} ${file_logrotate_server}
_require ${file_vim} ${file_tmux}
_requirep ${path_install_bash_completion}

########################  DATA

if [ "${S_STORAGE_DRIVER}" = zfs ]; then
	_echot "------------------  data zfs"
	anstmp="root"
	_askno "Give the name of zfs root for device ${S_STORAGE_DEVICE} (${anstmp})"
	_ZFS_ROOT=${_ANSWER:-$anstmp} && _confset _ZFS_ROOT "${_ZFS_ROOT}"
fi

_echot "------------------  data sysctl.conf"

_SYS_FILE=/etc/sysctl.d/20-server.conf && _confset _SYS_FILE "${_SYS_FILE}"

# host
[ -z ${_SOMAXCONN+x} ] && anstmp="4096" && _askno "Set $(sysctl net.core.somaxconn) - (${anstmp})" && _SOMAXCONN="${_ANSWER:-$anstmp}" && _confset _SOMAXCONN "${_SOMAXCONN}"
[ -z ${_MAX_BACKLOG+x} ] && anstmp="1000" && _askno "Set $(sysctl net.core.netdev_max_backlog) - (${anstmp})" && _MAX_BACKLOG="${_ANSWER:-$anstmp}" && _confset _MAX_BACKLOG "${_MAX_BACKLOG}"

# host & vm
[ -z ${_MAX_SYN_BACKLOG+x} ] && anstmp="1024" && _askno "Set $(sysctl net.ipv4.tcp_max_syn_backlog) - (${anstmp})" && _MAX_SYN_BACKLOG="${_ANSWER:-$anstmp}" && _confset _MAX_SYN_BACKLOG "${_MAX_SYN_BACKLOG}"
[ -z ${_MAX_TW_BUCKETS+x} ] && anstmp="65536" && _askno "Set $(sysctl net.ipv4.tcp_max_tw_buckets) - (${anstmp})" && _MAX_TW_BUCKETS="${_ANSWER:-$anstmp}" && _confset _MAX_TW_BUCKETS "${_MAX_TW_BUCKETS}"
[ -z ${_FIN_TIMEOUT+x} ] && anstmp="60" && _askno "Set $(sysctl net.ipv4.tcp_fin_timeout) - (${anstmp})" && _FIN_TIMEOUT="${_ANSWER:-$anstmp}" && _confset _FIN_TIMEOUT "${_FIN_TIMEOUT}"
[ -z ${_KEEPALIVE_TIME+x} ] && anstmp="7200" && _askno "Set $(sysctl net.ipv4.tcp_keepalive_time) - (${anstmp})" && _KEEPALIVE_TIME="${_ANSWER:-$anstmp}" && _confset _KEEPALIVE_TIME "${_KEEPALIVE_TIME}"
[ -z ${_KEEPALIVE_INTVL+x} ] && anstmp="75" && _askno "Set $(sysctl net.ipv4.tcp_keepalive_intvl) - (${anstmp})" && _KEEPALIVE_INTVL="${_ANSWER:-$anstmp}" && _confset _KEEPALIVE_INTVL "${_KEEPALIVE_INTVL}"
[ -z ${_KEEPALIVE_PROBES+x} ] && anstmp="9" && _askno "Set $(sysctl net.ipv4.tcp_keepalive_probes) - (${anstmp})" && _KEEPALIVE_PROBES="${_ANSWER:-$anstmp}" && _confset _KEEPALIVE_PROBES "${_KEEPALIVE_PROBES}"

# sysctl net.core.somaxconn net.core.netdev_max_backlog
# sysctl net.ipv4.tcp_max_syn_backlog net.ipv4.tcp_max_tw_buckets
# sysctl net.ipv4.tcp_fin_timeout net.ipv4.tcp_keepalive_time net.ipv4.tcp_keepalive_intvl net.ipv4.tcp_keepalive_probes

########################  MAIN

_echot "------------------  sysctl conf"
_keepcpts ${_SYS_FILE}
echo "# server configuration
net.ipv4.ip_forward = 1
net.core.somaxconn = ${_SOMAXCONN}
net.core.netdev_max_backlog = ${_MAX_BACKLOG}
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout = ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time = ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl = ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}" > ${_SYS_FILE}

_echot "------------------  sysctl restart"
_service restart systemd-sysctl

_echot "------------------ bs link"
! [ -e /bs ] && sudo ln -s /usr/local/bs /bs

_echot "------------------  root password change"
_askyn "Do you change the default root password"
if [ "${_ANSWER}" = y ]; then
	_ask "Please enter a root password"
	passwd root <<<"${_ANSWER}
${_ANSWER}
"
fi

_echot "------------------  .bash_aliases"
file=~/.bash_aliases
[ -e ${file} ] && _eval rm ${file}
_eval ln -s ${file_bash_aliases} ${file}

_echot "------------------  .bash_functions"
file=~/.bash_functions
[ -e ${file} ] && _eval rm ${file}
_eval ln -s ${file_bash_functions} ${file}

_echot "------------------  bash-completion"
_evalr "cp -a ${S_PATH_INSTALL_CONF}/bash-completion/* /usr/share/bash-completion/completions/"

_echot "------------------  .bashrc"

file=~/.bashrc
_keepcpts ${file}
_eval "sed -i 's|^\(HISTSIZE\)=.*$|\1=4000|' ${file}"
_eval "sed -i 's|^\(HISTFILESIZE\)=.*$|\1=20000|' ${file}"
_eval "sed -i '/^#force_color_prompt/ s|^#||' ${file}"

case "${S_SERVER_TYPE}" in
	home)	color='\\[\\033[01;34m\\]' ;;
	ovh)	color='\\[\\033[01;32m\\]' ;;
	docker)	color='\\[\\033[01;33m\\]' ;;
	kvm)	color='"\\[\\033[01;38;5;172m\\]' ;;
	lxd)	color='\\[\\033[01;33m\\]' ;;
	*)		color='\\[\\033[01;34m\\]'; color_root=${color} ;;
esac
color_root="\033[01;31m"
# PS1
ps1='${debian_chroot:+($debian_chroot)}'${color}'\\h\\[\\033[00m\\]:\\W\\[\\033[01;31m\\]\\$\\[\\033[00m\\]'
# no root
sed -i "/if \[ \"\$color_prompt/ {n;s|=.*|='$ps1'|}" ${file}

# env
grep -q "${file_env}" ${file} || echo "
# source global variables
[ -f ${file_env} ] && . ${file_env}

# functions
[ -f ~/.bash_functions ] && . ~/.bash_functions
" >> ${file}
# aliases
grep -q '. ~/.bash_aliases' ${file} || echo "[ -f ~/.bash_aliases ] && . ~/.bash_aliases
"  >> ${file}

_source ${file}

_echot "------------------  mariadb repos"
#apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
#apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xF1656F24C74CD1D8
apt-key adv --fetch-keys "https://mariadb.org/mariadb_release_signing_key.asc"
file=/etc/apt/sources.list.d/mariadb.list
echo "# MariaDB 10.6
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.6/ubuntu ${S_RELEASE_NAME} main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/10.6/ubuntu ${S_RELEASE_NAME} main" > "${file}"

_echot "------------------  pgsql repos"
file=/etc/apt/sources.list.d/pgdg.list
echo "#https://www.postgresql.org/download/linux/ubuntu/
deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "${file}"
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

########################  INSTALL

_echot "------------------  upgrade"
_eval "upgrade"

_echot "------------------  install base"
_eval "apt install -y bsdmainutils cron curl less logrotate"

str=" ovh home "
if [ "${str/ ${S_SERVER_TYPE} /}" != "${str}" ]; then

	_echot "------------------  install tools"
	_eval "apt-get install -y man openssh-server apt-utils net-tools rsync bash-completion htop iotop tree gnupg vim lnav multitail git"
	# acpid apt-file apt-utils dstat hdparm iputils-tracepath jwhois mlocate mtop p7zip p7zip-plugins netcat lsb-release pciutils rcconf sysstat wget telnet dirmngr mariadb-client postgresql-client
fi

if type vim >/dev/null 2>&1 ; then
    _echot "------------------  links edit"
    for file in /etc/alternatives/editor; do
        [ -e ${file} ] && _evalr rm ${file}
        _evalr ln -sv /usr/bin/vim.basic ${file}
    done
fi

########################  STORAGE

str="ovh home"
if [[ " ${str} " = *" ${S_SERVER_TYPE} "* ]]; then

	if [ "${S_STORAGE_DRIVER}" = zfs ]; then

		_echot "------------------  zfs install"
		_eval apt install -y zfsutils-linux

		path=/zroot
		_echot "------------------  zfs zpool ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_evalq zpool create root ${S_STORAGE_DEVICE} -m ${path}

		path=${S_PATH_SAVE}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_eval zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_PATH_SAVE}

		path=${S_HOST_PATH}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_eval zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_HOST_PATH}

		path=${S_HOST_PATH_SP}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_eval zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_HOST_PATH_SP}

		path=${S_HOST_PATH_SHARE}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_eval zfs create -o mountpoint=${path} -o compression=lz4 -o  acltype=posixacl ${_ZFS_ROOT}${S_HOST_PATH_SHARE}

		path=${S_HOST_PATH_SAVE}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_eval zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_HOST_PATH_SAVE}

		_echot "------------------  zfs zpool list"
		zpool list -v

		_echot "------------------  zfs list"
		zfs list

	elif [ "${S_STORAGE_DRIVER}" = btrfs ]; then

		_echot "------------------  btrfs storage"
		path=${S_HOST_PATH}
		_echoA "Create a btrfs subvolume: /lxd-${S_RELEASE_NAME} and mount it in ${path}"
		_echoa "Continue after that: " && read str
		[ -d ${path} ] || _exite "Unable to find path: ${path}"

		btrfs subvolume list .

		_echot "------------------  btrfs paths"
		paths="${S_HOST_PATH_SP} ${S_HOST_PATH_SHARE} ${S_HOST_PATH_SAVE} ${S_HOST_PATH_LOG} "
		for path in ${paths}; do
			[ -d ${path} ] || _eval mkdir /vm/${path}
		done

	else
		_exite "This part have to be implemented"
	fi

fi

########################  PATHS

str=" ovh home "
if [ "${str/ ${S_SERVER_TYPE} /}" != "${str}" ]; then

	paths="${S_HOST_PATH} ${S_HOST_PATH_SP} ${S_HOST_PATH_SHARE} ${S_HOST_PATH_LOG} ${S_HOST_PATH_SAVE}"
	_echot "------------------  create ${paths}"
	for path in ${paths}; do
		[ -d "${path}" ] || _evalq mkdir -p "${path}"
	done
fi

########################  MAIL

_echot "------------------  mail"
_echow "MAIL part have to be implemented"

########################  CONF

str=" ovh home "
if [ "${str/ ${S_SERVER_TYPE} /}" != "${str}" ]; then

	_echot "------------------  conf tmux"
	file="${HOME}/.tmux.conf"
	_keepmvts "${file}"
	_eval ln -s "${file_tmux}" "${file}"

	# colorscheme
	_eval cp ${S_PATH_INSTALL_CONF}/vim/*.vim /usr/share/vim/vim*/colors/

	_echot "------------------  conf vim"
	file="${HOME}/.vimrc"
	_keepmvts "${file}"
	_eval ln -s "${file_vim}" "${file}"

	# colorscheme
	_eval cp ${S_PATH_INSTALL_CONF}/vim/*.vim /usr/share/vim/vim*/colors/
fi

_echot "------------------  conf nano"

for str in conf install; do
	cp -a /usr/share/nano/sh.nanorc /usr/share/nano/${str}.nanorc
	sed -i 's|^\(syntax \).*|\1"'${str}'" "\.'${str}'$"|' /usr/share/nano/${str}.nanorc
done

file=/etc/nanorc
_keepcpts "${file}"

_eval "sed -i 's|^.*\(set tabsize\).*|\1 4|' ${file}"
_eval "sed -i 's|^\(set cut.*\)$|# \1|' ${file}"
_eval "sed -i 's|^\(set linenumbers.*\)$|# \1|' ${file}"
_eval "sed -i '/^# *include/ s/^# //' ${file}"

# various
opts="constantshow historylog matchbrackets multibuffer nohelp softwrap"
# color
opts+="errorcolor functioncolor keycolor numbercolor selectedcolor statuscolor stripecolor titlecolor"
# uncomment
for opt in $opts; do
	_eval "sed -i 's|^.*\(set ${opt}.*\)$|\1|' ${file}"
done

########################  NTP

str=" ovh "
if [ "${str/ "${S_SERVER_TYPE}" /}" != "${str}" ]; then

	_echot "------------------  install ntp"

	_eval "apt-get install -y ntp"

	_echot "------------------  conf ntp"

	file=/etc/ntp.conf
	_keepcpts "${file}"

	str='.fr.pool.ntp.org'; sed -i "s/^\(server .\).*/\1${str}/" "${file}"
	_service start ntp
fi

########################  CRON

_echot "------------------  cron conf"

file=/etc/crontab
_keepcpts ${file}
str="MAILTO=${S_DOMAIN_EMAIL_TECH}"
grep -q '^MAILTO' "${file}" || _eval "sed -i '/^PATH=.*/ a ${str}' ${file}"

########################  RSYSLOG

_echot "------------------  rsyslog conf"

file="/etc/rsyslog.conf"
_keepcpts "${file}"

# udp
if [ "${S_RSYSLOG_PTC}" = udp ]; then
	_eval "sed -i 's|^#\?\(module(load=\"imudp.*\)$|\1|' ${file}"
	_eval "sed -i 's|^#\?\(input(type=\"imudp\"\).*$|\1 port=\"${S_RSYSLOG_PORT}\")|' ${file}"
# tcp
elif [ "${S_RSYSLOG_PTC}" = tcp ]; then
	_eval "sed -i 's|^#\?\(module(load=\"imtcp.*\)$|\1|' ${file}"
	_eval "sed -i 's|^#\?\(input(type=\"imtcp\"\).*$|\1 port=\"${S_RSYSLOG_PORT}\")|' ${file}"
fi

_echot "------------------  rsyslog restart"
_service restart rsyslog

_echot "------------------  rsyslog conf"
sed -i '/^auth.*/ s|^|#|' /etc/rsyslog.d/50-default.conf
sed -i '/^cron.*/ s|^|#|' /etc/rsyslog.d/50-default.conf

_echot "------------------  rsyslog cron"
file=/etc/rsyslog.d/70-${file_rsyslog_cron##*/}
_evalq cp -a ${file_rsyslog_cron} ${file}
_var_replace ${file} rsyslog

_echot "------------------  rsyslog client-auth"
file=/etc/rsyslog.d/72-${file_rsyslog_client_auth##*/}
_evalq cp -a ${file_rsyslog_client_auth} ${file}
_var_replace ${file} rsyslog

#TODO add rsyslog mail
<<KEEP
_echot "------------------  rsyslog client-mail conf"
file="/etc/rsyslog.d/70-default.conf"
# stop mail logs for syslog
! grep -q "mail\.\*\s*stop" "${file}" && sed -i '/^mail\.err/ amail.*              stop' "${file}"
KEEP

########################  LOGROTATE

_echot "------------------  logrotate global"
file=/etc/logrotate.conf
_eval  "sed -i '/^#dateext/ s|^#||' ${file}"

_echot "------------------  logrotate server"
file=/etc/logrotate.d/${file_logrotate_server##*/}
_eval cp -a ${file_logrotate_server} ${file}
_var_replace ${file} logrotate

########################  CLEAN

_echot "------------------  upgrade"
_evalq "upgrade"

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART} ${S_FILE_INSTALL_DONE}
