#!/bin/bash
#
# write by Aguy

<<KEEP
https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-ubuntu-14-04
KEEP

_echoT "\n==========================================  $S_RELEASE $_PART"

file_xtra_haproxy="${S_PATH_INSTALL_CONF}/rsyslog/49-haproxy.conf"
file_xtra_haconf="${S_PATH_INSTALL_CONF}/bash_completion/haconf"

####################################  FUNCTION

####################################  MAIN

_echoT "---------- file required"
_require "$file_xtra_haproxy" "$file_xtra_haconf"


_echoT "------------------ install conf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

[ -z ${_DOMAIN_NAME+x} ] && anstmp="$S_DOMAIN_NAME" && _askno "Enter a domain name without fqdn ($anstmp)" && _DOMAIN_NAME="${_ANSWER:-$anstmp}" && _confset _DOMAIN_NAME "$_DOMAIN_NAME"

[ -z ${_DOMAIN_FQDN+x} ] && anstmp="$S_DOMAIN_FQDN" && _askno "Enter a fqdn domain name ($anstmp)" && _DOMAIN_FQDN="${_ANSWER:-$anstmp}" && _confset _DOMAIN_FQDN "$_DOMAIN_FQDN"

[ -z ${_DOMAIN2_NAME+x} ] && anstmp="" && _askno "Enter a second domain name without fqdn ($anstmp)" && _DOMAIN2_NAME="${_ANSWER:-$anstmp}" && _confset _DOMAIN2_NAME "$_DOMAIN2_NAME"

[ -z ${_DOMAIN2_FQDN+x} ] && anstmp="" && _askno "Enter a second fqdn domain name ($anstmp)" && _DOMAIN2_FQDN="${_ANSWER:-$anstmp}" && _confset _DOMAIN2_FQDN "$_DOMAIN2_FQDN"

[ -z ${_ACCESS_USER+x} ] && anstmp="admin" && _askno "Enter a name for stats access ($anstmp)" && _ACCESS_USER="${_ANSWER:-$anstmp}" && _confset _ACCESS_USER "$_ACCESS_USER"

[ -z ${_ACCESS_PWD+x} ] && anstmp="$(_pwd)" && _askno "Enter a domain name ($anstmp)" && _ACCESS_PWD="${_ANSWER:-$anstmp}" && _confset _ACCESS_PWD "$_ACCESS_PWD"

[ -z ${_ACCESS_URI+x} ] && anstmp="/haproxy-stats" && _askno "Enter a domain name ($anstmp)" && _ACCESS_URI="${_ANSWER:-$anstmp}" && _confset _ACCESS_URI "$_ACCESS_URI"


# !! WAIT DEBIAN9 STRETCH BACKPORT TO INSTALL CERTBOT > 0.20 for wildcard !!
# !! & HAPROXY > 1.8 for certbot auto-update !!

#https://www.haproxy.com/blog/lets-encrypt-acme2-for-haproxy/


[ -z ${_CERTBOT+x} ] && anstmp="y" && _askno "Do you wante to install Cerbot? ($anstmp)" && _CERTBOT="${_ANSWER:-$anstmp}" && _CERTBOT="${_CERTBOT/n/}" && _confset _CERTBOT "$_CERTBOT"


####################################  HAPROXY

_echoT "----------  install"

_eval add-apt-repository -y ppa:certbot/certbot
_evalq apt update

_eval apt install -y haproxy haproxy-log-analysis hatop vim-haproxy certbot


####################################  CERTBOT

_echoT "----------  certbot request"

_askno "From an other terminal, install certbot for your ALL domains with:\ncertbot certonly --standalone\nConfirm"


_echoT "----------  certbot conf"

path_letsencrypt="/etc/letsencrypt/live"
domains="$(ls $path_letsencrypt|xargs)"
for domain in $domains; do _evalq "cat '$path_letsencrypt/${domain}/fullchain.pem' '$path_letsencrypt/${domain}/privkey.pem' > '$S_PATH_CONF_SSL/private/letsencrypt-${domain}.pem'"; done


_echoT "----------  conf keep old"

file=/etc/haproxy/haproxy.cfg
[ -f "$file" ] && [ ! -f $file.$DDATE ] && _evalq cp -a "$file" "$file.$DDATE"
paths="/etc/haproxy/conf-available /etc/haproxy/conf-enabled"
for path in $paths; do [ -f "$path" ] && [ ! -f $path.$DDATE ] && _evalq mv "$path" "$path.$DDATE"; done


_echoT "----------  conf install"

path=${S_PATH_INSTALL_CONF}/haproxy
_evalq cp -a $path/* /etc/haproxy

files="$(find /etc/haproxy -type f -name *.cfg|xargs)"

_var_replace "$files"

sed -i "s|S_PATH_CONF_SSL|$S_PATH_CONF_SSL|g" $files
sed -i "s|_DOMAIN_FQDN|$_DOMAIN_FQDN|g" $files
sed -i "s|_DOMAIN_NAME|$_DOMAIN_NAME|g" $files
sed -i "s|_DOMAIN2_FQDN|$_DOMAIN2_FQDN|g" $files
sed -i "s|_DOMAIN2_NAME|$_DOMAIN2_NAME|g" $files
sed -i "s|_ACCESS_USER|$_ACCESS_USER|g" $files
sed -i "s|_ACCESS_PWD|$_ACCESS_PWD|g" $files
sed -i "s|_ACCESS_URI|$_ACCESS_URI|g" $files


_echoT "----------  ssl copying"

path=${S_PATH_INSTALL_CONF}/ssl
[ -f "$S_PATH_CONF_SSL" ] && [ ! -f $S_PATH_CONF_SSL.$DDATE ] && _evalq mv "$S_PATH_CONF_SSL" "$S_PATH_CONF_SSL.$DDATE"
_evalq cp -a $path/* "$S_PATH_CONF_SSL"


_echoT "----------  ssl conf"

_askno "Please adjust files in folder '$S_PATH_CONF_SSL' your needed certicates & confirm"

_evalq "find '$S_PATH_CONF_SSL' -type d -exec chmod 750 -R '{}' \\;"
_evalq "find '$S_PATH_CONF_SSL' -type f -exec chmod 640 -R '{}' \\;"
_evalq "find '$S_PATH_CONF_SSL/private' -type d -exec chmod 700 -R '{}' \\;"
_evalq "find '$S_PATH_CONF_SSL/private' -type f -exec chmod 600 -R '{}' \\;"


####################################  CONF EXTEND

_echoT "----------  conf-ext create path"

# add paths
for PATHTMP in /etc/haproxy/conf-enabled /etc/haproxy/conf-available; do
    ! [ -d "$PATHTMP" ] && mkdir "$PATHTMP"
done


_echoT "----------  conf-ext patch"

# add options in /etc/init.d/haproxy
sed -i 's|^EXTRAOPTS.*|EXTRAOPTS=$\(for file in $\(find /etc/haproxy/conf-enabled -type l\|sort -n\); do CONFIGS=" $CONFIGS -f $file"; done; echo $CONFIGS\)|' /etc/init.d/haproxy


_echoT "----------  path rights"

_evalq chmod o-rwx -R /etc/haproxy


_echoT "----------  daemon restart"

_service restart haproxy


_echoT "----------  haconf bash_completion"

file="/etc/bash_completion.d/haconf"
[ -f "$file" ] && [ ! -f "$file.$DDATE" ] && _evalq cp -a "$file" "$file.$DDATE"

_evalq cp -a "$file_xtra_haconf" "$file"

_evalq chown 0:0 "$file"


####################################  RSYSLOG

_echoT "----------  rsyslog conf add"

file="/etc/rsyslog.d/49-haproxy.conf"
[ -f "$file" ] && [ ! -f "$file.$DDATE" ] && _evalq cp -a "$file" "$file.$DDATE"

_evalq cp -a "$file_xtra_haproxy" "$file"
_evalq "sed -i 's|S_PATH_LOG|$S_PATH_LOG|' $file"

_var_replace "$file"

_evalq "chown 0:0 $file && chmod -x $file"


_echoT "----------  rsyslog restart"

_service restart rsyslog


####################################  LOGROTATE

_echoT "----------  logrotate conf add"

file=/etc/logrotate.d/haproxy
STR="4"; sed -i "s|^\( *rotate\).*|\1 $STR|" "$file"

! grep -q 'haproxy-status.log' "$file" && echo "
/var/log/haproxy-status.log {
    weekly
    rotate 4
    missingok
    notifempty
    compress
    delaycompress
    postrotate
        invoke-rc.d rsyslog rotate >/dev/null 2>&1 || true
    endscript
}" >> "$file"


_echoT "----------  STATS access"

_echo "------------------------------------------"
_echo "Test this URL to access to HAPROXY statistics"
_echoi "${S_NODE_IPV4}:${S_HAPROXY_STATS_PORT}${_ACCESS_URI}"
_echo "------------------------------------------"
_askno "after it, valid to continue"


_echoT "----------  end"

_evalq _var_unset "part" "*"
_evalq "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"
