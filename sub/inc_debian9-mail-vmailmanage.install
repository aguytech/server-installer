#!/bin/bash
#
# write by Aguy

_echoT "#################### START $_PARTMAIL"


########################################  MAIN

# asks
while ! timeout 2 mysql -h$_DBHOST -u$_DBUSER -p"$_DBPWD" "$_DBNAME" -e ""; do
	_echoE "${redb}Unable to connect to database whith options: host=$_DBHOST user=$_DBUSER pass=$_DBPWD${cclear}"
	_ask "Give password for user '$_DBUSER' to connect to '$_DBHOST'"
	pwdroothost=$_ANSWER
done


_echoT "----------  DB structure"

_evalq "mysql -h'$_DBHOST' -u$_DBUSER -p'$_DBPWD' '$_DBNAME' < '$_PATH_BASE/xtra/conf/mail/vmailmanage.sql'"


_echoT "----------  postmaster@$_MYDOMAIN password"

[ -z ${_PWD_POSTMASTER+x} ] && anstmp="$(_pwd)" && _askno "Give a password for mail account 'postmaster' ($anstmp)" && _PWD_POSTMASTER=${_ANSWER:-$anstmp} && _confset _PWD_POSTMASTER "$_PWD_POSTMASTER"


_echoT "----------  DB domain $_MYDOMAIN"

_evalq "mysql -h'$_DBHOST' -u$_DBUSER -p'$_DBPWD' '$_DBNAME' -e \"insert into domains (domain) values ('$_MYDOMAIN')\""


_echoT "----------  DB postmaster@$_MYDOMAIN"

PWDHASH="$(echo "$_PWD_POSTMASTER\n$_PWD_POSTMASTER\n" |doveadm pw -s SHA512-CRYPT)"
_evalq "mysql -h$_DBHOST -u$_DBUSER -p'$_DBPWD' '$_DBNAME' -e \"insert into accounts (username, domain, password, quota, enabled, sendonly) values ('postmaster', '$_MYDOMAIN', '$PWDHASH', 2048, true, false);\""


_echoT "----------  DB alias webmaster -> postmaster @$_MYDOMAIN"

_evalq "mysql -h$_DBHOST -u$_DBUSER -p'$_DBPWD' '$_DBNAME' -e \"insert into aliases (source_username, source_domain, destination_username, destination_domain, enabled) values ('webmaster', '$_MYDOMAIN', 'postmaster', '$_MYDOMAIN', true);\""


_echoT "----------  conf security options @$_MYDOMAIN"

_echo "------------
${yellow}none${white}: Don’t use encryption
${yellow}may${white}: Encrypt, if supported by other server. Self-signed certificates are accepted, because there is no certificate verification.
${yellow}encrypt${white}: Always encrypt. Self-signed certificates are accepted, because there is no certificate verification.
${yellow}dane${white}: If there are valid TLSA-records in the DNS, encryption is mandatory. The certificate is then verified via DANE. If invalid TLSA records are found, fallback is “encrypt”. If no TLSA-records are found, fallback is “may”.
${yellow}dane-only${white}: Encrypted connections only. Certificate verification via DANE. No fallback to weaker methods.
${yellow}verify${white}: Encrypted connections only. Certificate must be issued by an accepted CA. Hostname given in MX record must match hostname in certificate.
${yellow}secure${white}: Encrypted connections only. Certificate must be issued by an accepted CA. Hostname in certificate must by domain or subdomain of e-mail domain. No DNS used.
------------
"

PS3="Select policy of security: "
options="none may encrypt dane dane-only verify secure"
select opt in ${options}; do
if [ "${options/$opt/}" != "$options" ]; then
	_evalq "mysql -h$_DBHOST -u$_DBUSER -p'$_DBPWD' '$_DBNAME' -e \"insert into tlspolicies (domain, policy) values ('$_MYDOMAIN', '$opt');\""
	break
else
	echo -e "${red}Veuillez saisir une option valide${cclear}"
fi
done


########################################  END

_echoT "------------------ write $_PARTMAIL"
_partadd "$_PARTMAIL" "$_FILEMAILDONE"

_echoT "#################### END $_PARTMAIL"
