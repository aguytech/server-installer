#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${S_RELEASE}-${_PART}"

grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo "# ${_PART}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

file_env=${S_PATH_SCRIPT_CONF}/env
file_bash_aliases=${S_PATH_SCRIPT_CONF}/.bash_aliases
file_bash_functions=${S_PATH_SCRIPT_CONF}/.bash_functions
path_install_bash_completion=${S_PATH_INSTALL_CONF}/bash-completion

file_rsyslog_cron=${S_PATH_INSTALL_CONF}/rsyslog/cron.conf
file_rsyslog_client_auth=${S_PATH_INSTALL_CONF}/rsyslog/client-auth.conf
file_logrotate_server=${S_PATH_INSTALL_CONF}/logrotate/server

file_conf_vim=${S_PATH_SCRIPT_CONF}/.vimrc
file_conf_tmux=${S_PATH_SCRIPT_CONF}/.tmux-server.conf
file_path_tmux=${S_PATH_INSTALL_CONF}/tmux/.tmux.tar.gz

_echot "------------------  required files"
_require ${file_env} ${file_bash_aliases} ${file_bash_functions}
_require ${file_rsyslog_cron} ${file_rsyslog_client_auth} ${file_logrotate_server}
_require ${file_conf_vim} ${file_conf_tmux} ${file_conf_tmux}
_requirep ${path_install_bash_completion}

########################  DATA

_echot "-------------------  data"

[ -z "${_INSTALL_AUTO}" ] && { anstmp=; _askno "Give a passwd for root or leave blank to let unset - (${anstmp})"; root_pwd="${_ANSWER:-$anstmp}"; }

_echot "------------------  data storage"

[ -z ${_DEV_DRIVER+x} ] && { anstmp=zfs; _menu "Select a driver for storage (${anstmp})" zfs btrfs; _DEV_DRIVER=${_ANSWER}; }
_confset _DEV_DRIVER "${_DEV_DRIVER}"

_echoa "State of available disk devices:"
#lsblk -ro NAME|grep -v [0-9]$|grep -v NAME # shortly list of devices
lsblk -o NAME,PATH,FSTYPE,FSUSED,SIZE,STATE,TYPE,MOUNTPOINT|grep -v ^loop

if [ "${_DEV_DRIVER}" = zfs ]; then
	_echot "------------------  data zfs"

	[ -z ${_DEV_ROOT+x} ] && { anstmp="/dev/sdb /dev/sdc"; _askno "Give devices for pool 'root' (${anstmp})"; _DEV_ROOT=${_ANSWER:-${anstmp}}; }
	_confset _DEV_ROOT "${_DEV_ROOT}"

	[ -z ${_ZFS_ROOT+x} ] && { anstmp=root; _askno "Give the name for pool 'root' using ${_DEV_ROOT} (${anstmp})"; _ZFS_ROOT=${_ANSWER:-${anstmp}}; }
	_confset _ZFS_ROOT "${_ZFS_ROOT}"

	[ -z ${_ZFS_ROOT_TYPE+x} ] && { anstmp=; _askno "Give the type of vdev (mirror/raidz/...) for ${_ZFS_ROOT} (${anstmp})"; _ZFS_ROOT_TYPE=${_ANSWER:-${anstmp}}; }
	_confset _ZFS_ROOT_TYPE "${_ZFS_ROOT_TYPE}"
fi

[ -z ${_DEV_EXT+x} ] && { anstmp=; _askno "Give devices for pool 'ext' (${anstmp})"; _DEV_EXT=${_ANSWER:-${anstmp}}; }
_confset _DEV_EXT "${_DEV_EXT}"

if [ "${_DEV_EXT}" ] && [ "${_DEV_DRIVER}" = zfs ]; then
	[ -z ${_ZFS_EXT+x} ] && { anstmp=ext; _askno "Give the name for pool 'ext' using ${_DEV_EXT} (${anstmp})"; _ZFS_EXT=${_ANSWER:-${anstmp}}; }
	_confset _ZFS_EXT "${_ZFS_EXT}"
fi

_echot "------------------  data sysctl"
# host
[ -z ${_SOMAXCONN+x} ] && { anstmp="4096"; _askno "Set $(sysctl net.core.somaxconn) - (${anstmp})"; _SOMAXCONN="${_ANSWER:-$anstmp}"; }
_confset _SOMAXCONN "${_SOMAXCONN}"

[ -z ${_MAX_BACKLOG+x} ] && { anstmp="1000"; _askno "Set $(sysctl net.core.netdev_max_backlog) - (${anstmp})"; _MAX_BACKLOG="${_ANSWER:-$anstmp}"; }
_confset _MAX_BACKLOG "${_MAX_BACKLOG}"

# host & vm
[ -z ${_MAX_SYN_BACKLOG+x} ] && { anstmp="1024"; _askno "Set $(sysctl net.ipv4.tcp_max_syn_backlog) - (${anstmp})"; _MAX_SYN_BACKLOG="${_ANSWER:-$anstmp}"; }
_confset _MAX_SYN_BACKLOG "${_MAX_SYN_BACKLOG}"

[ -z ${_MAX_TW_BUCKETS+x} ] && { anstmp="65536"; _askno "Set $(sysctl net.ipv4.tcp_max_tw_buckets) - (${anstmp})"; _MAX_TW_BUCKETS="${_ANSWER:-$anstmp}"; }
_confset _MAX_TW_BUCKETS "${_MAX_TW_BUCKETS}"

[ -z ${_FIN_TIMEOUT+x} ] && { anstmp="60"; _askno "Set $(sysctl net.ipv4.tcp_fin_timeout) - (${anstmp})"; _FIN_TIMEOUT="${_ANSWER:-$anstmp}"; }
_confset _FIN_TIMEOUT "${_FIN_TIMEOUT}"

[ -z ${_KEEPALIVE_TIME+x} ] && { anstmp="7200"; _askno "Set $(sysctl net.ipv4.tcp_keepalive_time) - (${anstmp})"; _KEEPALIVE_TIME="${_ANSWER:-$anstmp}"; }
_confset _KEEPALIVE_TIME "${_KEEPALIVE_TIME}"

[ -z ${_KEEPALIVE_INTVL+x} ] && { anstmp="75"; _askno "Set $(sysctl net.ipv4.tcp_keepalive_intvl) - (${anstmp})"; _KEEPALIVE_INTVL="${_ANSWER:-$anstmp}"; }
_confset _KEEPALIVE_INTVL "${_KEEPALIVE_INTVL}"

[ -z ${_KEEPALIVE_PROBES+x} ] && { anstmp="9"; _askno "Set $(sysctl net.ipv4.tcp_keepalive_probes) - (${anstmp})"; _KEEPALIVE_PROBES="${_ANSWER:-$anstmp}"; }
_confset _KEEPALIVE_PROBES "${_KEEPALIVE_PROBES}"

# sysctl net.core.somaxconn net.core.netdev_max_backlog
# sysctl net.ipv4.tcp_max_syn_backlog net.ipv4.tcp_max_tw_buckets
# sysctl net.ipv4.tcp_fin_timeout net.ipv4.tcp_keepalive_time net.ipv4.tcp_keepalive_intvl net.ipv4.tcp_keepalive_probes
_SYS_FILE=/etc/sysctl.d/20-server.conf; _confset _SYS_FILE "${_SYS_FILE}"

########################  CONFIGURATION

# load configuration file
. ${S_FILE_INSTALL_CONF}

########################  MAIN

_echot "------------------  sysctl conf"
_keepcpts ${_SYS_FILE}
echo "# server configuration
net.ipv4.ip_forward = 1
net.core.somaxconn = ${_SOMAXCONN}
net.core.netdev_max_backlog = ${_MAX_BACKLOG}
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout = ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time = ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl = ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}" > ${_SYS_FILE}

_echot "------------------  sysctl restart"
_service restart systemd-sysctl

_echot "------------------  timezone"
[ -e /etc/localtime ] && rm /etc/localtime
ln -s /usr/share/zoneinfo/posix/Europe/Paris /etc/localtime

_echot "------------------  grub"
file=/etc/default/grub
# grub timeout
sed -i "/^GRUB_TIMEOUT=/ s|=.*|=0|" "${file}"

update-grub

_echot "------------------ bs link"
! [ -e /bs ] && sudo ln -s /usr/local/bs /bs

if [ "${root_pwd}" ]; then
	_echot "------------------  root password change"
	passwd root <<<"${root_pwd}
${root_pwd}
"
	strpass="root @ $(hostname) - ${root_pwd}"
fi

_echot "------------------  .bash_aliases"
file=~/.bash_aliases
[ -e ${file} ] && _evalr rm ${file}
_eval ln -s ${file_bash_aliases} ${file}

_echot "------------------  .bash_functions"
file=~/.bash_functions
[ -e ${file} ] && _eval rm ${file}
_eval ln -s ${file_bash_functions} ${file}

_echot "------------------  bash-completion"
_evalr "cp -a ${S_PATH_INSTALL_CONF}/bash-completion/* /usr/share/bash-completion/completions/"

_echot "------------------  .bashrc"

file=~/.bashrc
_keepcpts ${file}
_eval "sed -i 's|^\(HISTSIZE\)=.*$|\1=4000|' ${file}"
_eval "sed -i 's|^\(HISTFILESIZE\)=.*$|\1=20000|' ${file}"
_eval "sed -i '/^#force_color_prompt/ s|^#||' ${file}"

case "${S_SERVER_TYPE}" in
	home)	color='\\[\\033[01;34m\\]' ;;
	ovh)	color='\\[\\033[01;32m\\]' ;;
	docker)	color='\\[\\033[01;33m\\]' ;;
	kvm)	color='"\\[\\033[01;38;5;172m\\]' ;;
	lxd)	color='\\[\\033[01;33m\\]' ;;
	*)		color='\\[\\033[01;34m\\]'; color_root=${color} ;;
esac
color_root="\033[01;31m"
# PS1
ps1='${debian_chroot:+($debian_chroot)}'${color}'\\h\\[\\033[00m\\]:\\W\\[\\033[01;31m\\]\\$\\[\\033[00m\\]'
# no root
sed -i "/if \[ \"\$color_prompt/ {n;s|=.*|='$ps1'|}" ${file}

# env
grep -q "${file_env}" ${file} || echo "
# source global variables
[ -f ${file_env} ] && . ${file_env}

# functions
[ -f ~/.bash_functions ] && . ~/.bash_functions
" >> ${file}
# aliases
grep -q '. ~/.bash_aliases' ${file} || echo "[ -f ~/.bash_aliases ] && . ~/.bash_aliases
"  >> ${file}

_source ${file}

########################  CLUSTER

_echot "------------------  hosts S_CLUSTER"

file=/etc/hosts
_keepcpts "${file}"

! sudo grep -q "# ${S_DOM_NAME} cluster" ${file} && sudo sh -c "echo '\n# ${S_DOM_NAME} cluster' >> ${file}"
for host in ${servers_list}; do
	eval ${S_CLUSTER[${host}]}
	[ "${s_ip}" ] && sudo sed -i "/${s_ip}/d" ${file}
	[ "${s_ip}" ] && sudo sh -c "echo '${s_ip}\t${host}\t${s_name}' >> ${file}"
done
_evalr "sed -i '/^${_IPTHIS}/ s|^|#|' ${file}"

if ! grep -q '^# services' ${file}; then
	_echot "------------------  hosts S_SERVICE_BITS"
	_keepcpts $file
	echo -e "\n# services" >> ${file}
	for str in ${!S_SERVICE_BITS[*]}; do
		echo -e "#${_CIDR_VM%.*}.${S_SERVICE_BITS[$str]}\t${S_SERVICE[$str]}" >> ${file}
	done
fi

########################  COMMON

_echot "------------------  mariadb repos"
#apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
#apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xF1656F24C74CD1D8
apt-key adv --fetch-keys "https://mariadb.org/mariadb_release_signing_key.asc"
file=/etc/apt/sources.list.d/mariadb.list
echo "# MariaDB 10.6
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.6/ubuntu ${S_RELEASE_NAME} main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/10.6/ubuntu ${S_RELEASE_NAME} main" > "${file}"

_echot "------------------  pgsql repos"
file=/etc/apt/sources.list.d/pgdg.list
echo "#https://www.postgresql.org/download/linux/ubuntu/
deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "${file}"
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

########################  INSTALL

_echot "------------------  upgrade"
upgrade

_echot "------------------  install base"
_evalr apt install -y bsdmainutils cron curl less logrotate

str=" ovh home "
if [ "${str/ ${S_SERVER_TYPE} /}" != "${str}" ]; then
	_echot "------------------  install tools"
	_evalr apt-get install -y man openssh-server apt-utils net-tools rsync bash-completion htop iotop tree gnupg vim lnav multitail git
	# acpid apt-file apt-utils dstat hdparm iputils-tracepath jwhois mlocate mtop p7zip p7zip-plugins netcat lsb-release pciutils rcconf sysstat wget telnet dirmngr mariadb-client postgresql-client
fi

if type vim >/dev/null 2>&1; then
    _echot "------------------  links edit"
    for file in /etc/alternatives/editor; do
        [ -e '${file}' ] && _evalr rm ${file}
        _evalr ln -sv /usr/bin/vim.basic ${file}
    done
fi

########################  STORAGE

echo S_SERVER_TYPE=$S_SERVER_TYPE

str="ovh home"
if [[ " ${str} " = *" ${S_SERVER_TYPE} "* ]]; then

echo _DEV_DRIVER=$_DEV_DRIVER

	if [ "${_DEV_DRIVER}" = zfs ]; then

		path_zfs=/zfs
		[ -f "${path_zfs}" ] || mkdir -p ${path_zfs}

		_echot "------------------  zfs install"
		_evalr apt install -y zfsutils-linux

		for dev in ${_DEV_ROOT}; do
			_echot "------------------  zfs clean ${dev}"
			for i in $(parted -s ${dev} print 2>/dev/null|awk '/^ / {print $1}'); do
				_evalr parted -s ${dev} rm "${i}"
			done
		done

		path=${path_zfs}/${_ZFS_ROOT}
		_echot "------------------  zfs zpool ${path}"
		_evalr zpool create ${_ZFS_ROOT} ${_DEV_ROOT} -m ${path}

		if [ "${_DEV_EXT}" ];then
			path=${path_zfs}/${_ZFS_EXT}
			_echot "------------------  zfs zpool ${path}"
			_evalr zpool create ${_ZFS_EXT} ${_DEV_EXT} -m ${path}
		fi

		path=${S_PATH_SAVE}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		[ "${_DEV_EXT}" ] && zpath=${_ZFS_EXT}${S_PATH_SAVE}|| zpath=${_ZFS_ROOT}${S_PATH_SAVE}
		_evalr zfs create -o mountpoint=${path} -o compression=lz4 ${zpath}

		path=${S_HOST_PATH}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_evalr zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_HOST_PATH}

		path=${S_HOST_PATH_SP}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_evalr zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_HOST_PATH_SP}

		path=${S_HOST_PATH_SHARE}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_evalr zfs create -o mountpoint=${path} -o compression=lz4 -o  acltype=posixacl ${_ZFS_ROOT}${S_HOST_PATH_SHARE}

		path=${S_HOST_PATH_SAVE}
		_echot "------------------  zfs ${path}"
		[ -d ${path} ] && rm -fR ${path}
		_evalr zfs create -o mountpoint=${path} -o compression=lz4 ${_ZFS_ROOT}${S_HOST_PATH_SAVE}

		_echot "------------------  zfs zpool list"
		zpool list -v

		_echot "------------------  zfs list"
		zfs list

	elif [ "${_DEV_DRIVER}" = btrfs ]; then

		_echot "------------------  btrfs storage"
		path=${S_HOST_PATH}
		_echoA "Create a btrfs subvolume: /lxd-${S_RELEASE_NAME} and mount it in ${path}"
		_askno "Continue after that:"
		[ -d ${path} ] || _exite "Unable to find path: ${path}"

		btrfs subvolume list .

		_echot "------------------  btrfs paths"
		paths="${S_HOST_PATH} ${S_HOST_PATH_SP} ${S_HOST_PATH_SHARE} ${S_HOST_PATH_SAVE} ${S_HOST_PATH_LOG} "
		for path in ${paths}; do
			[ -d ${path} ] || _evalr mkdir /vm/${path}
		done

	else
		_exite "This part have to be implemented"
	fi

fi

########################  CONF

str=" ovh home "
if [ "${str/ ${S_SERVER_TYPE} /}" != "${str}" ]; then

	_echot "------------------  conf tmux"
	file=${HOME}/.tmux.conf
	_keepmvts ${file}
	_eval ln -s ${file_conf_tmux} ${file}

	_eval tar xzf ${file_path_tmux} -C ${HOME}/

	# colorscheme
	_evalr cp ${S_PATH_INSTALL_CONF}/vim/*.vim /usr/share/vim/vim*/colors/

	_echot "------------------  conf vim"
	file="${HOME}/.vimrc"
	_keepmvts "${file}"
	_evalr ln -s "${file_conf_vim}" "${file}"

	# colorscheme
	_evalr cp ${S_PATH_INSTALL_CONF}/vim/*.vim /usr/share/vim/vim*/colors/
fi

_echot "------------------  conf nano"

for str in conf install; do
	cp -a /usr/share/nano/sh.nanorc /usr/share/nano/${str}.nanorc
	sed -i 's|^\(syntax \).*|\1"'${str}'" "\.'${str}'$"|' /usr/share/nano/${str}.nanorc
done

file=/etc/nanorc
_keepcpts "${file}"

_evalr "sed -i 's|^.*\(set tabsize\).*|\1 4|' ${file}"
_evalr "sed -i 's|^\(set cut.*\)$|# \1|' ${file}"
_evalr "sed -i 's|^\(set linenumbers.*\)$|# \1|' ${file}"
_evalr "sed -i '/^# *include/ s/^# //' ${file}"

# various
opts="constantshow historylog matchbrackets multibuffer nohelp softwrap"
# color
opts+="errorcolor functioncolor keycolor numbercolor selectedcolor statuscolor stripecolor titlecolor"
# uncomment
for opt in $opts; do
	_evalr "sed -i 's|^.*\(set ${opt}.*\)$|\1|' ${file}"
done

########################  NTP

str=" ovh "
if [ "${str/ "${S_SERVER_TYPE}" /}" != "${str}" ]; then

	_echot "------------------  install ntp"
	_evalr "apt-get install -y ntp"

	_echot "------------------  conf ntp"
	file=/etc/ntp.conf
	_keepcpts "${file}"

	str='.fr.pool.ntp.org'; sed -i "s/^\(server .\).*/\1${str}/" "${file}"
	_service start ntp
fi

########################  CRON

_echot "------------------  cron conf"

file=/etc/crontab
_keepcpts ${file}
str="MAILTO=${S_EMAIL_TECH}"
grep -q '^MAILTO' "${file}" || _evalr "sed -i '/^PATH=.*/ a ${str}' ${file}"

########################  RSYSLOG

_echot "------------------  rsyslog conf"

file="/etc/rsyslog.conf"
_keepcpts "${file}"

# udp
if [ "${S_RSYSLOG_PTC}" = udp ]; then
	_evalr "sed -i 's|^#\?\(module(load=\"imudp.*\)$|\1|' ${file}"
	_evalr "sed -i 's|^#\?\(input(type=\"imudp\"\).*$|\1 port=\"${S_RSYSLOG_PORT}\")|' ${file}"
# tcp
elif [ "${S_RSYSLOG_PTC}" = tcp ]; then
	_evalr "sed -i 's|^#\?\(module(load=\"imtcp.*\)$|\1|' ${file}"
	_evalr "sed -i 's|^#\?\(input(type=\"imtcp\"\).*$|\1 port=\"${S_RSYSLOG_PORT}\")|' ${file}"
fi

_echot "------------------  rsyslog reload"
_service restart rsyslog

_echot "------------------  rsyslog conf"
sed -i '/^auth.*/ s|^|#|' /etc/rsyslog.d/50-default.conf
sed -i '/^cron.*/ s|^|#|' /etc/rsyslog.d/50-default.conf

_echot "------------------  rsyslog client-auth"
file=/etc/rsyslog.d/70-${file_rsyslog_client_auth##*/}
_evalq cp -a ${file_rsyslog_client_auth} ${file}
_var_replace ${file} rsyslog

_echot "------------------  rsyslog cron"
file=/etc/rsyslog.d/71-${file_rsyslog_cron##*/}
_evalq cp -a ${file_rsyslog_cron} ${file}
_var_replace ${file} rsyslog

########################  LOGROTATE

_echot "------------------  logrotate global"
file=/etc/logrotate.conf
_evalr  "sed -i '/^#dateext/ s|^#||' ${file}"

_echot "------------------  logrotate server"
file=/etc/logrotate.d/${file_logrotate_server##*/}
_evalr cp -a ${file_logrotate_server} ${file}
_var_replace ${file} logrotate
_evalr chmod g-w /etc/logrotate.d/*
_service restart logrotate

########################  CLEAN

_echot "------------------  upgrade"
_evalq "upgrade"

########################  SHOW

if [ "${strpass}" ]; then
	_echot "------------------  show passwords"
	_echoA "Keep this passwords:"
	_echoa"${strpass}"
fi

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
