#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${S_RELEASE} ${_PART}"

########################  INSTALL

_echoT "----------  install"

_eval apt install -y jq acl snapd # criu lxd-tools


_echoT "----------  snap"

if snap list|grep -q '^lxd '; then
	_eval snap remove lxd
	_eval snap refresh
	if snap list|grep -q '^core18 '; then
		_eval snap install core20
		_eval snap remove core18
	fi
fi
_eval snap refresh
_eval snap install core
_eval snap install lxd


########################  RIGHTS

path="/var/snap/lxd/common/lxd"
_echoT "----------  link ${path} to /vm"

link="/lxd"
[ -h ${link} ] || _eval ln -s ${path} ${link}

path="${S_HOST_PATH_SHARE}"
_echoT "----------  rights ${path}"

setfacl -R -m u:100000:rwx "${path}"
setfacl -R -m d:u:100000:rwx "${path}"


########################  INIT

_echoT "----------  lxd init"

_echoI "Use this settings :
Create a new ZFS pool: no
Name of the existing ZFS pool or dataset: root/vm/sp/default"

_eval lxd init


########################  STORAGE LXD

name="stock"
_echoT "----------  storage ${name}"

if ! [ "`lxc storage list -f json|jq -r '.[] | select(.name == "'${name}'").name'`" ]; then
	_eval lxc storage create ${name} zfs source=root/vm/sp/${name}
fi

########################  NETWORK

_echoT "----------  network 'default'"

# get : s_inet s_cidr s_base
eval ${S_HOST_VM_ETH[default]}

_echoT "----------  network ${s_inet}"

if ! [ "`lxc network list -f json|jq -r '.[] | select(.name == "'${s_inet}'").name'`" ]; then
	_eval lxc network create ${s_inet}
fi
_eval lxc network set ${s_inet} ipv4.address=${s_cidr} ipv4.dhcp.ranges=${s_cidr%.*}.${_LXD_DHCP_MIN}-${s_cidr%.*}.${_LXD_DHCP_MAX} ipv4.nat=true dns.mode=managed dns.domain=lxd dns.mode=managed


_echoT "----------  network 'stock'"

# get : s_inet s_cidr s_base
eval ${S_HOST_VM_ETH[stock]}

_echoT "----------  network ${s_inet}"

if ! [ "`lxc network list -f json|jq -r '.[] | select(.name == "'${s_inet}'").name'`" ]; then
	_eval lxc network create "${s_inet}"
fi
_eval lxc network set ${s_inet} ipv4.address=${s_cidr} ipv4.dhcp.ranges=${s_cidr%.*}.${_LXD_DHCP_MIN}-${s_cidr%.*}.${_LXD_DHCP_MAX} ipv4.nat=true dns.mode=managed dns.domain=lxd1 dns.mode=managed


########################  PROFILE


profile="stock"
_echoT "----------  profiles ${profile}"

if ! [ "`lxc profile list -f json | jq -r '.[] | select(.name == "'${profile}'").name'`" ]; then
	_eval lxc profile create ${profile}
	_eval lxc profile device add ${profile} root disk pool=stock path=/
	_eval lxc network attach-profile lxdbr1 ${profile} eth0
fi

profile="global"
_echoT "----------  profiles ${profile}"

path="${S_HOST_PATH_SHARE}/global"
path_ct="${S_VM_PATH_SHARE}/global"
! [ -d "${path}" ] && _eval mkdir -p "${path}"

if ! [ "`lxc profile list -f json | jq -r '.[] | select(.name == "'${profile}'").name'`" ]; then
	_eval lxc profile create ${profile}
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
fi

profile="www"
_echoT "----------  profiles ${profile}"

path="${S_HOST_PATH_SHARE}/www/global"
path_ct="${S_VM_PATH_SHARE}/www/global"
! [ -d "${path}" ] && _eval mkdir -p "${path}"

if ! [ "`lxc profile list -f json | jq -r '.[] | select(.name == "'${profile}'").name'`" ]; then
	_eval lxc profile create ${profile}
	_eval lxc profile device add ${profile} ${profile} disk source="${path}" path="${path_ct}"
fi

profile="sgbd"
_echoT "----------  profiles ${profile}"

path="${S_HOST_PATH_SHARE}/sgbd/global"
path_ct="${S_VM_PATH_SHARE}/sgbd"
! [ -d "${path}" ] && _eval mkdir -p "${path}"

if ! [ "`lxc profile list -f json | jq -r '.[] | select(.name == "'${profile}'").name'`" ]; then
	_eval lxc profile create ${profile}
	_eval lxc profile device add ${profile} ${profile} disk source="${path}" path="${path_ct}"
fi


_echoT "----------  lxc container"

_echoI "To install and configure container use:"
_echoI "$(ls -1 ${S_PATH_INSTALL/-desktop/}/lxd-*)"


########################  DNS

if [ "${S_SERVER_TYPE}" = ovh ]; then

	# get : s_inet s_cidr s_base
	eval ${S_HOST_VM_ETH[default]}

	_echoT "----------  dns ovh"

	file=/etc/resolv.conf
	grep -q ${s_inet} ${file} || sed -i "1i nameserver 127.0.0.53\noptions edns0 trust-ad\nsearch lxd" ${file}

	file=/etc/systemd/network/${s_inet}.network
	echo -e "[Match]\nName=${s_inet}\n\n[Network]\nDNS=${s_cidr%/*}\nDomains=~lxd" > ${file}

elif [ "${S_SERVER_TYPE}" = home ]; then

	_echoT "----------  dns home"

	_echoI "----------  This part have to be implemented"

fi

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART} ${S_FILE_INSTALL_DONE}

<<KEEP
https://blog.simos.info/how-to-use-lxd-container-hostnames-on-the-host-in-ubuntu-18-04/

_echoT "----------  systemd-resolved for ${s_inet}"

# for selected interface
# dynamically
#resolvectl --interface lxdbr0 dnssec set no
#resolvectl dns lxdbr0 "$(lxc network show lxdbr0 | sed -n 's|.*ipv4\.address: \(.*\)/.*|\1|p')"
#resolvectl domain lxdbr0 '~lxd'

# persistence
path=/etc/systemd/resolved.conf.d/
[ -d "${path}" ] || _eval mkdir -p "${path}"
file=${path}/${s_inet}.conf
echo "# Configuration file for lxdbr0
[Resolve]
#DNS=${s_cidr%/*}
#Domains=${s_inet}
#DNSSEC=no" > ${file}

# enable systemd-resolved.service
[ "$(systemctl is-enabled systemd-resolved.service)" ] && _eval systemctl enable systemd-resolved.service
if [ "$(systemctl status systemd-resolved.service)" = inactive ]; then
	_eval systemctl start systemd-resolved.service
else
	_eval systemctl restart systemd-resolved.service
fi
KEEP
