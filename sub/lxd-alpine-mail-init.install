#!/bin/bash
#
# write by Aguy

_echoT "\n======================  ${_INSTALL}-${_PARTMAIL}"

grep -q "^# ${_PARTMAIL#++}$" ${_FILE_INSTALL_CONF} || echo  "# ${_PARTMAIL}" >> ${_FILE_INSTALL_CONF}

file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-mail.conf
file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-mail.conf
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/client-mail
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-mail
_echot "------------------ required files"
_require ${file_rsyslog_client} ${file_rsyslog_host} ${file_logrotate_client} ${file_logrotate_host}


########################  PROFILE

profile=${_SSL_PROFILE_MAIL}
if ! lxc profile list -f csv|grep -q "^${profile},"; then
	_echot "------------------ profile create ${profile}"
	_eval lxc profile create ${profile}

	path=${S_HOST_PATH_SHARE}/ssl/mail
	path_ct=${_PATH_SSL}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_evalr chown ${_LXD_UID}:${_LXD_UID} -R ${S_HOST_PATH_SHARE}/ssl
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
else
	_echot "------------------ profile exists ${profile}"
fi

profile=${_CT_NAME}
if ! lxc profile list -f csv|grep -q "^${profile},"; then
	_echot "------------------ profile create ${profile}"
	_eval lxc profile create ${profile}

	path=${S_HOST_PATH_SHARE}/mail
	path_ct=${_PATH_MAIL}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_evalr chown ${_LXD_UID}:${_LXD_UID} -R ${S_HOST_PATH_SHARE}/mail
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
else
	_echot "------------------ profile exists ${profile}"
fi

if ! lxc list -f json ${S_SERVICE[proxy]}|jq -r '.[].profiles[]' | grep -q ^${_SSL_PROFILE_MAIL}$; then
	_echot "------------------ profile add ${_SSL_PROFILE_MAIL} to ${S_SERVICE[proxy]}"
	_eval lxc profile add ${S_SERVICE[proxy]} ${_SSL_PROFILE_MAIL}
fi

########################  INIT

_echot "------------------ init"
if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_echot "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
fi
_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global -p ssl-mail -p ${profile}

_echot "------------------  network fixed ip"
if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	#_eval lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
	eval ${S_HOST_VM_ETH[default]}
	_eval lxc config device override ${_CT_NAME} eth0 ipv4.address=${s_base}.${S_SERVICE_BITS[mail]}
fi

_echot "------------------ ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}

########################  METADATA

_echot "------------------ metadata"
_lxc_meta_set ${_CT_NAME} profiles default global ssl-mail ${profile}

########################  UPDATE

_lxc_exec ${_CT_NAME} apk update

########################  PATH

_echot "------------------ create paths"
for path in ${_PATH_MAIL} ${_PATH_LMAIL}${_PATH_SSL}; do
	_lxc_exec ${_CT_NAME} "[ -d '${path}' ] || mkdir -p ${path}; chown ${_VMAIL_USER}:${_VMAIL_USER} -R ${path}"
done

_echot "------------------  rights path ${_PATH_SSL} ${S_PATH_CONF_SSL}"
_lxc_exec ${_CT_NAME} chown -R ${_VMAIL_USER}:${_VMAIL_USER} ${_PATH_SSL} ${S_PATH_CONF_SSL}
_lxc_exec ${_CT_NAME} chmod 640 -R ${_PATH_SSL} ${S_PATH_CONF_SSL}

_echot "------------------  rights path ${_PATH_MAIL}"
_lxc_exec_e ${_CT_NAME} chown ${_VMAIL_USER}:postdrop -R ${_PATH_LMAIL}
_lxc_exec_e ${_CT_NAME} "find ${_PATH_LMAIL} -type d -exec chmod g+rwx -R {} \;"
_lxc_exec_e ${_CT_NAME} "find ${_PATH_LMAIL} -type f -exec chmod g+rw -R {} \;"

########################  _VMAIL_USER

# group
file=/etc/group
cmd="addgroup -S ${_VMAIL_USER}"
_lxc_exec ${_CT_NAME} "grep -q ^${_VMAIL_USER} ${file} || ${cmd}"
_VMAIL_GID=`_lxc_exec ${_CT_NAME} grep ^${_VMAIL_USER} ${file}|cut -d: -f3`
# user
file=/etc/passwd
cmd="adduser -S -G ${_VMAIL_USER} -D -h ${_PATH_VMAIL} -s/sbin/nologin -g ${_VMAIL_USER} ${_VMAIL_USER}"
_lxc_exec ${_CT_NAME} "grep -q ^${_VMAIL_USER} ${file} || ${cmd}"
_VMAIL_UID=`_lxc_exec ${_CT_NAME} grep ^${_VMAIL_USER} ${file}|cut -d: -f3`
# path
str=`_lxc_exec ${_CT_NAME} grep ^${_VMAIL_USER} ${file}|cut -d: -f6`
_lxc_exec_e ${_CT_NAME} "sed -i '/^${_VMAIL_USER}/ s|${str}|${_PATH_VMAIL}|' ${file}"
# gid
str=`_lxc_exec ${_CT_NAME} grep ^${_VMAIL_USER} ${file}|cut -d: -f4`
_lxc_exec_e ${_CT_NAME} "sed -i '/^${_VMAIL_USER}/ s|${str}|${_VMAIL_GID}|' ${file}"
# group
_lxc_exec_e ${_CT_NAME} "sed -i '/^${_VMAIL_USER}/ s|^\(.*:.*:.*:\).*$|\1${_VMAIL_UID}|' /etc/group"

_confset _VMAIL_UID "${_VMAIL_UID}" ${_FILE_INSTALL_CONF}
_confset _VMAIL_GID "${_VMAIL_GID}" ${_FILE_INSTALL_CONF}

########################  IPTABLES

_echot "------------------  iptables"
sed -i '/^_NAT_MAIL=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
sed -i '/^_NAT_RSPAMD=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
_service restart ${_IPT_SERVICE}


<<KEEP
########################  UNBOUND

_echot "------------------  Unbound install"
_lxc_exec ${_CT_NAME} "apk add unbound"

_echot "------------------  Unbound configuration"
file=/etc/unbound/unbound.conf
_lxc_exec ${_CT_NAME}  "unbound-anchor"
# global
cmds=; while read str val; do
cmds+="sed -i 's|^\(\s\)*#\? *\(${str}:\).*|\1\2 ${val}|' ${file}
"; done <<< "do-ip4  yes
do-ip6  yes
do-udp  yes
do-tcp  yes
do-daemonize  yes
hide-identity  yes
hide-version  yes
use-syslog  yes
control-enable  yes"
_lxc_exec ${_CT_NAME} "${cmds}"


_echot "------------------  Unbound test"
_lxc_exec ${_CT_NAME} unbound-checkconf || _exite "Configuration error(s) in file: ${file}"
_lxc_exec ${_CT_NAME}  dig @127.0.0.1 ${_DOMAIN_FQDN} +short +dnssec
_askno "${yellow}Please verify the above outgoing & valid${cclear}"

_echot "------------------  Unbound enable"
_lxc_exec ${_CT_NAME}  "rc-update show default|grep -q unbound || rc-update add unbound"
_lxc_exec ${_CT_NAME} rc-service -s unbound restart
_lxc_exec ${_CT_NAME} rc-service -S unbound start

########################  RESOLV

_echot "------------------  resolvconf update"
_lxc_exec ${_CT_NAME} "echo 'nameserver 127.0.0.1' >> /etc/resolv.conf"

_evalq apt install -y resolvconf
#_evalq "echo "nameserver 127.0.0.1" >> /etc/resolvconf/resolv.conf.d/head"
_eval "nslookup ${_DOMAIN_FQDN} | grep Server"
_askno "${yellow}Please verify the above outgoing (127.0.0.1) & valid${cclear}"


#_echot "------------------  resolvconf conf"
#[ ! "$(grep 'mail\.' /etc/hosts)" ] && echo "127.0.1.1   mail.${_DOMAIN_FQDN}  mail" >> /etc/hosts
KEEP


########################  RSYSLOG

# host
_echot "------------------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"

_echot "------------------  ${S_SERVICE[log]} host"
file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push -q ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echot "------------------  rsyslog restart ${S_SERVICE[log]}"
_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"


# client
_echot "------------------  ${_CT_NAME} client path"
path=${S_PATH_LOG}
_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"

_echot "------------------  ${_CT_NAME} client"
file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push -q ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog

_echot "------------------  rsyslog restart ${_CT_NAME}"
_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"


########################  LOGROTATE

_echot "------------------  ${S_SERVICE[log]} logrotate"
file=/etc/logrotate.d/${file_logrotate_host##*/}
_eval lxc file push -q ${file_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate

_echot "------------------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} "rc-service crond restart"


_echot "------------------  ${_CT_NAME} logrotate"
file=/etc/logrotate.d/${file_logrotate_client##*/}
_eval lxc file push -q ${file_logrotate_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} logrotate

_echot "------------------  ${_CT_NAME} crond restart"
_lxc_exec ${_CT_NAME} "rc-service crond restart"


########################  MANUAL CONF

_echot "------------------  DNS conf"
_echoI "IN MX 1   ${_DOMAIN_FQDN}.
IN TXT 'v=spf1 a mx ~all'
imap				IN CNAME  ${_DOMAIN_FQDN}.
mail				IN CNAME  ${_DOMAIN_FQDN}.
smtp				IN CNAME  ${_DOMAIN_FQDN}.

${_DOMAIN_FQDN}  3600 IN TXT v=spf1 a:mx.${_DOMAIN_FQDN} ?all
# for each domain in: ${_DOMAIN_2_FQDN}
${_DOMAIN_2_FQDN%% *}. 3600 IN TXT v=spf1 include:${_DOMAIN_FQDN} ?all

# for each domain in: ${_DOMAIN_FQDN} ${_DOMAIN_2_FQDN}
_dmarc.${_DOMAIN_2_FQDN}. 'v=DMARC1; p=none; sp=none; aspf=r;''
"
_askno "Verify the configuration of your DNS server about MAIL\nand confirm"

_echot "------------------  reverse DNS conf"
_askno "Verify that the reverse DNS of your machine: ${_IPTHIS} is set to:\n
mail.${_DOMAIN_FQDN}\n
and confirm"


_echot "------------------  firewall conf"
file=${S_PATH_CONF}/iptables-firewall.conf
if [ -f "${file}" ]; then
	_echo "Verify that the following ports are corrects for mails: $(sed -n 's|^_PORTS_MAIL="\(.*\)"$|\1|p' ${file})"
	_askno "If not, open the file: '${file}' and adjust settings\nand confirm"
else
	_echoe "Unable to find file: ${file}\nPlease configure input mail ports in your firewall"
fi


########################  END

_echoT "====================== ${_INSTALL}-${_PARTMAIL} end"
_partadd ${_PARTMAIL#++} ${S_FILE_INSTALL_DONE}
