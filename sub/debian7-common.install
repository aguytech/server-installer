#!/bin/bash
#
# write by Aguy


####################################  global configuration

! type _menu &>/dev/null && ! [ -f $S_GLOBAL_FUNCTIONS ] && echo -e "\e[1;31mUnable to load file '/usr/local/bs/inc-functions'${cclear} from ${BASH_SOURCE[0]}\e[0;0m" && exit 1
. $S_GLOBAL_FUNCTIONS


_echoT "\n==========================================  $S_RELEASE $_PART"

colorroot="\e[1;91m"
case "$S_SERVER_TYPE" in
	home)	color="\e[1;34m" ;;
	ovh)	color="\e[1;32m" ;;
	vz)	color="\e[1;33m" ;;
	lxd)	color="\e[1;33m" ;;
	kvm)	color="\e[1;38;5;172m" ;;
	*)	color="\e[1;34m"; colorroot=$color ;;
esac


_echoT "----------  root password change"

_askyn "Would you change the default root password"
if [ $_ANSWER == "y" ]
then
	_ask "Please enter a root password"
	passwd root <<EOF
$_ANSWER
$_ANSWER
EOF
fi


# home
[ "$S_SERVER_TYPE" == home ] && _eval "chown root.1000 /home; chmod g+rwx /home"


_echoT "----------  shell"

if [ "$S_SERVER_TYPE" != "lxd" ]; then

	_echoT "----------  locales"

	_eval "apt-get install -y --force-yes locales"

	cat /etc/default/locale

	# select 146
	# follow 1
	#_eval "locale-gen --purge en_US.UTF-8 fr_FR.UTF-8"
	#_eval "dpkg-reconfigure locales"
	locale -a

	sed -i "s/en_GB/en_US/" /etc/default/locale
	! grep -q LC_ALL /etc/default/locale && echo "LC_ALL=en_US.UTF-8" >> /etc/default/locale
	#! grep -q LC_ALL /etc/environment && echo "LC_ALL=en_US.UTF-8" >> /etc/environment
fi


_echoT "----------  timezone"

[ -e /etc/localtime ] && rm /etc/localtime
ln -sv /usr/share/zoneinfo/posix/Europe/Paris /etc/localtime


_echoT "----------  .bashrc"

FILE=~/.bashrc
[[ ! -f "$FILE.$DDATE" && -f "$FILE" ]] && _evalq cp -a "$FILE" "$FILE.$DDATE"

cat > $FILE << EOF
# PS1
[ "\$PS1" ] && PS1="\${debian_chroot:+(\$debian_chroot)}\[$colorroot\]\u\[\e[1;37m\]@\[$color\]\h\[\e[1;37m\]:\w\[$color\]\$\[\e[0;0m\]"

# Source global definitions
[ -f /etc/bashrc ] && . /etc/bashrc

# source global variables
[ -f /etc/server/env.conf ] && . /etc/server/env.conf

# aliases
[ -f ~/.bash_aliases ] && . ~/.bash_aliases

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
EOF


_echoT "----------  .bash_aliases"

FILE=~/.bash_aliases
[[ ! -f "$FILE.$DDATE" && -f "$FILE" ]] && _evalq cp -a "$FILE" "$FILE.$DDATE"

FILE=${S_PATH_SCRIPT_CONF}/.bash_aliases
if ! [ -f "$FILE" ]
then
	_echoE "Unable to find '$FILE'\nplease corrects this problem"
	_exit
else
	_eval "cp $FILE ~/"
fi


_echoT "----------  upgrade"

echo '#!/bin/bash
#
# Provides:				upgrade
# Short-Description:	Upgrade & clean packages
# Description:			Upgrade & clean packages

whiteb="\e[1;1m"; redb="\e[1;31m"; greenb="\e[1;32m"; blueb="\e[1;34m"; magentab="\e[1;35m";cclear="\e[0;m"

echo -e "${whiteb}update${cclear}"
apt-get update

echo -e "${whiteb}dist-upgrade${cclear}"
apt-get -y dist-upgrade

echo -e "${whiteb}autoremove${cclear}"
apt-get -y autoremove

echo -e "${whiteb}clean${cclear}"
apt-get -y clean

echo -e "${whiteb}autoclean${cclear}"
apt-get -y autoclean
' > /usr/local/bs/upgrade

_eval "chmod +x /usr/local/bs/*"


_echoT "----------  grub"

FILE=/etc/default/grub
if [ -f "$FILE" ]; then
	# grub timeout
	str=0; sed -i "s/^\(GRUB_TIMEOUT=\).*/\1$str/" "$FILE"

	update-grub
fi


_echoT "----------  repository"

#apt-get install -y python-software-properties
#add-apt-repository 'deb http://http.debian.net/debian wheezy-backports main'
#if ! grep -q ${S_RELEASE_NAME}-backports /etc/apt/sources.list
#    then echo "deb http://http.debian.net/debian ${S_RELEASE_NAME}-backports main
#    deb-src http://http.debian.net/debian ${S_RELEASE_NAME}-backports main" >> /etc/apt/sources.list
#fi

echo "deb http://debian.mirrors.ovh.net/debian/ wheezy main contrib non-free
deb-src http://debian.mirrors.ovh.net/debian/ wheezy main contrib non-free

deb http://security.debian.org/ wheezy/updates main
deb-src http://security.debian.org/ wheezy/updates main
deb http://debian.mirrors.ovh.net/debian wheezy-backports main
deb-src http://debian.mirrors.ovh.net/debian wheezy-backports main

# old
#deb http://debian.mirrors.ovh.net/debian/ wheezy main
#deb-src http://debian.mirrors.ovh.net/debian/ wheezy main

" > /etc/apt/sources.list


str=" ovh home "
if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ]; then

	_echoT "----------  dirmngr install"

	_eval "apt-get install -y dirmngr"


	_echoT "----------  mariadb repos"

	apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
	#FILE=${S_PATH_INSTALL_XTRA}/mariadb-10.3-${S_RELEASE}.key
	#! [ -f "$FILE" ] && _exite "Unable to find file: '$FILE'"
	#_eval "apt-key add $FILE"

	FILE=/etc/apt/sources.list.d/mariadb.list
	[ ! -f "$FILE.$DDATE" ] && [ -f "$FILE" ] && _eval cp -a "$FILE" "$FILE.$DDATE"
	echo "# MariaDB 10.3 repository list - created 2018-02-01 14:48 UTC
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64,i386] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.32/debian $S_RELEASE_NAME main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main" > "$FILE"

	_echoT "----------  pgsql repos"

	wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
	#FILE=${S_PATH_INSTALL_XTRA}/postgresql-10.key
	#! [ -f "$FILE" ] && _exite "Unable to find file: '$FILE'"
	#_eval "apt-key add $FILE"

	FILE=/etc/apt/sources.list.d/pgdg.list
	[ ! -f "$FILE.$DDATE" ] && [ -f "$FILE" ] && _eval cp -a "$FILE" "$FILE.$DDATE"
	echo "deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "$FILE"

fi


_echoT "----------  upgrade"

_eval upgrade


_echoT "----------  install base"

_eval "apt-get install -y bash-completion man apt-utils apt-file cron lsb-release nano wget bash-completion openssh-server rsync htop pciutils rcconf sysv-rc-conf telnet mlocate hdparm iotop sysstat iputils-tracepath dstat logrotate bsdmainutils" # mtop p7zip p7zip-plugins acpid jwhois

# while debian8 problem in lxd
[ "$S_SERVER_TYPE" != lxd ]] && apt-get install -y bash-completion


str=" ovh home "
if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ]; then
	_echoT "----------  mariadb-client install"

	_eval "apt-get update"

	_eval "apt-get install -y mariadb-client"


	_echoT "----------  postgresql-client install"

	_eval "apt-get install -y postgresql-client"


	_echoT "----------  Git"

	_eval "apt-get install -y git"


	_echoT "----------  mytop install"

	_eval "apt-get install -y mytop"


	_echoT "----------  mytop conf"

	FILE=/root/.mytop
	echo "# Local configuration file for mytop
	user=root
	pass=$pwdlocal
	host=localhost
	db=
	delay=2
	port=3306
	socket=/var/run/mysqld/mysqld.sock
	batchmode=0
	header=1
	color=1
	idle=1" > "$FILE"
	chmod 600 "$FILE"

fi


_echoT "----------  conf nano"

# *.nanorc
PATHFROM=${S_PATH_INSTALL_XTRA}/nano
PATHTO=/usr/share/nano
FILENANO=/etc/nanorc
! grep -q "## Personnal include" "$FILENANO" && echo -e "\n## Personnal include" >> $FILENANO
for FILE in $(ls -1 $PATHFROM); do
	! [ -f $PATHTO/$FILE ] && cp $PATHFROM/$FILE /usr/share/nano/
	! grep -q "$FILE" "$FILENANO" && echo -e "include \"$PATHTO/$FILE\"" >> $FILENANO
done

FILE=/etc/nanorc
sed -i "s|^.*\(set const\)$|\1|" "$FILE"
sed -i "s|^.*\(set matchbrackets.*\)$|\1|" "$FILE"
sed -i "s|^.*\(set softwrap.*\)$|\1|" "$FILE"
srh='tabsize'; str='4'; sed -i "s|^.*\(set ${srh}\).*$|\1 ${str}|" "$FILE"
sed -i "s|^\(set cut.*\)$|# \1|" "$FILE"
sed -i "s|^\(set nowrap.*\)$|# \1|" "$FILE"
#sed -i "s|^.*\(set mouse\)$|\1|" "$FILE"


_echoT "----------  logrotate conf"

! [ -d $S_PATH_LOG_SERVER ] && mkdir $S_PATH_LOG_SERVER

# logrotate
echo -e "# Logrotate file for server functions logs
#$S_PATH_LOG_INSTALL/*.log
$S_PATH_LOG_SERVER/*.log
$S_PATH_LOG_SERVER/*.err
$S_PATH_LOG_SERVER/*.debug
{
\tmissingok
\tcompress
\tdelaycompress
\tnotifempty
\tweekly
\trotate 8
}
" > /etc/logrotate.d/server

FILE=/etc/logrotate.d/exim4-base
str='7'
[ -f "$FILE" ] && sed -i "s/\(\t\+rotate\).*/\1 $str/" "$FILE"

FILE=/etc/logrotate.d/munin-node
str='7'
[ -f "$FILE" ] && sed -i "s/\(\t\+rotate\).*/\1 $str/" "$FILE"

FILE=/etc/logrotate.d/rsyslog
str='5'
[ -f "$FILE" ] && sed -i "s/\(\t\+rotate\) 4/\1 $str/" "$FILE"


if [[ "$S_SERVER_TYPE" != "vz" ]]; then

	_echoT "----------  install ntp"

	_eval "apt-get install -y ntp"


	_echoT "----------  conf ntp"

	FILE=/etc/ntp.conf
	# /etc/ntp.conf
	[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"

	str='.fr.pool.ntp.org'; sed -i "s/^\(server .\).*/\1$str/" "$FILE"

	_eval "service ntp start"
fi


_echoT "----------  remove cron log auth"

! grep -q 'pam_succeed_if.so' /etc/pam.d/common-session-noninteractive && sed -i "s/^\(session[[:blank:]]required[[:blank:]]*pam_unix\.so.*\)$/session\t\t\t[success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid\n\1/" /etc/pam.d/common-session-noninteractive

service cron restart


_echoT "----------  clean"

_eval "apt-get autoremove; apt-get clean; apt-get autoclean"


_echoT "----------  end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<keep

	_echoT "----------  mtop install"

	_eval "apt-get install -y libncurses5-dev make gcc libmariadbclient-dev"
	_eval "perl -MCPAN -e 'install Curses'"
	_eval "perl -MCPAN -e 'install Getopt::Long'"
	_eval "perl -MCPAN -e 'install Net::Domain'"
	_eval "perl -MCPAN -e 'install DBI'"
	_eval "perl -MCPAN -e 'install DBD::mysql'"

	version='0.6.6'
	_askno "Give the version of mtop to download from 'http://downloads.sourceforge.net/project/mtop/mtop' ($version) "
	version=${_ANSWER:-$version}
	cd /tmp
	wget -q "http://downloads.sourceforge.net/project/mtop/mtop/v$version/mtop-$version.tar.gz"
	tar xzf "mtop-$version.tar.gz"
	cd "mtop-$version"
	_eval "perl Makefile.PL"
	_eval "make"
	_eval "make install"

keep
