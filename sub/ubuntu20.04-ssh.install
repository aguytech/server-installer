#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  ${S_RELEASE} ${_PART}"


####################################  MAIN

# set s_port
eval $(echo ${S_CLUSTER[$HOSTNAME]}|grep -o 's_port=[^ ]*')

_echoT "----------  ssh-keygen"

_askyn "Do you wante to generate new keys for ssh"
[ "$_ANSWER" = y ] && _eval "ssh-keygen -t rsa"


# client
file='/etc/ssh/ssh_config'
_keepcpts "${file}"
_eval "sed -i '/^\s*GSSAPIAuthentication yes/ s| yes| no|' ${file}"

# server
file='/etc/ssh/sshd_config'
_keepcpts "${file}"

_eval "sed -i 's|^#\?\(PermitRootLogin\) .*$|\1 without-password|' $file"
_eval "sed -i 's|^#\?\(Port\).*$|\1 ${s_port}|' $file"
_eval "sed -i 's|^#\?\(GSSAPIAuthentication\) .*$|\1 no|' $file"
_eval "sed -i 's|^#\?\(UseDNS\) .*$|\1 no|' $file"
_eval "sed -i 's|^#\?\(PasswordAuthentication\) .*$|\1 no|' $file"
_eval "sed -i 's|^#\?\(ClientAliveInterval\) .*$|\1 300|' $file"
_eval "sed -i 's|^#\?\(ClientAliveCountMax\) .*$|\1 3|' $file"


_echoT "----------  ssh restart"

_service restart sshd


str=" home ovh "
if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ]; then

	_echoT "----------  ssh restore"

	# use saved keys
	file=${HOSTNAME}-ssh.tgz
	if [ -f "${S_PATH_INSTALL_CONF}/ssh/${file}" ]; then
		_askyn "Would you replace ssh keys with backuped ones in\n'${S_PATH_INSTALL_XTRA}/${file}'"
		if [ "$_ANSWER" == y ]; then
			_evalq cd "${S_PATH_INSTALL_XTRA}"
			_evalq tar xzf "${file}"
			_evalq mv .ssh/id_rsa* ~/.ssh
			_evalq rm -fR .ssh
			_evalq cd
		fi
	else
		_echoT "Unable to find file: '${S_PATH_INSTALL_XTRA}/${file}'"
		_askno "If this installation are a re-installation,\nPlease overwrite manually key files in ~/.ssh"
	fi

	if ! [ -f ~/.ssh/id_rsa ]
	then
		_echoT "----------  ssh-keygen"
		! [ -f ~/.ssh/id_rsa ] && _eval "ssh-keygen -t rsa"
		#ssh-copy-id <username>@<host>
		# root
		#sudo ssh-keygen -t rsa
		#gksudo ssh-copy-id <username>@<host>
		#exit
	fi

	_echoT "----------  ssh backup"

	file=${S_PATH_BACKUP}/${HOSTNAME}-ssh.tgz
	cd
	tar cvzf "${file}" .ssh/
	_echoT "a backup of path '.ssh' have been made in '${file}'\nPlease keep it safe"

fi


_echoT "---------- ${_PART} end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<KEEP
# /etc/ssh/sshd_config
'PermitRootLogin yes
PubkeyAuthentication yes
PasswordAuthentication no
UsePAM yes
Match User git
    PasswordAuthentication yes'
KEEP
