#!/bin/bash
#
# write by Aguy

_echoT "\n======================  ${_INSTALL}-${_PARTMAIL}"

grep -q "^# ${_PARTMAIL#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PARTMAIL}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm"
cts_admin=$(lxc list -f csv -c n | grep '\-admin-')
[ -z "${cts_admin}" ] && _exite "Unable to find an 'admin' container"

fc_pfa_local=${S_PATH_INSTALL_CONF}/mail/postfixadmin/config.local.php
fc_pfa_apache=${S_PATH_INSTALL_CONF}/apache2/sites/sub.conf

_echot "------------------ required files"
_require ${fc_pfa_local} ${fc_pfa_apache}

########################  DATA

_echot "------------------  data container"
# ct_master
[ -z ${_MEL_CTS_ADMIN+x} ] && { _menua "Select all available 'admin' containers to use" ${cts_admin}; _MEL_CTS_ADMIN=$(echo ${_ANSWER}); }
[ -z ${_MEL_CT_ADMIN+x} ] && { _MEL_CT_ADMIN=${_MEL_CTS_ADMIN%% *}; }

_echot "------------------  data db"

[ -z ${_MEL_DB_PFA_USER+x} ] && { anstmp=pfa; _askno "User name to access to: ${_MEL_DB_NAME} (${anstmp})"; _MEL_DB_PFA_USER=${_ANSWER:-${anstmp}}; }
_confset _MEL_DB_PFA_USER "${_MEL_DB_PFA_USER}"

[ -z ${_MEL_DB_PFA_PWD+x} ] && { anstmp="$(_pwd)"; _askno "User password for ${_MEL_DB_PFA_USER} ! 2 digit at least ! (${anstmp})"; _MEL_DB_PFA_PWD=${_ANSWER:-${anstmp}}; }

if [ -z "${_PFA_APP_VERSION+x}" ]; then
	ok=false; while ! ${ok}; do
		anstmp=3.3.8 && _askno "version of phpMyAdmin to download (${anstmp})"
		_PFA_APP_VERSION="${_ANSWER:-${anstmp}}"
		file_app=postfixadmin-${_PFA_APP_VERSION}.tar.gz
		file_app_tmp=/tmp/${file_app}
		uri=https://github.com/postfixadmin/postfixadmin/archive/refs/tags/${file_app}
		if ! [ -f "${file_app_tmp}" ] || [ "$(ls -s ${file_app_tmp}|cut -d' ' -f1)" = 0 ]; then
			_echot "------------------  wget ${file_app}"
			wget -q ${uri} -O ${file_app_tmp} && ok=true || _echoe "Unable to get file: ${uri}"
		else
			ok=true
		fi
	done
else
	file_app=postfixadmin-${_PFA_APP_VERSION}.tar.gz
	file_app_tmp=/tmp/${file_app}
	if ! [ -f "${file_app_tmp}" ] || [ "$(ls -s ${file_app_tmp}|cut -d' ' -f1)" = 0 ]; then
		_echot "------------------  wget ${file_app}"
		uri=https://github.com/postfixadmin/postfixadmin/archive/refs/tags/${file_app}
		wget -q ${uri} -O ${file_app_tmp} && ok=true || _exite "Unable to get file: ${uri}"
	fi
fi

_echoA "Default policy to use for postfix"
_echo "none: Don’t use encryption
- may: Encrypt, if supported by other server. Self-signed certificates
   are accepted, because there is no certificate verification.
- encrypt: Always encrypt. Self-signed certificates are accepted,
   because there is no certificate verification.
- dane: If there are valid TLSA-records in the DNS, encryption is mandatory.
   The certificate is then verified via DANE. If invalid TLSA records are found,
   fallback is “encrypt”. If no TLSA-records are found, fallback is “may”.
- dane-only: Encrypted connections only. Certificate verification via DANE.
   No fallback to weaker methods.
- verify: Encrypted connections only. Certificate must be issued by an accepted CA.
   Hostname given in MX record must match hostname in certificate.
- secure: Encrypted connections only. Certificate must be issued by an accepted CA.
   Hostname in certificate must by domain or subdomain of e-mail domain. No DNS used.
"; sleep 0.1
[ -z ${_MEL_PFA_POLICY+x} ] && { _menu "Select a global default policy of security (may)" none may encrypt dane dane-only verify secure; _MEL_PFA_POLICY="${_ANSWER}"; }
_confset _MEL_PFA_POLICY "${_MEL_PFA_POLICY}"

pfa_path=${file_app%.tar.gz}
_APA_DOM_FQDN=${_MEL_DOM_FQDN}
_APA_PATH_DOM=${S_VM_PATH_SHARE}/www
_APA_SUB=pfa
_CT_ADMIN=${_MEL_CT_ADMIN}

########################  MARIADB

_echot "------------------  create db ${_MEL_DB_NAME}"
cmd="CREATE DATABASE IF NOT EXISTS ${_MEL_DB_NAME};"
_eval "mysql -h${_MEL_DB_HOST} -uroothost -p${_MEL_DB_HOST_PWD} -e \"${cmd}\""

strpass=
for ct in ${_MEL_CTS_ADMIN} ${S_SERVICE[proxy]}; do
	_echot "------------------  grant ${_MEL_DB_PFA_USER} for ${ct}"
	cmd="CREATE OR REPLACE USER '${_MEL_DB_PFA_USER}'@'${ct}.lxd' IDENTIFIED BY '${_MEL_DB_PFA_PWD}';"
	cmd+="GRANT ALL PRIVILEGES ON ${_MEL_DB_NAME}.* TO '${_MEL_DB_PFA_USER}'@'${ct}.lxd';"
	_eval "mysql -h${_MEL_DB_HOST} -uroothost -p${_MEL_DB_HOST_PWD} -e \"${cmd}\""
	strpass+="${_MEL_DB_PFA_USER} @ ${ct} - ${_MEL_DB_PFA_PWD}\n"
done

_echot "------------------  flush privileges"
_eval "mysql -h${_MEL_DB_HOST} -uroothost -p${_MEL_DB_HOST_PWD} -e \"FLUSH PRIVILEGES;\""

########################  MAIN

_echot "------------------  create path ${_APA_PATH_DOM}"
_lxc_exec ${_CT_ADMIN} "[ -d ${_APA_PATH_DOM} ] || mkdir -p ${_APA_PATH_DOM}"

_echot "------------------  install"
_eval lxc file push -q ${file_app_tmp} ${_CT_ADMIN}/${_APA_PATH_DOM}/

cmds="cd ${_APA_PATH_DOM}
[ -e ${pfa_path} ] && mv ${pfa_path} ${pfa_path}.${_SDATE}
tar -xzf ${file_app}
[ -e postfixadmin-${pfa_path} ] && mv postfixadmin-${pfa_path} ${pfa_path}
[ -e '${_APA_SUB}' ] && rm ${_APA_SUB}
ln -s ${pfa_path} ${_APA_SUB}"
_lxc_exec ${_CT_ADMIN} "${cmds}"

_echot "------------------  conf local"
file=${_APA_PATH_DOM}/${_APA_SUB}/${fc_pfa_local##*/}
_lxc_exec ${_CT_ADMIN} "[ -e '${file}' ] && mv ${file} ${file}.${_SDATE}"
_eval lxc file push -q ${fc_pfa_local} ${_CT_ADMIN}${file}
_lxc_var_replace ${_CT_ADMIN} ${file} mail

_echot "------------------  path templates_c"
path=${_APA_PATH_DOM}/${pfa_path}/templates_c
_lxc_exec ${_CT_ADMIN} "[ -d '${path}' ] || mkdir ${path}"

########################  APACHE

_echot "------------------  conf apache2"
file=/etc/apache2/sites/${_APA_SUB}.conf
_lxc_exec ${_CT_ADMIN} "[ -e '${file}' ] && mv ${file} ${file}.${_SDATE}"
_eval lxc file push -q ${fc_pfa_apache} ${_CT_ADMIN}${file}
_lxc_var_replace ${_CT_ADMIN} ${file} apache
_lxc_exec ${_CT_ADMIN} "sed -i 's|${S_VM_PATH_SHARE}/www/${_APA_SUB}|${S_VM_PATH_SHARE}/www/${_APA_SUB}/public|' ${file}"

_echot "------------------  apache2 restart"
_lxc_exec ${_CT_ADMIN} "chown 0:0 -R /etc/apache2; chown apache.apache -R ${_APA_PATH_DOM}"
_lxc_exec ${_CT_ADMIN} "rc-service apache2 restart"

########################  MANUAL

_echot "------------------  manually app password"
_echoA "Go to address: https://${_APA_SUB}.${_APA_DOM_FQDN}/setup.php"
_echo "Use this password to configure postfixadmin: ${_MEL_DB_PFA_PWD}"
_echo "after this, paste to this terminal the text given by postfixadmin to configure it:"
str=
while [ -z "${str}" ]; do read -r str; done
file=${_APA_PATH_DOM}/${_APA_SUB}/config.local.php
lxc exec ${_CT_ADMIN} -- sed -i "/^.CONF..setup_password/ c ${str}" ${file}

_echot "------------------  manually admin password"
_echoA "Refresh page: ${_APA_SUB}.${_APA_DOM_FQDN}/setup.php"
_echo "and enter setup password: ${_MEL_DB_PFA_PWD} to continue"
_echo "After creation of tables succeed you have to setup an account for administration"
_askno "and valid after this"

########################  DB ADD

_evalq "mysql -h'${_MEL_DB_HOST}' -uroothost -p'${_MEL_DB_HOST_PWD}' ${_MEL_DB_NAME} -e \"
ALTER TABLE domain ADD COLUMN IF NOT EXISTS policy enum('none', 'may', 'encrypt', 'dane', 'dane-only', 'fingerprint', 'verify', 'secure') NOT NULL DEFAULT '${_MEL_PFA_POLICY}' AFTER modified;
ALTER TABLE domain ADD COLUMN IF NOT EXISTS params varchar(255) DEFAULT NULL AFTER policy;
\""

########################  SHOW

_echot "------------------  show passwords"
_echoA "Keep this passwords:"
_echo "${strpass}"

########################  COUNTS

_echot "------------------  domain & email account"
_echoA "Now use Logging you in this address:"
_echo " ${_APA_SUB}.${_APA_DOM_FQDN}/"
_echoa "And create at least the domain: ${_APA_DOM_FQDN} & the email: ${S_EMAIL_TECH}"

########################  COPY

cts_replace=" ${_MEL_CTS_ADMIN} "; cts_replace=${cts_replace/ ${_CT_ADMIN} /}

for ct_name in ${cts_replace}; do
	_echot "---------- replace ${ct_name}"
	lxc list -f csv -c n | grep -q ^${ct_name}$ && _eval lxc delete --force ${ct_name}
	_eval lxc copy ${_CT_ADMIN} ${ct_name}
	_eval lxc start ${ct_name}
done

########################  PUBLISH

for ct_name in ${_MEL_CTS_ADMIN}; do
	_echot "------------------  publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && ct_new=${ct_name}-${_SDATE}
	lxc image list -f csv -c l | grep -q ^${ct_new}$ && ct_new=${ct_name}-$(date +%s)
	_eval lxc image alias rename ${ct_name} ${ct_new}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done

########################  END

_echoT "====================== ${_INSTALL}-${_PARTMAIL} end"
_partadd ${_PARTMAIL#++} ${S_FILE_INSTALL_DONE}
