#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART#++}"
grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART#++}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_INIT_NAME}$ || _exite "Unable to find image container: '${_CT_INIT_NAME}'"

_echot "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[proxy]}$ || _exite "Unable to find container: '${S_SERVICE[proxy]}'"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: '${S_SERVICE[log]}'"

####################  DATA

_PARTMAIL=mail-data
. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"

####################  INIT

_PARTMAIL=mail-init
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  SSL

_PARTMAIL=mail-ssl
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  MARIADB

_PARTMAIL=mail-mariadb
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  _MEL_VMAIL_APP

_PARTMAIL=mail-${_MEL_VMAIL_APP}
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  POSTFIX

_PARTMAIL=mail-postfix
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  DOVECOT

_PARTMAIL=mail-dovecot
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  RSPAMD

_PARTMAIL=mail-rspamd
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi


_exite debug

####################  FAIL2BAN

#_PARTMAIL=mail-fail2ban
#if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
#	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
#	[ "${_MEL_STEP}" ] && _askno "Valid to continue" 
#else
#	_echO "performed *** ${_PARTMAIL}"
#fi

########################  FIX IP

_echot "------------------ network fixed ip"
if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	_eval lxc config device override ${_CT_NAME} eth0 ipv4.address=${_CT_IP}
fi

########################  HAPROXY

_echoA "Adjust backend in proxy for backend: ${S_SERVICE[mail]} with:"
_echoa $(for i in `seq 1 ${_CT_NUM}`; do echo ${_CT_NAME}-${i};done)

########################  PUBLISH

for ct_name in ${_CT_ALL_NAME}
	_echot "------------------ publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
