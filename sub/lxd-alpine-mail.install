#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART}"

########################  REQUIRED

_echot "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_INIT_NAME}$ || _exite "Unable to find image container: '${_CT_INIT_NAME}'"

_echot "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[proxy]}$ || _exite "Unable to find container: '${S_SERVICE[proxy]}'"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: '${S_SERVICE[log]}'"

####################  SELECT

_echot "------------------ select"

anstmp="17112018.fr.lxd 17112018.ovh.lxd ambau.fr.lxd ambau.ovh.lxd ggj.fr.lxd ggj.ovh.lxd han-sci.fr.lxd otokoz.ovh.lxd"
[ "${_DOMAIN_FQDN%.lxd}" = "${_DOMAIN_FQDN}" ] && anstmp=${anstmp//.lxd/}
_askno "All FQDN domains (${anstmp})"
_DOMAIN_ALL_FQDN="${_ANSWER:-${anstmp}}"

_menu "A principal fqdn domain (ambau.fr)" ${_DOMAIN_ALL_FQDN}
_DOMAIN_FQDN="${_ANSWER}"

_DOMAIN_NAME=${_DOMAIN_FQDN%.lxd} && _DOMAIN_NAME=${_DOMAIN_NAME%.*}
_FILE_INSTALL_CONF=${S_PATH_CONF}/${_PART}-${_DOMAIN_FQDN}.conf
_confset _FILE_INSTALL_CONF "${_FILE_INSTALL_CONF}" ${_FILE_INSTALL_CONF}
_confset _DOMAIN_ALL_FQDN "${_DOMAIN_ALL_FQDN}" ${_FILE_INSTALL_CONF}
_confset _DOMAIN_FQDN "${_DOMAIN_FQDN}" ${_FILE_INSTALL_CONF}
_confset _DOMAIN_NAME "${_DOMAIN_NAME}" ${_FILE_INSTALL_CONF}

####################  DATA

_PARTMAIL=mail-data
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	. ${_FILE_INSTALL_CONF}
	_echO "performed *** ${_PARTMAIL}"
fi

####################  INIT

_PARTMAIL=mail-init
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  SSL

_PARTMAIL=mail-ssl
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  MARIADB

_PARTMAIL=mail-mariadb
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  _VMAIL_APP

_PARTMAIL=mail-${_VMAIL_APP}
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  POSTFIX

_PARTMAIL=mail-postfix
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  DOVECOT

_PARTMAIL=mail-dovecot
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  RSPAMD

_PARTMAIL=mail-rspamd
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echO "performed *** ${_PARTMAIL}"
fi

####################  FAIL2BAN

#_PARTMAIL=mail-fail2ban
#if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
#	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
#	[ "$_STEP" ] && _askno "Valid to continue" 
#else
#	_echO "performed *** ${_PARTMAIL}"
#fi

########################  COPY

for i in `seq 2 ${_CT_NUM}`; do
	ct_name=${_CT_NAME}-${i}
	_echot "---------- build ${ct_name}"

	if lxc list -f csv -c n | grep -q ^${ct_name}$; then
		lxc list -f csv -c n status=Running| grep -q ^${ct_name}$ && _eval lxc stop ${ct_name}
		_eval lxc rename ${ct_name} ${ct_name}-${_SDATE}
	fi
	_eval lxc copy ${_CT_NAME} ${ct_name}
	_eval lxc start ${ct_name}
done

########################  FIX IP

_echot "------------------ network fixed ip"
if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	_eval lxc config device override ${_CT_NAME} eth0 ipv4.address=${_CT_IP}
fi

########################  HAPROXY

_echoA "Adjust backend in proxy for backend: ${S_SERVICE[mail]} with:"
_echoa $(for i in `seq 1 ${_CT_NUM}`; do echo ${_CT_NAME}-${i};done)

########################  PUBLISH

for ct_name in ${_CT_ALL_NAME}
	_echot "------------------ publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
