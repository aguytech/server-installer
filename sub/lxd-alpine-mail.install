#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART}"

########################  REQUIRED

_echoT "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_NAME_COM}$ || _exite "Unable to find image container: '${_CT_NAME_COM}'"

_echoT "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find image container: '${S_SERVICE[log]}'"

_echoT "------------------ file required"
_POSTFIXMASTER=${S_PATH_INSTALL_CONF}/mail/master.cf
_POSTFIXMAIN=${S_PATH_INSTALL_CONF}/mail/main_add.cf

_echoT "------------------ required files"
_require ${_POSTFIXMASTER} ${_POSTFIXMAIN}

########################  DATA

_DOMAIN_FQDN=${S_DOMAIN_FQDN}
_MAIL_ADMIN=$S_DOMAIN_EMAIL_ADMIN
_FILE_INSTALL_CONF=${S_FILE_INSTALL_CONF%/*}/${_PART}-${_DOMAIN_FQDN}.conf 
[ -f "${_FILE_INSTALL_CONF}" ] && . ${_FILE_INSTALL_CONF}

#<<KEEP
_echoT "------------------ data domain"

anstmp=${S_DOMAIN_FQDN} && _askno "Domain name to use (${anstmp})"
_DOMAIN_FQDN="${_ANSWER:-${anstmp}}"
anstmp=${S_DOMAIN_EMAIL_ADMIN} && _askno "Administration email adress for domain (${anstmp})"
_MAIL_ADMIN=${_ANSWER:-${anstmp}}

_FILE_INSTALL_CONF=${S_FILE_INSTALL_CONF%/*}/${_PART}-${_DOMAIN_FQDN}.conf && _confset _FILE_INSTALL_CONF "${_FILE_INSTALL_CONF}" ${_FILE_INSTALL_CONF}
grep -q "^# ${_PART#++}$" ${_FILE_INSTALL_CONF} || echo  "# ${_PART}" >> ${_FILE_INSTALL_CONF}
_confset _DOMAIN_FQDN "${_DOMAIN_FQDN}" ${_FILE_INSTALL_CONF}
_confset _MAIL_ADMIN "${_MAIL_ADMIN}" ${_FILE_INSTALL_CONF}
_confset _POSTFIXMASTER "${_POSTFIXMASTER}" ${_FILE_INSTALL_CONF}
_confset _POSTFIXMAIN "${_POSTFIXMAIN}" ${_FILE_INSTALL_CONF}

_echoT "------------------ data container"

anstmp=pdm-${_DOMAIN_FQDN//./-} && _askno "Name of container to build (${anstmp})"
_CT_NAME="${_ANSWER:-${anstmp}}" && _confset _CT_NAME "${_CT_NAME}" ${_FILE_INSTALL_CONF}

anstmp=mail-${_DOMAIN_FQDN} && _askno "Name of profile to create (${anstmp})"
profile="${_ANSWER:-${anstmp}}" && _confset profile "${profile}" ${_FILE_INSTALL_CONF}

_echoT "------------------ data"

anstmp=y && _askno "Do you want an installation with halts for each parts (${anstmp})"
_STEP=${_ANSWER:-${anstmp}} && _confset _STEP "${_STEP}" ${_FILE_INSTALL_CONF}

anstmp=${S_VM_PATH_SHARE}/mail/${_DOMAIN_FQDN} && _askno "path for shared MAIL (${anstmp})"
_PATH_MAIL=${_ANSWER:-${anstmp}} && _confset _PATH_MAIL "${_PATH_MAIL}" ${_FILE_INSTALL_CONF}

anstmp=${_PATH_MAIL}/ssl && _askno "path for SSL (${anstmp})"
_PATH_SSL=${_ANSWER:-${anstmp}} && _confset _PATH_SSL "${_PATH_SSL}" ${_FILE_INSTALL_CONF}

anstmp=${_PATH_MAIL}/rspamd && _askno "path for RSPAMD (${anstmp})"
_PATH_RSPAMD=${_ANSWER:-${anstmp}} && _confset _PATH_RSPAMD "${_PATH_RSPAMD}" ${_FILE_INSTALL_CONF}

_echoT "------------------ data vmail"

#declare -A vmails_acro
#vmails_acro=( [postfixadmin]="pfa" [vmailmanage]="vmail" [vimbadmin]="vma" )
#_menu "Select the virtual mail manager you will install (postfixadmin)" `echo ${!vmails_acro[@]}|tr ' ' '\n'|sort`
#_VMAIL_APP=${_ANSWER} && _confset _VMAIL_APP "${_VMAIL_APP}" ${_FILE_INSTALL_CONF}
_VMAIL_APP=postfixadmin && _confset _VMAIL_APP "${_VMAIL_APP}" ${_FILE_INSTALL_CONF}

anstmp=pma && _askno "Please give a acronym for virtualmail (${anstmp})"
_VMAIL_ACRO=${_ANSWER:-${anstmp}} && _confset _VMAIL_ACRO "${_VMAIL_ACRO}" ${_FILE_INSTALL_CONF}

anstmp=${_PATH_MAIL}/vmail && _askno "path for VMAIL (${anstmp})" && _PATH_VMAIL=${_ANSWER:-${anstmp}}
_PATH_VMAIL=${_ANSWER:-${anstmp}} && _confset _PATH_VMAIL "${_PATH_VMAIL}" ${_FILE_INSTALL_CONF}

anstmp=${_PATH_VMAIL}/sieve && _askno "path for sieve (${anstmp})"
_PATH_SIEVE=${_ANSWER:-${anstmp}} && _confset _PATH_SIEVE "${_PATH_SIEVE}" ${_FILE_INSTALL_CONF}

anstmp=vmail && _askno "Give a name of user & group for virtualmail (${anstmp})"
_VMAIL_USER=${_ANSWER:-${anstmp}} && _confset _VMAIL_USER "${_VMAIL_USER}" ${_FILE_INSTALL_CONF}

anstmp=90 && _askno "Give the uid/gid for vmail user (${anstmp})"
_VMAIL_UID=${_ANSWER:-${anstmp}} && _confset _VMAIL_UID "${_VMAIL_UID}" ${_FILE_INSTALL_CONF}


_PATH_DKIM="${_PATH_RSPAMD}/dkim" && _confset _PATH_DKIM "${_PATH_DKIM}" ${_FILE_INSTALL_CONF}
#_IPS_IN=`echo "${S_CLUSTER[*]}"|tr ' ' '\n'|sed -n 's|s_ip=\([^ ]\+\)$|\1|p'|grep -v ${_IPTHIS}|xargs`
_IPS_IN=`echo "${S_CLUSTER[*]}"|tr ' ' '\n'|sed -n 's|s_ip=\([^ ]\+\)$|\1|p'|xargs` && _confset _IPS_IN "${_IPS_IN}" ${_FILE_INSTALL_CONF}


_PATHSSLKEY=${_PATH_SSL}/private && _confset _PATHSSLKEY "${_PATHSSLKEY}" ${_FILE_INSTALL_CONF}
_PATHSSLCRT=${_PATH_SSL}/certs && _confset _PATHSSLCRT "${_PATHSSLCRT}" ${_FILE_INSTALL_CONF}
_FILESSLKEY="${_PATHSSLKEY}/mail.${_DOMAIN_FQDN}.key" && _confset _FILESSLKEY "${_FILESSLKEY}" ${_FILE_INSTALL_CONF}
_FILESSLCSR="${_PATHSSLKEY}/mail.${_DOMAIN_FQDN}.csr" && _confset _FILESSLCSR "${_FILESSLCSR}" ${_FILE_INSTALL_CONF}
_FILESSLCRT="${_PATHSSLCRT}/mail.${_DOMAIN_FQDN}.crt" && _confset _FILESSLCRT "${_FILESSLCRT}" ${_FILE_INSTALL_CONF}
_FILESSLPEM="${_PATHSSLKEY}/mail.${_DOMAIN_FQDN}.pem" && _confset _FILESSLPEM "${_FILESSLPEM}" ${_FILE_INSTALL_CONF}

########################  PROFILE

if ! lxc profile list -f csv|grep -q "^${profile},"; then
	_echoT "------------------ profile create ${profile}"
	_eval lxc profile create ${profile}

	path=${S_HOST_PATH_SHARE}/mail/${_DOMAIN_FQDN}
	path_ct=${_PATH_MAIL}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
else
	_echoT "------------------ profile exists ${profile}"
fi


########################  INIT

_echoT "------------------ init"

if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
fi
_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global -p ${profile}


_echoT "------------------ network fixed ip"

if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	_CT_IP=${s_base}.${S_SERVICE_BITS[mail]}
	_eval lxc config device override ${_CT_NAME} eth0 ipv4.address=${_CT_IP}
fi


_echoT "------------------ ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}


########################  METADATA

_echoT "------------------ metadata"
_lxc_meta_add ${_CT_NAME} profiles ${profile}

########################  IPTABLES

_echoT "----------  iptables"
sed -i '/^_NAT_MAIL=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
sed -i '/^_NAT_RSPAMD=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
_service restart ${_IPT_SERVICE}

#KEEP

########################  PATH

_echoT "------------------ create paths"

paths="${_PATH_MAIL} ${_PATH_VMAIL} ${_PATH_SIEVE} ${_PATH_SSL}/postfix ${_PATH_RSPAMD} ${_PATH_DKIM} ${_PATH_SSL} ${_PATHSSLKEY} ${_PATHSSLCRT}"
cmd="for path in ${paths}; do [ -d \${path} ] || mkdir -p \${path}; done"
_lxc_exec ${_CT_NAME} "${cmd}"

cmds="chmod 644 ${_PATHSSLCRT} && chmod 600 ${_PATHSSLKEY}"
_lxc_exec ${_CT_NAME} "${cmd}"


####################  TOOLS

_PARTMAIL=mail-init
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echoW "performed *** ${_PARTMAIL}"
fi

####################  MARIADB

_PARTMAIL=mail-mariadb
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echoW "performed *** ${_PARTMAIL}"
fi

####################  DOVECOT

_PARTMAIL=mail-dovecot
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echoW "performed *** ${_PARTMAIL}"
fi



exit


####################  POSTFIX

_PARTMAIL=mail-postfix
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echoW "performed *** ${_PARTMAIL}"
fi

####################  RSPAMD

_PARTMAIL=mail-rspamd
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echoW "performed *** ${_PARTMAIL}"
fi

####################  _VMAIL_APP

_PARTMAIL=mail-${_VMAIL_APP}
if ! _parthave ${_PARTMAIL} ${S_FILE_INSTALL_DONE}; then
	. "${_PATH_BASE_SUB}/${_RELEASE_PART}-${_PARTMAIL}.install" || _exite "Wrong part: ${_PARTMAIL}"
	[ "$_STEP" ] && _askno "Valid to continue" 
else
	_echoW "performed *** ${_PARTMAIL}"
fi

########################################  RSYSLOG

STR=" vz lxd "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "------------------ rsyslog conf mail"

	! grep -q "^mail\.\*.*@$S_HOST_IPV4:$S_RSYSLOG_PORT" /etc/rsyslog.conf && sed -i "s|^\(.\?mail\.\*.*\)$|\1\nmail.*\t\t\t\t@$S_HOST_IPV4|" /etc/rsyslog.conf


	_echoT "------------------ rsyslog restart"

	systemctl restart rsyslog.service
fi


####################################  START

_echoT "------------------ postfix start"
_evalq "systemctl start postfix"


_echoT "------------------ dovecot start"
_evalq "systemctl start dovecot.service"



#################################### test mail sending

_echoT "------------------ test mail sending : root -> postmaster@$_DOMAIN_FQDN"

# sendmail -v postmaster@$_DOMAIN_FQDN
_mail "root <root@$_DOMAIN_FQDN>" postmaster@$_DOMAIN_FQDN test "Here is the first email of Postfix from $HOSTNAME / $_IPTHIS\nYes ;o)"
sleep 1
_askno "${bblue}Please verify you have received the email test to postmaster@$_DOMAIN_FQDN\n& valid${cclear}"


####################################  CONNECT

_echoi "To use your mail manager, follow this informations:"
_echoi "${yellowb}IMAP-Server${cclear} mail.$_DOMAIN_FQDN | Port: 143 | STARTTLS"
_echoi "${yellowb}SMTP-Server${cclear} mail.$_DOMAIN_FQDN | Port: 587 | STARTTLS"
_echoi "${yellowb}Managesieve${cclear} mail.$_DOMAIN_FQDN | Port: 4190 | STARTTLS"
_echoi "${yellowb}Username${cclear} Complete e-mail address"


########################  PUBLISH

for i in `seq 1 ${ct_num}`; do
 	ct_name=${ct_base}-${i}

	_echoT "------------------ publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done


########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
