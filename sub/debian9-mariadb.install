#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  $S_RELEASE $_PART"


####################################  CTID

if [ "$S_SERVER_TYPE" == vz ]; then
	ctidthis="$(_get_ctid)"

	_echoT "----------  ${S_SERVICE_IPS['sgbd']}"

	# test ctid
	[ "${S_SERVICE_IPS['sgbd']/$_IPTHIS/}" == "${S_SERVICE_IPS['sgbd']}" ] && _askno "This container is not one of the default declared for sgbd\nConfirm or answer 'n' to exit"
	[ "$_ANSWER" == "n" ] && _exit
fi


####################################  FUNCTION


####################################  MAIN

_echoT "------------------ fileconf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

[ -z ${_PATH_MARIADB+x} ] && anstmp="$S_VM_PATH_SHARE/mariadb" && _askno "path for MYSQL ($anstmp)" && _PATH_MARIADB=${_ANSWER:-$anstmp} && _confset _PATH_MARIADB "$_PATH_MARIADB"

[ -z ${_MARIADBVER+x} ] && anstmp='10.3' && _askno "Please enter the version of mariadb to install ($anstmp)" && _MARIADBVER=${_ANSWER:-$anstmp} && _confset _MARIADBVER "$_MARIADBVER"

[ -z ${_BACKUPVER+x} ] && anstmp="$_MARIADBVER" && _askno "Please enter the version of mariadb-backup to install ($anstmp)" && _BACKUPVER=${_ANSWER:-$anstmp} && _confset _BACKUPVER "$_BACKUPVER"

[ -z ${_PERCONAVER+x} ] && anstmp="3.0" && _askno "Please enter the version of percona to install ($anstmp)" && _PERCONAVER=${_ANSWER:-$anstmp} && _confset _PERCONAVER "$_PERCONAVER"

# pwd
[ -z ${_PWDLOCAL+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for 'root@localhost ($pwdtmp)" && _PWDLOCAL=${_ANSWER:-$pwdtmp} && _confset _PWDLOCAL "$_PWDLOCAL"

[ -z ${_PWDREMOTE+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for 'rootremote@${S_IPS_ADMIN}' ($pwdtmp)" && _PWDREMOTE=${_ANSWER:-$pwdtmp} && _confset _PWDREMOTE "$_PWDREMOTE"

[ -z ${_PWDHOST+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for 'roothost@${S_CLUSTER[*]}' ($pwdtmp)" && _PWDHOST=${_ANSWER:-$pwdtmp} && _confset _PWDHOST "$_PWDHOST"

[ -z ${_PWDADMIN+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for 'rootadmin@${S_SERVICE_IPS['admin']}' ($pwdtmp)" && _PWDADMIN=${_ANSWER:-$pwdtmp} && _confset _PWDADMIN "$_PWDADMIN"

[ -z ${_PWDDEV+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for '${S_MARIA_DEV}@${_VM_IP_BASE}.2% ${S_IPS_DEV}' ($pwdtmp)" && _PWDDEV=${_ANSWER:-$pwdtmp} && _confset _PWDDEV "$_PWDDEV"

[ -z ${_PWDHTTP+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for '${S_MARIA_HTTP}@${_VM_IP_BASE}.1%' ($pwdtmp)" && _PWDHTTP=${_ANSWER:-$pwdtmp} && _confset _PWDHTTP "$_PWDHTTP"

[ -z ${_PWDPERCONA+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for 'percona'@'localhost' ($pwdtmp)" && _PWDPERCONA=${_ANSWER:-$pwdtmp} && _confset _PWDPERCONA "$_PWDPERCONA"

[ -z ${_PWDTOP+x} ] && pwdtmp=`_pwd` && _askno "Enter a password for 'innotop'@'localhost' ($pwdtmp)" && _PWDTOP=${_ANSWER:-$pwdtmp} && _confset _PWDTOP "$_PWDTOP"


####################################  CONTAINER

PARTSUB="host-$_PART"
str=" vz lxd "
if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ] && ! grep -q "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then

	# instance share
	PATHTMP="/var/lib/mysql"
	! [ -d "$PATHTMP" ] && mkdir -p "$PATHTMP"
	# global share
	PATH_SHARE="$_PATH_MARIADB/default"
	! [ -d "$PATH_SHARE" ] && mkdir -p "$PATH_SHARE"

	_evalq chmod 750 "$PATHTMP" "$PATH_SHARE"

	_echoT "----------  $PARTSUB"

	while ! grep -q "^$PARTSUB$" "${S_FILE_INSTALL_DONE}"; do
		_echoi "from an other terminal in server host launch:"
		_echoI "${S_PATH_INSTALL}/sub/${S_HOST_RELEASE}-${PARTSUB}.install ${ctidthis} ${PATH_SHARE} $S_FILE_INSTALL_DONE${cclear}"
		_askyn "Confirm"
	done
fi


####################################  CONTAINER

_echoT "----------  keep password"

_askno "${yellowb}Keep password of 'root'@'localhost' for installation !\n$_PWDLOCAL${cclear}\nConfirm"


_echoT "----------  variables set"

strpass=
strpass+="root @ localhost - $_PWDLOCAL\n"
strpass+="root @ 127.0.0.1 - $_PWDLOCAL\n"
strpass+="root @ $HOSTNAME - $_PWDLOCAL\n"
strpass+="root @ ::1 - $_PWDLOCAL\n"


_echoT "------------------ file required"

file_mariadbkey="${S_PATH_INSTALL_XTRA}/mariadb-${_MARIADBVER}-${S_RELEASE}.key"
file_perconakey="${S_PATH_INSTALL_XTRA}/percona-${_PERCONAVER}.key"

files="$file_mariadbkey $file_perconakey"
for file in $files; do ! [ -f "$file" ] && _exite "Unable to find file: '$file'"; done


_echoT "----------  tools install"

_eval apt-get install -y dirmngr


_echoT "----------  mariadb repos"

#apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xf1656f24c74cd1d8
# search 0xf1656f24c74cd1d8 in http://keyserver.ubuntu.com:11371/
_evalq apt-key add "$file_mariadbkey"

file=/etc/apt/sources.list.d/mariadb.list
_keepcpts "$file"
echo "# MariaDB ${_MARIADBVER} repository list - created 2018-02-01 14:48 UTC
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64,i386] http://mariadb.mirrors.ovh.net/MariaDB/repo/${_MARIADBVER}/debian $S_RELEASE_NAME main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/${_MARIADBVER}/debian $S_RELEASE_NAME main" > "$file"


_echoT "----------  percona repos"

# http://keys.gnupg.net/pks/lookup?op=get&search=0x9334A25F8507EFA5
_evalq apt-key add "$file_perconakey"
#apt-key adv --keyserver keys.gnupg.net --recv-keys 8507EFA5

file=/etc/apt/sources.list.d/percona.list
! [ -f "$file" ] && echo "deb http://repo.percona.com/apt $S_RELEASE_NAME main testing
deb-src http://repo.percona.com/apt $S_RELEASE_NAME main testing" > "$file"


_echoT "----------  apt update"

_evalq apt-get update


_echoT "----------  mariadb server/client & percona install"

_eval apt-get install -y mariadb-server mariadb-client "mariadb-backup-${backupver}" percona-toolkit


_echoT "----------  secure install"

#/usr/bin/mysqladmin -u root password ''

_echoI "Please give the root password for localhost: $_PWDLOCAL\nAnd not change it after the next question !"
_eval mysql_secure_installation

#sudo iptables -I INPUT -p tcp --dport ${S_MARIA_PORT} -j ACCEPT
#service iptables save


_echoT "----------  right rootremote"

for ip in ${S_IPS_ADMIN}; do
	strpass+="rootremote @ ${ip} - $_PWDREMOTE\n"
	_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT ALL PRIVILEGES ON *.* TO rootremote@'${ip}' IDENTIFIED BY '$_PWDREMOTE' WITH GRANT OPTION\""
	_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT PROXY ON ''@'%' TO 'rootremote'@'${ip}' WITH GRANT OPTION\""
done


_echoT "----------  right roothost"

for id in ${!S_CLUSTER[*]}; do
	strpass+="roothost @ ${S_CLUSTER[$id]} - $_PWDHOST\n"
	_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT ALL PRIVILEGES ON *.* TO roothost@'${S_CLUSTER[$id]}' IDENTIFIED BY '$_PWDHOST' WITH GRANT OPTION\""
done


_echoT "----------  right rootadmin"

for ip in ${S_SERVICE_IPS['admin']}; do
	strpass+="rootadmin @ ${ip} - $_PWDADMIN\n"
	_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT ALL PRIVILEGES ON *.* TO rootadmin@'${ip}' IDENTIFIED BY '$_PWDADMIN' WITH GRANT OPTION\""
done


_echoT "----------  right ${S_MARIA_DEV}"

_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, FILE, INDEX, ALTER, CREATE TEMPORARY TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON *.* TO ${S_MARIA_DEV}@'${_VM_IP_BASE}.2%' IDENTIFIED BY '$_PWDDEV'\""
for ip in ${S_IPS_DEV}; do
	strpass+="${S_MARIA_DEV} @ ${ip} - $_PWDDEV\n"
	_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, FILE, INDEX, ALTER, CREATE TEMPORARY TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON *.* TO ${S_MARIA_DEV}@'${ip}' IDENTIFIED BY '$_PWDDEV'\""
done


_echoT "----------  right ${S_MARIA_HTTP}"

<<keep
for ip in ${S_SERVICE_IPS['http']}; do
	strpass+="${S_MARIA_HTTP} @ $ip - $_PWDHTTP\n"
	_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SELECT, INSERT, UPDATE ON *.* TO '${S_MARIA_HTTP}'@'$ip' IDENTIFIED BY '$_PWDHTTP'\""
done
keep
strpass+="${S_MARIA_HTTP} @ ${_VM_IP_BASE}.1% - $_PWDHTTP\n"
_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SELECT, INSERT, UPDATE ON *.* TO '${S_MARIA_HTTP}'@'${_VM_IP_BASE}.10%' IDENTIFIED BY '$_PWDHTTP'\""


_echoT "----------  right percona"

_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SELECT, INSERT, UPDATE ON *.* TO percona@'localhost' IDENTIFIED BY '$_PWDPERCONA'\""


_echoT "----------  right innotop"

_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SUPER, RELOAD, PROCESS ON *.* to innotop@'${_VM_IP_BASE}.%' IDENTIFIED BY '$_PWDTOP'\""
_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SUPER, RELOAD, PROCESS ON *.* to innotop@'${_IPTHIS}' IDENTIFIED BY '$_PWDTOP'\""
_evalq "mysql -uroot -p$_PWDLOCAL -e \"CREATE USER innotop@'localhost'\""
_evalq "mysql -uroot -p$_PWDLOCAL -e \"GRANT SUPER, RELOAD, PROCESS ON *.* to innotop@'localhost'\""
strpass+="innotop @ '${_IPTHIS}%' - $_PWDTOP\n"
strpass+="innotop @ '${_VM_IP_BASE}.%' - $_PWDTOP\n"
strpass+="innotop @ 'localhost' - \n"


_echoT "----------  server stop"

_evalq systemctl stop mysql

<<keep
_echoT "----------  conf mysqld_safe_syslog.cnf"

file=/etc/mysql/conf.d/mysqld_safe_syslog.cnf
_keepcpts "$file"

# error_log
sed -i "s|^\(skip_log_error.*\)$|#\1|" "$file"
# syslog
#sed -i "s|^\(syslog.*\)$|#\1|" "$file"
keep

_echoT "----------  mariadb conf"

<<keep
_ask "Please give an adress to bind for mysql:
127.0.0.1 / give only a local access
$_VM_IP_BASE.$([ "$S_SERVER_TYPE" == vz ] && awk '{print $1}' < /proc/vz/veinfo)  give an access forothers containers & host
0.0.0.0   / give an access for the world\n"
bindip="$_ANSWER"
keep

file=/etc/mysql/conf.d/mariadb.cnf
_keepcpts "$file"

marialog="$S_PATH_LOG/mysql"
echo -e "# MariaDB-specific config file.
# Read by /etc/mysql/my.cnf

[client]
# Default is Latin1, if you need UTF-8 set this (also in server section)
default-character-set                = utf8

[mysqld_safe]
syslog
nice = 0

[mysqld]
#
# * Character sets
#
# Default is Latin1, if you need UTF-8 set all this (also in client section)
#
character_set_server                 = utf8
collation_server                     = utf8_unicode_ci

# default engine
default_storage_engine               = InnoDB

# type of access for server
bind-address                         = 0.0.0.0
max_allowed_packet                   = 64M

# resolve name
skip-name-resolve

# log
#log_error                           = $marialog/error.log
general_log_file                     = $marialog/general.log
slow_query_log_file                  = $marialog/slow.log
long_query_time                      = 1
log_slow_verbosity                   = explain
expire_logs_days                     = 30

log_warnings                         = 2
general_log                          = 0
slow_query_log                       = 1
log-queries-not-using-indexes        = 0

aria_log_file_size                   = 48M

# include configuration files
!includedir /etc/mysql/mariadb.conf.d/" > "$file"


file=/etc/mysql/conf.d/innodb.cnf
_keepcpts "$file"

echo -e "[mysqld]

# InnoDB tables

#innodb_data_home_dir                = /var/lib/mysql
#innodb_data_file_path               = ibdata1:12M:autoextend
#innodb_log_group_home_dir           = /var/lib/mysql
#innodb_file_per_table               = 1
innodb-defragment                    = 1

# You can set .._buffer_pool_size up to 50 - 80 %
# of RAM but beware of setting memory usage too high
#innodb_buffer_pool_size             = 128M

# Set .._log_file_size to 25 % of buffer pool size
#innodb_log_file_size                = 48M
#innodb_log_buffer_size              = 16M
#innodb_flush_log_at_trx_commit      = 1
#innodb_lock_wait_timeout            = 50" > "$file"


file="/etc/mysql/conf.d/mysqldump.cnf"
_keepcpts "$file"
_sed_maria1 max_allowed_packet 64M "$file"


_echoT "----------  percona conf"

echo "h=localhost,P=${S_MARIA_PORT},u=percona,p=${_PWDPERCONA}" > ~/.percona-toolkit.conf


_echoT "----------  logrotate conf"

file=/etc/logrotate.d/mysql-server
sed -i "s|^$S_PATH_LOG/mysql/mysql.log.*|$S_PATH_LOG/mysql/mysql.log\n$S_PATH_LOG/mysql/error.log\n$S_PATH_LOG/mysql/general.log\n$S_PATH_LOG/mysql/slow.log\n{|" "$file"
! grep -q delaycompress "$file" && sed -i "s/^\(\s\)\(compress.*\)$/\1\2\n\1delaycompress/" "$file"


_echoT "----------  delete old config files"

file="$S_PATH_LOG/mysql.log"; [ -f "$file" ] && rm "$file"
file="$S_PATH_LOG/mysql.err"; [ -f "$file" ] && rm "$file"


_echoT "----------  server start"

_evalq systemctl start mysql


# ctid to iptables rules
if [ "$S_SERVER_TYPE" == vz ]
then
	_echoT "----------  ctid to iptables rules"

	_echoI "To forward incoming traffic to this container with ctid='$ctidthis', please:"
	_echoI "${whiteb}Exit from container ${ctidthis} and edit file '${S_PATH_CONF}/firewall.conf'"
	_echoI "add a key to array '_PORTSIDVZ' for Ip prerouting"
	_askno "Confirm"
fi


_echoT "----------  show privileges"

# show users
_evalq "mysql -uroot -p$_PWDLOCAL -e \"FLUSH PRIVILEGES\""
_evalq "mysql -uroot -p$_PWDLOCAL -e \"SELECT user,host FROM mysql.user WHERE Host <> 'localhost'\""


_echoT "----------  Passwords"

echo -e $strpass|sort|column -t >&4


_echoT "----------  innotop conf"

_askno "${yellowb}PLease after, launch the following command to initialize innotop !\n${cclear}innotop -h localhost -u innotop --write\nConfirm"


########################################  RSYSLOG

str=" vz lxd "
if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ]; then

	_echoT "----------  rsyslog conf mariadb"

	FILECONF="/etc/rsyslog.d/vm-mariadb.conf"
	file=${S_PATH_INSTALL_CONF}/rsyslog/vm-mariadb.conf
	[ ! -f "$file" ] && _exite "Unable to find file: '$file'"

	_evalq cp -a "$file" "$FILECONF"
	_var_replace "$FILECONF"


	_echoT "----------  restart rsyslog"

	systemctl restart rsyslog.service
fi


####################################  END

_echoT "----------  conf clear pwd"
_evalq _clear_conf_pwd


_echoT "----------  end"
_evalq _partadd "$_PART" "$S_FILE_INSTALL_DONE"

_exit


<<commands

PWDLOCAL=

# show log variables
mysql -uroot -p$PWDLOCAL -e "show variables like '%log%';"

# show users
mysql -uroot -p$PWDLOCAL -e "SELECT User, Host FROM mysql.user"
mysql -h10.0.0.120 -uroothost -p$PWDLOCAL -e "SELECT User, Host FROM mysql.user"

# show grants
mysql -h 10.0.0.120 -u root -p$PWDLOCAL -e "SHOW GRANTS;"

# tables by engine
mysql -uroot -p"$PWDLOCAL" -e "SELECT ENGINE, COUNT(*) AS count FROM INFORMATION_SCHEMA.TABLES GROUP BY ENGINE;"

commands


<<keep
_echoT "----------  mtop install"

_eval "apt-get install -y libncurses5-dev make gcc libmariadbclient-dev"
_evalq "perl -MCPAN -e 'install Curses'"
_evalq "perl -MCPAN -e 'install Getopt::Long'"
_evalq "perl -MCPAN -e 'install Net::Domain'"
_evalq "perl -MCPAN -e 'install DBI'"
_evalq "perl -MCPAN -e 'install DBD::mysql'"

version='0.6.6'
_askno "${blueb}Give the version of mtop to download from 'http://downloads.sourceforge.net/project/mtop/mtop' ($version) ${cclear}"
version=${_ANSWER:-$version}
cd /tmp
wget -q "http://downloads.sourceforge.net/project/mtop/mtop/v$version/mtop-$version.tar.gz"
tar xzf "mtop-$version.tar.gz"
cd "mtop-$version"
_evalq "perl Makefile.PL"
_evalq "make"
_evalq "make install"

keep

<<keep

_echoT "----------  mytop install"

_eval "apt-get install -y mytop"


_echoT "----------  mytop conf"

file=/root/.mytop
echo "# Local configuration file for mytop
user=root
pass=$_PWDLOCAL
host=localhost
db=
delay=2
port=${S_MARIA_PORT}
socket=/var/run/mysqld/mysqld.sock
batchmode=0
header=1
color=1
idle=1" > "$file"
chmod 600 "$file"


---------------------------------------------------------------------------
my.cnf()

cp -p /etc/my.cnf /etc/my.cnf.$_DDATE
cat > /etc/my.cnf << EOF
# Example MariaDB config file for medium systems.
#
# This is for a system with little memory (32M - 64M) where MariaDB plays
# an important part, or systems up to 128M where MariaDB is used together with
# other programs (such as a web server)
#
# MariaDB programs look for option files in a set of
# locations which depend on the deployment platform.
# You can copy this option file to one of those
# locations. For information about these locations, do:
# 'my_print_defaults --help' and see what is printed under
# Default options are read from the following files in the given order:
# More information at: http://dev.mysql.com/doc/mysql/en/option-files.html
#
# In this file, you can use all long options that a program supports.
# If you want to know which options a program supports, run the program
# with the "--help" option.

# The following options will be passed to all MariaDB clients
[client]
#password= your_password
port= ${S_MARIA_PORT}
socket= /var/lib/mysql/mysql.sock

# Here follows entries for some specific programs

# The MariaDB server
[mysqld]
port= ${S_MARIA_PORT}
socket= /var/lib/mysql/mysql.sock
skip-external-locking
key_buffer_size = 16M
max_allowed_packet = 1M
table_open_cache = 64
sort_buffer_size = 512K
net_buffer_length = 8K
read_buffer_size = 256K
read_rnd_buffer_size = 512K
myisam_sort_buffer_size = 8M

# skip unuses engines
skip-archive
skip-blackhole
skip-federated
#skip-innodb

################  LOG
general-log-file = $S_PATH_LOG/mysql/general.log
slow-query-log-file = $S_PATH_LOG/mysql/slow.log
log-error = $S_PATH_LOG/mysql/error.log

general-log= 1
slow-query-log= 1
log-queries-not-using-indexes= 1
log-warnings= 1

#log-output= FILE

################ binary log
# log-bin=/var/lib/mysql/sgbd1-bin
# binlog-do-db=inforeg
# max_binlog_size=500M
# max_binlog_cache_size=1G

# Point the following paths to different dedicated disks
#tmpdir= /tmp/

# Don't listen on a TCP/IP port at all. This can be a security enhancement,
# if all processes that need to connect to mysqld run on the same host.
# All interaction with mysqld must be made via Unix sockets or named pipes.
# Note that using this option without enabling named pipes on Windows
# (via the "enable-named-pipe" option) will render mysqld useless!
#
#skip-networking

# Replication Master Server (default)
# binary logging is required for replication
#log-bin=mysql-bin

# binary logging format - mixed recommended
#binlog_format=mixed

# required unique id between 1 and 2^32 - 1
# defaults to 1 if master-host is not set
# but will not function as a master if omitted
# server-id= 1

# Replication Slave (comment out master section to use this)
#
# To configure this host as a replication slave, you can choose between
# two methods:
#
# 1) Use the CHANGE MASTER TO command (fully described in our manual) -
#    the syntax is:
#
#    CHANGE MASTER TO MASTER_HOST=<host>, MASTER_PORT=<port>,
#    MASTER_USER=<user>, MASTER_PASSWORD=<password> ;
#
#    where you replace <host>, <user>, <password> by quoted strings and
#    <port> by the master's port number (3306 by default).
#
#    Example:
#
#    CHANGE MASTER TO MASTER_HOST='125.564.12.1', MASTER_PORT=3306,
#    MASTER_USER='joe', MASTER_PASSWORD='secret';
#
# OR
#
# 2) Set the variables below. However, in case you choose this method, then
#    start replication for the first time (even unsuccessfully, for example
#    if you mistyped the password in master-password and the slave fails to
#    connect), the slave will create a master.info file, and any later
#    change in this file to the variables' values below will be ignored and
#    overridden by the content of the master.info file, unless you shutdown
#    the slave server, delete master.info and restart the slaver server.
#    For that reason, you may want to leave the lines below untouched
#    (commented) and instead use CHANGE MASTER TO (see above)
#
# required unique id between 2 and 2^32 - 1
# (and different from the master)
# defaults to 2 if master-host is set
# but will not function as a slave if omitted
#server-id       = 2
#
# The replication master for this slave - required
#master-host     =   <hostname>
#
# The username the slave will use for authentication when connecting
# to the master - required
#master-user     =   <username>
#
# The password the slave will authenticate with when connecting to
# the master - required
#master-password =   <password>
#
# The port the master is listening on.
# optional - defaults to 3306
#master-port     =  <port>
#
# binary logging - not required for slaves, but recommended
#log-bin=mysql-bin

# Uncomment the following if you are using InnoDB tables
#innodb_data_home_dir = /var/lib/mysql
#innodb_data_file_path = ibdata1:10M:autoextend
#innodb_log_group_home_dir = /var/lib/mysql
# You can set .._buffer_pool_size up to 50 - 80 %
# of RAM but beware of setting memory usage too high
#innodb_buffer_pool_size = 16M
#innodb_additional_mem_pool_size = 2M
# Set .._log_file_size to 25 % of buffer pool size
#innodb_log_file_size = 5M
#innodb_log_buffer_size = 8M
#innodb_flush_log_at_trx_commit = 1
#innodb_lock_wait_timeout = 50

[mysqldump]
quick
max_allowed_packet = 16M

[mysql]
no-auto-rehash
# Remove the next comment character if you are not familiar with SQL
#safe-updates

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 20M
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout
EOF

keep
