#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART#++}"
grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART#++}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm"
cts_all_mdb=$(lxc list -f csv -c n| grep '^mdb-'|xargs)
[ "${cts_all_mdb}" ] || _exite "unable to find mariadb container"

profiles_save=$(lxc profile list -f csv|grep "^save-mdb-.*,"|cut -d, -f1)
[ "${profiles_save}" ] || _exite "Unable to find a save profile (profile name starts with save-mdb-)"

fc_mdb_ms_master="${S_PATH_INSTALL_CONF}/mariadb/mariadb-master.cnf"
fc_mdb_ms_slave="${S_PATH_INSTALL_CONF}/mariadb/mariadb-slave.cnf"
fc_mdb_dump=${S_PATH_INSTALL_CONF}/mariadb/mariadb-dump-slave.sh

fc_mdb_ms_ha_front=${S_PATH_INSTALL_CONF}/haproxy/conf-available/41-fronts-mariadb
fc_mdb_ms_ha_back=${S_PATH_INSTALL_CONF}/haproxy/conf-available/61-backs-mariadb

_echot "------------------ required files"
_require ${fc_mdb_ms_master} ${fc_mdb_ms_slave} ${fc_mdb_dump}
_require ${fc_mdb_ms_ha_front} ${fc_mdb_ms_ha_back}

#_askyn "To install a master/slave mariadb cluster, you need to have 2 available instances of mariadb?" && [ ${_ANSWER} = n ] && _exit 0

########################  DATA

_echot "------------------  data ct"

[ -z ${_MDB_MS_CT_NAME+x} ] && { anstmp=mdb-${S_DOM_FQDN//./-}; _askno "Base name of the mariadb container to build (${anstmp})"; _MDB_MS_CT_NAME="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_MS_CT_NUM+x} ] && { anstmp=2 && _askno "Number of containers to build (${anstmp})"; _MDB_MS_CT_NUM="${_ANSWER:-$anstmp}"; }

[ -z ${_MDB_MS_PROFILE_SAVE+x} ] && { _menu "Select a save profile" ${profiles_save}; _MDB_MS_PROFILE_SAVE="${_ANSWER}"; }

[ -z "${_MDB_MS_CT_MASTER}" ] && { cts_all_mdb=" ${cts_all_mdb} "
	_menu "Select one available mariadb container for MASTER " ${cts_all_mdb}
	_MDB_MS_CT_MASTER=${_ANSWER}; }

# slave
[ -z "${_MDB_MS_CT_SLAVES}" ] && { cts_all_mdb="${cts_all_mdb/ ${_MDB_MS_CT_MASTER} / }"
	[ "${cts_all_mdb}" ] && _menu "Select one available mariadb container for SLAVE" ${cts_all_mdb} || _exite "Unable to find container maria-* to use"
	_MDB_MS_CT_SLAVES=${_ANSWER}; }

if [ -z "${_MDB_MS_PWD_HOST+x}" ]; then
	ok=false; while ! ${ok}; do
		_askno "Password for user: roothost"
		ok=true
		for ct_name in ${_MDB_MS_CT_MASTER} ${_MDB_MS_CT_SLAVES}; do
			mysql -s -h${ct_name} -uroothost -p${_MDB_MS_PWD_HOST} -e '' || { _echoe "Unable to connect to: ${ct_name} with pwd: ${_ANSWER}"; ok=false; }
		done
	done
	_MDB_MS_PWD_HOST=${_ANSWER}
else
	# check password
	for ct_name in ${_MDB_MS_CT_MASTER} ${_MDB_MS_CT_SLAVES}; do
		mysql -s -h${ct_name} -uroothost -p${_MDB_MS_PWD_HOST} -e '' || _exite "Unable to connect to: ${ct_name} with pwd: ${_ANSWER}"
	done
fi

_echot "------------------  data"

[ -z ${_MDB_MS_PWD_REPLIC+x} ] && { anstmp=`_pwd`; _askno "Password for replication access (${anstmp})"; _MDB_MS_PWD_REPLIC="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_MS_PWD_DUMP+x} ] && { anstmp=`_pwd`; _askno "Password for dump access (${anstmp})"; _MDB_MS_PWD_DUMP="${_ANSWER:-${anstmp}}"; }

[ -z ${_MDB_MS_PROXY+x} ] && { anstmp=${S_DOM_FQDN}; _askno "Prefix for proxy name (${anstmp})"; _MDB_MS_PROXY="${_ANSWER:-$anstmp}"; }
_confset _MDB_MS_PROXY "${_MDB_MS_PROXY}"

[ -z ${_MDB_MS_MAX_BIN_SIZE+x} ] && { anstmp=256M; _askno "max_binlog_size (${anstmp})"; _MDB_MS_MAX_BIN_SIZE="${_ANSWER:-$anstmp}"; }

[ -z ${_MDB_MS_EXPIRE_LOGS_DAYS+x} ] && { anstmp=30; _askno "expire_logs_days (${anstmp})"; _MDB_MS_EXPIRE_LOGS_DAYS="${_ANSWER:-$anstmp}"; }

[ -z ${_MDB_MS_MASTER_ID+x} ] && { anstmp=1; _askno "the server id for master (${anstmp})"; _MDB_MS_MASTER_ID="${_ANSWER:-$anstmp}"; }

[ -z ${_MDB_MS_SLAVE_ID+x} ] && { anstmp=100; _askno "the server id for slave (${anstmp})"; _MDB_MS_SLAVE_ID="${_ANSWER:-$anstmp}"; }

[ -z ${_MDB_MS_DB_IGNORE+x} ] && { anstmp="information_schema mysql performance_schema sys"; _askno "database names to IGNORE for replication (${anstmp})"; _MDB_MS_DB_IGNORE="${_ANSWER:-$anstmp}"; }

[ -z ${_MDB_MS_DB_DO+x} ] && { anstmp=; _askno "database names to USE for replication (set ignored db to null) (${anstmp})"; 	_MDB_MS_DB_DO="${_ANSWER:-$anstmp}"; }

strpass=

########################  CONFIGURATION

# load configuration file
. ${S_FILE_INSTALL_CONF}

########################  CONF MASTER

_CT_NAME=${_MDB_MS_CT_MASTER}
_echot "\n++++++++++++++++++  ${_CT_NAME}"

#  METADATA
_echot "------------------  metadata"
_lxc_meta_add ${_CT_NAME} apps mariadb-master

if lxc list -f csv -c n status=Stopped | grep -q ^${_CT_NAME}$; then
	_echot "------------------  ${_CT_NAME} start"
	_eval lxc start ${_CT_NAME}
fi

_echot "------------------  ${_CT_NAME} conf"
file=${_MDB_PATH_CONF}/${fc_mdb_ms_master##*/}
_lxc_exec ${_CT_NAME} "[ -f ${file} ] && cp -a ${file} ${file}.${_SDATE}"
_eval lxc file push --uid 0 --gid 0 -q ${fc_mdb_ms_master} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} mariadb

# if [ "${_MDB_MS_DB_DO}" ]; then
# 	_echot "------------------  ${_CT_NAME} db-do"
# 	str="$(echo "binlog-do-db=${_MDB_MS_DB_DO// / binlog-do-db=}"|tr ' ' '\n')"
# 	_lxc_exec ${_CT_NAME} "sed -i '/^binlog-do-db/ d' ${file}"
# 	_lxc_exec ${_CT_NAME} "sed -i '/^#binlog-do-db/ a${str}' ${file}"
# elif [ "${_MDB_MS_DB_IGNORE}" ]; then
# 	_echot "------------------  ${_CT_NAME} db-ignore"
# 	str="$(echo "binlog-ignore-db=${_MDB_MS_DB_IGNORE// /\\ binlog-ignore-db=}"|tr ' ' '\n')"
# 	_lxc_exec ${_CT_NAME} "sed -i '/^binlog-ignore-db/ d' ${file}"
# 	_lxc_exec ${_CT_NAME} "sed -i '/^#binlog-ignore-db/ a${str}' ${file}"
# fi

_echot "------------------  ${_CT_NAME} restart"
_lxc_exec ${_CT_NAME} "rc-service mariadb restart"

_echot "------------------  ${_CT_NAME} replic"
for ct_slave in ${_MDB_MS_CT_SLAVES}; do
	cmd="CREATE OR REPLACE USER 'replic'@'${ct_slave}.lxd' IDENTIFIED BY '${_MDB_MS_PWD_REPLIC}';"
	cmds+="GRANT REPLICATION SLAVE ON *.* TO 'replic'@'${ct_slave}.lxd';"
	strpass+="replic @ ${ct_slave}.lxd - ${_MDB_MS_PWD_REPLIC}\n"
done
_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"${cmd}\""
_eval "mysql -s -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"SELECT user,host FROM mysql.user WHERE user like 'replic';\""
_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"FLUSH PRIVILEGES;\""

_echot "------------------  ${_CT_NAME} lock"
_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"FLUSH TABLES WITH READ LOCK;\""
_eval "mysql -s -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"SHOW MASTER STATUS;\""
_echot "------------------  ${_CT_NAME} pos"
master_file=$(mysql -s -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e "SHOW MASTER STATUS;"|tail -n1|cut -f1)
master_pos=$(mysql -s -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e "SHOW MASTER STATUS;"|tail -n1|cut -f2)

_echot "------------------  ${_CT_NAME} backup"
[ -z "${_MDB_MS_INSTALL_AUTO}" ] && _askno "Backup data from master & valid to continue"

_echot "------------------  ${_CT_NAME} unlock"
_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"UNLOCK TABLES;\""

########################  CONF SLAVE

for _CT_NAME in ${_MDB_MS_CT_SLAVES}; do
	_echot "\n++++++++++++++++++  ${_CT_NAME}"

	#  PROFILE
	if ! lxc list ${_CT_NAME} --format=json | jq -r '.[].profiles[]' | grep -q "^${_MDB_MS_PROFILE_SAVE}$"; then
		_echot "------------------  profile ${_MDB_MS_PROFILE_SAVE}"
		_eval lxc profile add ${_CT_NAME} ${_MDB_MS_PROFILE_SAVE}
	fi

	#  METADATA
	_echot "------------------  metadata"
	_lxc_meta_add ${_CT_NAME} apps ${_MDB_MS_PROFILE_SAVE}

	if lxc list -f csv -c n status=Stopped | grep -q ^${_CT_NAME}$; then
		_echot "------------------  ${_CT_NAME} start"
		_eval lxc start ${_CT_NAME}
	fi

	_echot "------------------  ${_CT_NAME} restore"
	[ -z "${_MDB_MS_INSTALL_AUTO}" ] && _askno "Restore backuped data from master to slave & continue"

	_echot "------------------  ${_CT_NAME} grant dump"
	cmd="DROP USER IF EXISTS 'dump'@'localhost';"
	cmd+="GRANT SELECT, RELOAD, SUPER, LOCK TABLES, SHOW VIEW, TRIGGER ON *.* TO 'dump'@'localhost' IDENTIFIED BY '${_MDB_MS_PWD_DUMP};"
	strpass+="dump @ localhost - ${_MDB_MS_PWD_DUMP}\n"
	_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"${cmd}\""

	_echot "------------------  ${_CT_NAME} conf"
	file=${_MDB_PATH_CONF}/${fc_mdb_ms_slave##*/}
	_lxc_exec ${_CT_NAME} "[ -f ${file} ] && cp -a ${file} ${file}.${_SDATE}"
	_eval lxc file push --uid 0 --gid 0 -q ${fc_mdb_ms_slave} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} mariadb

	if [ "${_MDB_MS_DB_DO}" ]; then
		_echot "------------------  ${_CT_NAME} db-do"
		str="$(echo "binlog-do-db=${_MDB_MS_DB_DO// / binlog-do-db=}"|tr ' ' '\n')"
		_lxc_exec ${_CT_NAME} "sed -i '/^binlog-do-db/ d' ${file}"
		_lxc_exec ${_CT_NAME} "sed -i '/^#binlog-do-db/ a${str}' ${file}"
		str="$(echo "replicate-do-db=${_MDB_MS_DB_DO// / replicate-do-db=}"|tr ' ' '\n')"
		_lxc_exec ${_CT_NAME} "sed -i '/^replicate-do-db/ d' ${file}"
		_lxc_exec ${_CT_NAME} "sed -i '/^#replicate-do-db/ a${str}' ${file}"
	elif [ "${_MDB_MS_DB_IGNORE}" ]; then
		_echot "------------------  ${_CT_NAME} db-ignore"
		str="$(echo "binlog-ignore-db=${_MDB_MS_DB_IGNORE// /\\ binlog-ignore-db=}"|tr ' ' '\n')"
		_lxc_exec ${_CT_NAME} "sed -i '/^binlog-ignore-db/ d' ${file}"
		_lxc_exec ${_CT_NAME} "sed -i '/^#binlog-ignore-db/ a${str}' ${file}"
		str="$(echo "replicate-ignore-db=${_MDB_MS_DB_IGNORE// /\\ replicate-ignore-db=}"|tr ' ' '\n')"
		_lxc_exec ${_CT_NAME} "sed -i '/^replicate-ignore-db/ d' ${file}"
		_lxc_exec ${_CT_NAME} "sed -i '/^#replicate-ignore-db/ a${str}' ${file}"
	fi

	_echot "------------------  ${_CT_NAME} mariadb restart"
	_lxc_exec ${_CT_NAME} "rc-service mariadb restart"

	_echot "------------------  ${_CT_NAME} change master"
	#_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"SET default_master_connection = '${_MDB_MS_CT_MASTER}';\""
	_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"STOP SLAVE;\""

	cmd="CHANGE MASTER TO
	MASTER_HOST='${_MDB_MS_CT_MASTER}',
	MASTER_USER='replic',
	MASTER_PASSWORD='${_MDB_MS_PWD_REPLIC}',
	MASTER_PORT=${S_DB_MARIA_PORT_RW},
	MASTER_LOG_FILE='${master_file}',
	MASTER_LOG_POS=${master_pos},
	MASTER_CONNECT_RETRY=10;"
	_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"${cmd}\""

	_echot "------------------  ${_CT_NAME} start slave"
	_eval "mysql -h${_CT_NAME} -uroothost -p${_MDB_MS_PWD_HOST} -e \"START SLAVE;\""

	_echot "------------------  increment id"
	_MDB_MS_SLAVE_ID=$((${_MDB_MS_SLAVE_ID} + 1))

	_echot "------------------  script dump"
	file=/usr/local/bin/${fc_mdb_dump##*/}
	_eval lxc file push --uid 0 --gid 0 -q ${fc_mdb_dump} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} script
	_lxc_exec ${_CT_NAME} "chmod 500 ${file}"

	_echot "------------------  script cron"
	file=/etc/crontabs/root
	_lxc_exec ${_CT_NAME} "[ -f ${file} ] && cp -a ${file} ${file}.${_SDATE}"
	_lxc_exec ${_CT_NAME} "sed -i '\|/usr/local/bin/${fc_mdb_dump##*/}|d' ${file}"
	_lxc_exec ${_CT_NAME} "echo -e '0\t1\t*\t*\t*\t/usr/local/bin/${fc_mdb_dump##*/} ${_MDB_MS_PWD_DUMP} /save/mariadb' >> ${file}"

	_echot "------------------  crond restart"
	_lxc_exec_e ${_CT_NAME} "rc-service crond restart"

done

########################  HAPROXY

ct_proxy=${S_SERVICE[proxy]}

_echot "------------------  haproxy conf"
path=/etc/haproxy
for file in ${fc_mdb_ms_ha_front} ${fc_mdb_ms_ha_back}; do
	_eval lxc file push --uid 0 --gid 0 -q ${file} ${ct_proxy}${path}/conf-available/${file##*/}
	file=${file##*/}
	_lxc_exec ${ct_proxy} "[ -h ${path}/conf-enabled/${file} ] || ln -s ${path}/conf-available/${file}  ${path}/conf-enabled/${file}"
done
_lxc_var_replace ${ct_proxy} /etc/haproxy/conf-available mariadb

_echot "------------------  haproxy slaves"
file=${path}/conf-available/${fc_mdb_ms_ha_back##*/}
for ct_name in ${_MDB_MS_CT_SLAVES}; do
	str="\\\\tserver ${ct_name} ${ct_name}:${S_DB_MARIA_PORT_RW}"
	_lxc_exec ${ct_proxy} "sed -i '/^\s*server ${ct_name}/d' ${file}"
	_lxc_exec ${ct_proxy} "sed -i '/#mbd_ms_slaves_end/ i${str}' ${file}"
done

_echot "------------------  haproxy reload"
_lxc_exec_e ${ct_proxy} "rc-service haproxy reload"

########################  SHOW

_echot "------------------  status master"
_eval "mysql -h${_MDB_MS_CT_MASTER} -uroothost -p${_MDB_MS_PWD_HOST} -e \"SHOW MASTER STATUS;\""

_echot "------------------  status slave"
for ct_name in ${_MDB_MS_CT_SLAVES}; do
	_eval "mysql -h${ct_name} -uroothost -p${_MDB_MS_PWD_HOST} -e \"SHOW SLAVE STATUS \G;\" | head -n19"
done

_echot "------------------  proxy show replic"
_echoa "Wait 4s for proxy updating"
_eval sleep 4
_eval "mysql -h${S_SERVICE[proxy]} -uroothost -p${_MDB_MS_PWD_HOST} -e \"SELECT user,host FROM mysql.user WHERE user like 'replic';\""

_echot "------------------  show passwords"
_echoA "Keep this passwords:"
_echo "${strpass%\\n}"

_echot "------------------  show passwords"
_echow "Do not forget to setup synchronization from backup server to database backup"

########################  PUBLISH

for ct_name in ${_MDB_MS_CT_MASTER} ${_MDB_MS_CT_SLAVES}; do
	_echot "------------------  publish ${ct_name}"
	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
