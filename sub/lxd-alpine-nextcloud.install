#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART}"

grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm"
img_all_www=`lxc image list -f csv -c l| grep '^wap-'`
[ "${img_all_www}" ] || _exite "Unable to find a 'www' image container"

profiles_all_php=`lxc profile list -f csv|grep "^php.*,"|cut -d, -f1`
[ -z "${profiles_all_php}" ] && _exite "Unable to find a conatiner with 'php' profile"

cts_all_maria=`lxc list -f json | jq -r '.[] | select(.profiles | any(contains("mdb-"))).name'`
[ -z "${cts_all_maria}" ] && _exite "Unable to find a container with 'mariadb' profile"


file_conf=${S_PATH_INSTALL_CONF}/php/nextcloud-config.php
file_site=${S_PATH_INSTALL_CONF}/apache2/sub-admin.conf

_echot "------------------ required files"
_require ${file_conf} ${file_site}

########################  DATA

_echot "------------------  data domain"

anstmp=${S_DOMAIN_FQDN} && _askno "Domain name to use (${anstmp})"
_DOMAIN_FQDN="${_ANSWER:-${anstmp}}"

anstmp=cloud && _askno "Give the new subdomain for admin (${anstmp})"
_SUBDOMAIN="${_ANSWER:-${anstmp}}"

anstmp=wap-${_SUBDOMAIN}-${S_DOMAIN_NAME//./-} && _askno "Base name of containers to build (${anstmp})"
ct_base="${_ANSWER:-${anstmp}}"

anstmp=1 && _askno "Number of containers to build (${anstmp})"
ct_num="${_ANSWER:-${anstmp}}"

profiles=`lxc profile list -f csv|grep "^cloud.*,"|cut -d, -f1`
[ "${profiles}" ] && _menu "Select an available cloud profile to apply or none" none ${profiles} || _ANSWER=
profile_cloud="${_ANSWER/none/}" && profile_cloud_exist=${profile_cloud}
[ -z "${profile_cloud_exist}" ] && anstmp=cloud.${_DOMAIN_FQDN} && _askno "Name of the new  cloud profile (${anstmp})" && profile_cloud="${_ANSWER:-${anstmp}}"

_echot "------------------  data www"

_menu "Select one available image container for www service" ${img_all_www}
ct_www=${_ANSWER}

profiles=`lxc profile list -f csv|grep "^www.*,"|cut -d, -f1`
[ "${profiles}" ] && _menu "Select an available www profile to apply or none" none ${profiles} || _ANSWER=
profile_www="${_ANSWER/none/}" && profile_www_exist=${profile_www}
[ -z "${profile_www_exist}" ] && anstmp=www-${_SUBDOMAIN}.${_DOMAIN_FQDN} && _askno "Name of the new  www profile (${anstmp})" && profile_www="${_ANSWER:-${anstmp}}"

_echot "------------------  data php"

_menu "Select an available PHP profile to apply or none" ${profiles_all_php} || _ANSWER=
profile_php="${_ANSWER/none/}"

_echot "------------------  data mariadb"

_menu "Select mariadb container to use" ${cts_all_maria}
ct_maria=${_ANSWER}

ok=false; while ! ${ok}; do
	_askno "Password for user: 'roothost' for '${ct_maria}'"
	[ "${_ANSWER}" ] && mysql -s -h${ct_maria} -uroothost -p${_ANSWER} -e '' && ok=true || _echo "Unable to connect to: ${ct_maria}"
done
pwd_maria=${_ANSWER}

# app_version & file_app
ok=false; while ! ${ok}; do
	anstmp=22.1.1 && _askno "version of Nextcloud to download (${anstmp})"
	app_version="${_ANSWER:-${anstmp}}"
	file_app=nextcloud-${app_version}.tar.bz2
	file_app_tmp=/tmp/${file_app}
	uri=https://download.nextcloud.com/server/releases/${file_app}
	if ! [ -f ${file_app_tmp} ] || [ `ls -s ${file_app_tmp}|cut -d' ' -f1` = 0 ]; then
		_echot "------------------  wget ${file_app}"
		wget -q ${uri} -O ${file_app_tmp} && ok=true || _echoe "Unable to get version: ${uri}"
	else
		ok=true
	fi
done

_CT_NAME=${ct_base}-1

_PATH_DOMAIN=${S_VM_PATH_SHARE}/www/${_SUBDOMAIN}.${_DOMAIN_FQDN}
_APP_URI=https://${_SUBDOMAIN}.${_DOMAIN_FQDN}
_APP_DB_PORT=${S_DB_MARIA_PORT}
_APP_DB_NAME=nextcloud
_APP_DB_USER=nextcloud
_APP_DB_PWD=`_pwd`
_APP_BLOWFISH=`_pwd32`
_APP_PATH_UP=${S_VM_PATH_SHARE}/php/up
_APP_PATH_DW=${S_VM_PATH_SHARE}/php/down

_APP_DATA_DIR=${S_VM_PATH_SHARE}/cloud

cts_php=`for i in $(seq 1 ${ct_num}); do echo ${ct_base}-${i}; done`
path_sites=/etc/apache2/sites


########################  STORAGE

if [ -z "${profile_cloud_exist}" ]; then

	if [ "${S_STORAGE_DRIVER}" = zfs ]; then

		name=cloud
		_echot "------------------  zfs ${name}"
		path=${S_HOST_PATH}/${name}
		path_zfs=${_ZFS_ROOT}${path}
		opts="-o mountpoint=${path} -o compression=lz4 -o  acltype=posixacl"
		_evalr zfs list ${path_zfs} >/dev/null 2>&1 || _evalr zfs create ${opts} ${path_zfs}

		name=${_DOMAIN_FQDN}
		_echot "------------------  zfs ${name}"
		path=${S_HOST_PATH}/cloud/${name}
		path_zfs=${_ZFS_ROOT}${path}

		# rename
		if zfs list ${path_zfs} >/dev/null 2>&1; then
		 	_echot "------------------  unmount  ${path_zfs}"
		 	_evalr zfs unmount ${path_zfs} || _exite "Unable to unmount ${path_zfs}\nUnbind container using it"
			_echoI "------------------  zfs backup ${path_zfs} to ${path_zfs}.${_SDATE}"
		 	_evalr zfs rename ${path_zfs} ${path_zfs}.${_SDATE}
		 fi

		_echot "------------------  zfs create ${path_zfs}"
		_evalr zfs create -o mountpoint=${path} ${path_zfs}


	elif [ "${S_STORAGE_DRIVER}" = btrfs ]; then

		name=cloud
		_echot "------------------  btrfs ${name}"
		path=${S_HOST_PATH}/${name}
		_evalr ls -1 ${path} >/dev/null 2>&1 || _evalr btrfs subvolume create ${path}

		name=${_DOMAIN_FQDN}
		_echot "------------------  btrfs ${name}"
		# rename
		path=${S_HOST_PATH}/cloud/${name}
		if _evalr ls -1 ${path} >/dev/null 2>&1; then
			_echoI "------------------  mv ${path} to ${path}.${_SDATE}"
		 	_evalr mv ${path} ${path}.${_SDATE}
		 fi

		_echot "------------------  btrfs create ${path}"
		_evalr btrfs subvolume create ${path}

	else
		_exite "This part have to be implemented"
	fi

	_echot "------------------  rights ${name}"
	_evalr chown ${_LXD_UID}:${_LXD_UID} ${S_HOST_PATH}/cloud/${_DOMAIN_FQDN}
	_evalr setfacl -Rm u:${_LXD_UID}:rwx ${S_HOST_PATH}/cloud/${_DOMAIN_FQDN}
	_evalr setfacl -Rm d:u:${_LXD_UID}:rwx ${S_HOST_PATH}/cloud/${_DOMAIN_FQDN}
fi

########################  PROFILE

# www
if [ -z "${profile_www_exist}" ]; then

	profile=${profile_www}
	_echot "------------------  profile ${profile}"

	lxc profile list -f csv|grep -q "^${profile}," && _eval lxc profile rename ${profile} ${profile}.${_SDATE}
	_eval lxc profile create ${profile}

	path=${S_HOST_PATH_SHARE}/www/${_SUBDOMAIN}.${_DOMAIN_FQDN}
	path_ct=${_PATH_DOMAIN}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
fi

if [ -z "${profile_cloud_exist}" ]; then

	profile=${profile_cloud}
	_echot "------------------  profile ${profile}"

	lxc profile list -f csv|grep -q "^${profile}," && _eval lxc profile rename ${profile} ${profile}.${_SDATE}
	_eval lxc profile create ${profile}

	path=${S_HOST_PATH}/cloud/${_DOMAIN_FQDN}
	path_ct=${_APP_DATA_DIR}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
fi

########################  INIT

_echot "------------------  init"

if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_echot "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
fi
_eval lxc init ${ct_www} ${_CT_NAME} -p default -p global -p ${profile_www}  -p ${profile_php} -p ${profile_cloud}

#############  START

_echot "------------------  ${_CT_NAME} start"
lxc list -f csv -c n status=Stopped | grep -q ^${_CT_NAME}$ && _eval lxc start ${_CT_NAME}

#############  WWW

files=`_lxc_exec ${_CT_NAME} "ls ${path_sites}/*.conf"`
_menua  "Select apache configuration to desactivate" ${files}
for file in ${_ANSWER}; do
	_lxc_exec ${_CT_NAME} "mv ${file} ${file}.keep"
done

#############  SITE APP

_echoT "\n==========  php ${_CT_NAME}"

domain=${_SUBDOMAIN}.${_DOMAIN_FQDN}
_echot "------------------  ${domain} path"

file=${path_sites}/${_SUBDOMAIN}.conf
_eval lxc file push -q ${file_site} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} apache
_lxc_exec ${_CT_NAME} "sed -i 's|^\(\s*\)#\?\(SetEnv PHP_ADMIN_VALUE .session.gc_maxlifetime =\).*$|\1\2 3600\"|' ${file}"

_echot "------------------  ${domain} file"
path=${_PATH_DOMAIN}/${file_app%.tar.bz2}
_lxc_exec ${_CT_NAME} "[ -d ${path} ] && mv ${path} ${path}.${_SDATE}"

path=${_PATH_DOMAIN}
_eval lxc file push -q ${file_app_tmp} ${_CT_NAME}/${path}/
_lxc_exec ${_CT_NAME} "tar xjf ${path}/${file_app} -C ${path}" || _exite "Unable to decompress file: ${file}"
_lxc_exec ${_CT_NAME} "[ -d ${path}/nextcloud ] && mv ${path}/nextcloud ${path}/${file_app%.tar.bz2}"

_lxc_exec ${_CT_NAME} "[ -h ${path}/${_SUBDOMAIN} ] && rm ${path}/${_SUBDOMAIN}"
_lxc_exec ${_CT_NAME} "cd ${path} && ln -sv ${file_app%.tar.bz2} ${_SUBDOMAIN}"
_lxc_exec ${_CT_NAME} "[ -h ${path}/nextcloud ] && rm ${path}/nextcloud"
_lxc_exec ${_CT_NAME} "cd ${path} && ln -sv ${file_app%.tar.bz2} nextcloud"


########################  RIGHTS

_echot "------------------  rights"
_lxc_exec ${_CT_NAME} "chown apache:apache -R ${_APA_PATH_WWW}"
_lxc_exec ${_CT_NAME} "chown apache:apache -R ${_PATH_DOMAIN}/*"


#############  RESTART

_echot "------------------  ${_PHP_SERVICE} restart"
_lxc_exec ${_CT_NAME} "rc-service ${_PHP_SERVICE} restart"

_echot "------------------  apache2 restart"
_lxc_exec ${_CT_NAME} "rc-service apache2 restart"


########################  MARIADB

_echoT "\n==========  mariadb ${ct_maria}"

_echot "------------------  ${ct_maria} db create"
cmd="CREATE DATABASE IF NOT EXISTS ${_APP_DB_NAME};"
_eval "mysql -h${ct_maria} -uroothost -p${pwd_maria} -e \"${cmd}\""

_echot "------------------  ${ct_maria} ${_APP_DB_USER} strpass"
file=${S_PATH_CONF}/mariadb
str="${_APP_DB_USER} @ ${_CT_NAME}.lxd - ${_APP_DB_PWD}"
strpass+="${str}\n"
cmd="grep -q ^${_APP_DB_USER} ${file} && sed -i '/^${_APP_DB_USER}/c ${str}'  ${file} || sed -i '\$a ${str}' ${file}"
_lxc_exec ${ct_maria} "${cmd}"

for ct_php in ${cts_php}; do

	_echot "------------------  ${ct_maria} ${_APP_DB_USER} grant"
	cmd="GRANT USAGE ON *.* TO '${_APP_DB_USER}'@'${ct_php}.lxd' IDENTIFIED BY '${_APP_DB_PWD}';"
	_eval "mysql -h${ct_maria} -uroothost -p${pwd_maria} -e \"${cmd}\""
	cmd="GRANT ALL PRIVILEGES ON ${_APP_DB_NAME}.* TO '${_APP_DB_USER}'@'${ct_php}.lxd';"
	_eval "mysql -h${ct_maria} -uroothost -p${pwd_maria} -e \"${cmd}\""

	_echot "------------------  ${ct_maria} ${_APP_DB_USER} strpass"
	file=${S_PATH_CONF}/mariadb
	str="${_APP_DB_USER} @ ${ct_php}.lxd - ${_APP_DB_PWD}"
	strpass+="${str}\n"
	cmd="grep -q ^${_APP_DB_USER} ${file} && sed -i '/^${_APP_DB_USER}/c ${str}'  ${file} || sed -i '\$a ${str}' ${file}"
	_lxc_exec ${ct_maria} "${cmd}"

done





########################  COPY

for i in `seq 2 ${ct_num}`; do
	ct_name=${ct_base}-${i}
	_echot "---------- build ${ct_name}"

	if lxc list -f csv -c n | grep -q ^${ct_name}$; then
		lxc list -f csv -c n status=Running| grep -q ^${ct_name}$ && _eval lxc stop ${ct_name}
		_echo "---------- move ${ct_name} to ${ct_name}-${_SDATE}"
		_eval lxc rename ${ct_name} ${ct_name}-${_SDATE}
	fi
	_eval lxc copy ${_CT_NAME} ${ct_name}
	_eval lxc start ${ct_name}
done


########################  SHOW

_echot "------------------  show privileges ${ct_maria}"
_eval "mysql -h${ct_maria} -uroothost -p${pwd_maria} -e \"SELECT user,host FROM mysql.user WHERE user like '${_APP_DB_USER}';\""

_echot "------------------  show passwords"
_echoI "Keep this passwords:"
_echoW "${strpass%\\n}"


########################  HAPROXY

_echoI "\nAdjust backend for domain: ${_SUBDOMAIN}.${_DOMAIN_FQDN} with:"
_echo "${cts_php}"


########################  PUBLISH

for ct_name in ${ct_php} ${ct_maria}; do
	_echot "------------------  publish ${ct_name}"

	lxc image list -f csv -c l | grep -q ^${ct_name}$ && _eval lxc image alias rename ${ct_name} ${ct_name}-${_SDATE}
	_eval lxc publish --force ${ct_name} --alias ${ct_name}
done


########################  END

_echoT "===================== ${_PART} end"
#_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
