#!/bin/bash
#
# write by Aguy

<<COMMANDS
COMMANDS


_echoT "\n==========================================  $S_RELEASE $_PART"


fileconf_haproxy="${S_PATH_INSTALL_CONF}/rsyslog/49-haproxy.conf"
fileconf_haconf="${S_PATH_INSTALL_CONF}/bash_completion/haconf"

_echoT "---------- file required"
files="$fileconf_haproxy $fileconf_haconf"
for file in $files; do ! [ -f "$file" ] && _exite "Unable to find file: '$file'"; done


####################################  FUNCTION


####################################  MAIN

_echoT "------------------ fileconf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

[ -z ${_BACKPORT+x} ] && anstmp="y" && _askno "Use debian Backport ($anstmp)" && _BACKPORT="${_ANSWER:-$anstmp}" && _BACKPORT="${_BACKPORT/n/}" && _confset _BACKPORT "$_BACKPORT"

[ -z ${_MYDOMAIN_NAME+x} ] && anstmp="$S_DOMAIN_NAME" && _askno "Enter a domain name without fqdn ($anstmp)" && _MYDOMAIN_NAME="${_ANSWER:-$anstmp}" && _confset _MYDOMAIN_NAME "$_MYDOMAIN_NAME"

[ -z ${_MYDOMAIN_FQDN+x} ] && anstmp="$S_DOMAIN_FQDN" && _askno "Enter a fqdn domain name ($anstmp)" && _MYDOMAIN_FQDN="${_ANSWER:-$anstmp}" && _confset _MYDOMAIN_FQDN "$_MYDOMAIN_FQDN"

[ -z ${_DOMAIN_2_NAME+x} ] && anstmp="" && _askno "Enter a second domain name without fqdn ($anstmp)" && _DOMAIN_2_NAME="${_ANSWER:-$anstmp}" && _confset _DOMAIN_2_NAME "$_DOMAIN_2_NAME"

[ -z ${_DOMAIN_2_FQDN+x} ] && anstmp="" && _askno "Enter a second fqdn domain name ($anstmp)" && _DOMAIN_2_FQDN="${_ANSWER:-$anstmp}" && _confset _DOMAIN_2_FQDN "$_DOMAIN_2_FQDN"

[ -z ${_ACCESS_USER+x} ] && anstmp="admin" && _askno "Enter a name for stats access ($anstmp)" && _ACCESS_USER="${_ANSWER:-$anstmp}" && _confset _ACCESS_USER "$_ACCESS_USER"

[ -z ${_ACCESS_PWD+x} ] && anstmp="$(_pwd)" && _askno "Enter a domain name ($anstmp)" && _ACCESS_PWD="${_ANSWER:-$anstmp}" && _confset _ACCESS_PWD "$_ACCESS_PWD"

[ -z ${_ACCESS_URI+x} ] && anstmp="/haproxy-stats" && _askno "Enter a domain name ($anstmp)" && _ACCESS_URI="${_ANSWER:-$anstmp}" && _confset _ACCESS_URI "$_ACCESS_URI"


# !! WAIT DEBIAN9 STRETCH BACKPORT TO INSTALL CERTBOT > 0.20 for wildcard !!
# !! & HAPROXY > 1.8 for certbot auto-update !!

#https://www.haproxy.com/blog/lets-encrypt-acme2-for-haproxy/


[ -z ${_CERTBOT+x} ] && anstmp="y" && _askno "Do you wante to install Cerbot? ($anstmp)" && _CERTBOT="${_ANSWER:-$anstmp}" && _CERTBOT="${_CERTBOT/n/}" && _confset _CERTBOT "$_CERTBOT"


####################################  HAPROXY

_echoT "----------  install"

if [ "$_BACKPORT" ]; then

    file_bp="/etc/apt/sources.list.d/backports.list"
    _evalq "echo 'deb http://httpredir.debian.org/debian jessie-backports main' > $file_bp"

    FILE_HA="/etc/apt/sources.list.d/haproxy.list"
    _evalq "curl https://haproxy.debian.net/bernat.debian.org.gpg | apt-key add -"
    _evalq "echo 'deb http://haproxy.debian.net jessie-backports-1.8 main' > $FILE_HA"

    _evalq apt-get update
    _eval "apt-get install -y haproxy=1.8.\* haproxyctl hatop certbot -t jessie-backports"


    _echoT "----------  remove backport"

    _evalq "sed -i '/^[^#]/ s/\(.*\)/#\1/' '$file_bp' '$FILE_HA'"
    _evalq "sed -i '/^[^#]/ s/\(.*\)/#\1/' '$file_bp'"
    _evalq apt-get update

else
    _eval apt-get -yt jessie-backports install certbot haproxy haproxyctl hatop
fi


####################################  CERTBOT

_echoT "----------  certbot request"

_askno "From an other terminal, install certbot for your ALL domains with:\ncertbot certonly --standalone\nConfirm"


_echoT "----------  certbot conf"

path_lets="/etc/letsencrypt/live"
domains="$(ls $path_lets|xargs)"
for domain in $domains; do _evalq "cat '$path_lets/$domain/fullchain.pem' '$path_lets/$domain/privkey.pem' > '$S_PATH_CONF_SSL/private/letsencrypt-$domain.pem'"; done


_echoT "----------  conf keep old"

FILECONF=/etc/haproxy/haproxy.cfg
[ -f "$FILECONF" ] && [ ! -f $FILECONF.$_DDATE ] && _evalq cp -a "$FILECONF" "$FILECONF.$DDATE"
paths_conf="/etc/haproxy/conf-available /etc/haproxy/conf-enabled"
for path_conf in $paths_conf; do [ -f "$path_conf" ] && [ ! -f $path_conf.$_DDATE ] && _evalq mv "$path_conf" "$path_conf.$DDATE"; done


_echoT "----------  conf install"

path_conf=${S_PATH_INSTALL_CONF}/haproxy
_evalq cp -a $path_conf/* /etc/haproxy

files="$(find /etc/haproxy -type f -name *.cfg|xargs)"

_var_replace "$files"

sed -i "s|S_PATH_CONF_SSL|$S_PATH_CONF_SSL|g" $files
sed -i "s|_MYDOMAIN_FQDN|$_MYDOMAIN_FQDN|g" $files
sed -i "s|_MYDOMAIN_NAME|$_MYDOMAIN_NAME|g" $files
sed -i "s|_DOMAIN_2_FQDN|$_DOMAIN_2_FQDN|g" $files
sed -i "s|_DOMAIN_2_NAME|$_DOMAIN_2_NAME|g" $files
sed -i "s|_ACCESS_USER|$_ACCESS_USER|g" $files
sed -i "s|_ACCESS_PWD|$_ACCESS_PWD|g" $files
sed -i "s|_ACCESS_URI|$_ACCESS_URI|g" $files


_echoT "----------  ssl copying"

path_conf=${S_PATH_INSTALL_CONF}/ssl
[ -f "$S_PATH_CONF_SSL" ] && [ ! -f $S_PATH_CONF_SSL.$_DDATE ] && _evalq mv "$S_PATH_CONF_SSL" "$S_PATH_CONF_SSL.$DDATE"
_evalq cp -a $path_conf/* "$S_PATH_CONF_SSL"


_echoT "----------  ssl conf"

_askno "Please adjust files in folder '$S_PATH_CONF_SSL' your needed certicates & confirm"

_evalq "find '$S_PATH_CONF_SSL' -type d -exec chmod 750 -R '{}' \\;"
_evalq "find '$S_PATH_CONF_SSL' -type f -exec chmod 640 -R '{}' \\;"
_evalq "find '$S_PATH_CONF_SSL/private' -type d -exec chmod 700 -R '{}' \\;"
_evalq "find '$S_PATH_CONF_SSL/private' -type f -exec chmod 600 -R '{}' \\;"


####################################  CONF EXTEND

_echoT "----------  conf-ext create path"

# add paths
for PATHTMP in /etc/haproxy/conf-enabled /etc/haproxy/conf-available; do
    ! [ -d "$PATHTMP" ] && mkdir "$PATHTMP"
done


_echoT "----------  conf-ext patch"

# add options in /etc/init.d/haproxy
sed -i 's|^EXTRAOPTS.*|EXTRAOPTS=$\(for file in $\(find /etc/haproxy/conf-enabled -type l\|sort -n\); do CONFIGS=" $CONFIGS -f $file"; done; echo $CONFIGS\)|' /etc/init.d/haproxy


_echoT "----------  path rights"

_evalq chmod o-rwx -R /etc/haproxy


_echoT "----------  daemon restart"

_service restart haproxy


_echoT "----------  haconf bash_completion"

file="/etc/bash_completion.d/haconf"
[ -f "$file" ] && [ ! -f "$file.$_DDATE" ] && _evalq cp -a "$file" "$file.$DDATE"

_evalq cp -a "$fileconf_haconf" "$file"

_evalq chown 0:0 "$file"


####################################  RSYSLOG

_echoT "----------  rsyslog conf add"

file="/etc/rsyslog.d/49-haproxy.conf"
[ -f "$file" ] && [ ! -f "$file.$_DDATE" ] && _evalq cp -a "$file" "$file.$DDATE"

_evalq cp -a "$fileconf_haproxy" "$file"
_evalq "sed -i 's|S_PATH_LOG|$S_PATH_LOG|' $file"

_var_replace "$file"

_evalq "chown 0:0 $file && chmod -x $file"


_echoT "----------  rsyslog restart"

_service restart rsyslog


####################################  LOGROTATE

_echoT "----------  logrotate conf add"

file=/etc/logrotate.d/haproxy
STR="7"; sed -i "s|^\( *rotate\).*|\1 $STR|" "$file"

! grep -q 'haproxy-status.log' "$file" && sed -i "1i /var/log/haproxy-status.log" "$file"


_echoT "----------  STATS access"

_echo "------------------------------------------"
_echo "Test this URL to access to HAPROXY statistics"
_echoi "${_IPTHIS}:${S_HAPROXY_STATS_PORT}${_ACCESS_URI}"
_echo "------------------------------------------"
_askno "after it, valid to continue"


_echoT "----------  end"

_evalq _var_unset "part" "*"
_evalq "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"
