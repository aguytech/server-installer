#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART}"

grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_INIT_NAME}$ || _exite "Unable to find image container: '${_CT_INIT_NAME}'"

_echot "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: '${S_SERVICE[log]}'"

file_vim=${S_PATH_SCRIPT_CONF}/.vimrc
file_haproxy_initd=${S_PATH_INSTALL_CONF}/haproxy/haproxy
file_cron_letsencrypt=${S_PATH_INSTALL_CONF}/cron/letsencrypt-renew

file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-haproxy.conf
file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-haproxy.conf
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-haproxy
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/client-haproxy

path_haproxy=${S_PATH_INSTALL_CONF}/haproxy

_echot "------------------ required files"
_require ${file_haproxy_initd} ${file_vim}  ${file_cron_letsencrypt} ${file_rsyslog_host} ${file_rsyslog_client} ${file_logrotate_host} ${file_logrotate_client}

_echot "------------------ required paths"
_requirep ${path_haproxy}

########################  DATA

_echot "------------------  data domain"

cts_www=`lxc list -f json | jq -r '.[] | select(.profiles | any(contains("www-"))).name'`
[ "${cts_www}" ] || _exite "Unable to find a container with a www* profile"
_menu "Select one available container for www default server" ${cts_www}
_SERVER_DEFAULT=${_ANSWER}

_echot "------------------  data"

anstmp="17112018.fr.lxd 17112018.ovh.lxd ambau.fr.lxd ambau.ovh.lxd ggj.fr.lxd ggj.ovh.lxd han-sci.fr.lxd otokoz.ovh.lxd"
[ "${_DOMAIN_FQDN%.lxd}" = "${_DOMAIN_FQDN}" ] && anstmp=${anstmp//.lxd/}
_askno "All FQDN domains (${anstmp})"
_HPX_DOMAIN_ALL_FQDN="${_ANSWER:-${anstmp}}" && _confset _HPX_DOMAIN_ALL_FQDN "${_HPX_DOMAIN_ALL_FQDN}" ${_FILE_INSTALL_CONF}

_menu "A principal fqdn domain (ambau.fr)" ${_HPX_DOMAIN_ALL_FQDN}
_HPX_DOMAIN_FQDN="${_ANSWER}" && _confset _HPX_DOMAIN_FQDN "${_HPX_DOMAIN_FQDN}" ${_FILE_INSTALL_CONF}

anstmp=admin && _askno "Name for stats access (${anstmp})"
_HPX_ACCESS_USER="${_ANSWER:-${anstmp}}" && _confset _HPX_ACCESS_USER "${_HPX_ACCESS_USER}"

anstmp=`_pwd` && _askno "Password to stats access (${anstmp})"
_HPX_ACCESS_PWD="${_ANSWER:-${anstmp}}" && _confset _HPX_ACCESS_PWD "${_HPX_ACCESS_PWD}"

anstmp=/haproxy-stats && _askno "URI to access to admin site (${anstmp})"
_HPX_ACCESS_URI="${_ANSWER:-${anstmp}}" && _confset _HPX_ACCESS_URI "${_HPX_ACCESS_URI}"

_echot "------------------  data letsencrypt"

_askyn "Use letsencrypt" && _HPX_LCRYPT_ENABLE="${_ANSWER/n/}"

if [ "${_HPX_LCRYPT_ENABLE}" ]; then
	anstmp=${S_DOMAIN_EMAIL_TECH} && _askno "Technical email for letsencrypt (${anstmp})" && _HPX_LCRYPT_EMAIL="${_ANSWER:-${anstmp}}" && _confset _HPX_LCRYPT_EMAIL "${_HPX_LCRYPT_EMAIL}"
	anstmp="ada admin blog carte chat chiffres cloud cms code compta dev diaspora discord discourse down elastik files forum gestion git gitea gitlab graylog info kibana links log manage matomo metrics monitor nextcloud pfa pma roundcube shaarli snippet social st stats test tuleap vma vmail webmail wiki www zabbix" # imap mail mail10 mx mx10 smtp
	_askno "Subdomains to register to letsencrypt: (${anstmp})" && _HPX_LCRYPT_SUBS="${_ANSWER:-${anstmp}}" && _confset _HPX_LCRYPT_SUBS "${_HPX_LCRYPT_SUBS}"
	[ -z ${_HPX_LCRYPT_PORT+x} ] && anstmp=8079 && _askno "Port for letsencrypt (${anstmp})" && _HPX_LCRYPT_PORT="${_ANSWER:-${anstmp}}" && _confset _HPX_LCRYPT_PORT "${_HPX_LCRYPT_PORT}"
fi

_CT_NAME=${S_SERVICE[proxy]}
eval ${S_HOST_VM_ETH[default]}
_CT_IP=${s_base}.${S_SERVICE_BITS[proxy]}

_HPX_DOMAIN_NAME=${_HPX_DOMAIN_FQDN%.lxd} && _HPX_DOMAIN_NAME="${_HPX_DOMAIN_NAME%.*}" && _confset _HPX_DOMAIN_NAME "${_HPX_DOMAIN_NAME}"
_HPX_CT_NAME=${_HPX_DOMAIN_FQDN//./-} && _confset _HPX_CT_NAME "${_HPX_CT_NAME}"
_HPX_DNS_DEFAULT=${s_base}.1:53 && _confset _HPX_DNS_DEFAULT "${_HPX_DNS_DEFAULT}"
_HPX_SSL_CA_KEY=${S_PATH_CONF_SSL}/private/CA.key.ca && _confset _HPX_SSL_CA_KEY "${_HPX_SSL_CA_KEY}"
_HPX_SSL_CA_PEM=${S_PATH_CONF_SSL}/certs/CA.pem.ca && _confset _HPX_SSL_CA_PEM "${_HPX_SSL_CA_PEM}"
_HPX_SSL_CONF=${S_PATH_CONF_SSL}/openssl-${_HPX_DOMAIN_FQDN}.cnf && _confset _HPX_SSL_CONF "${_HPX_SSL_CONF}"

_HPX_STATS_PORT=${S_HAPROXY_STATS_PORTS%% *} && _confset _HPX_STATS_PORT "${_HPX_STATS_PORT}"
_HPX_STATS_2_PORT=${S_HAPROXY_STATS_PORTS#* } && _HPX_STATS_2_PORT=${_HPX_STATS_2_PORT%% *} && _confset _HPX_STATS_2_PORT "${_HPX_STATS_2_PORT}"

########################  PROFILE

profile=ssl-${_HPX_DOMAIN_FQDN}
_echot "------------------  profile ${profile}"

lxc profile list -f csv|grep -q "^${profile}," && _eval lxc profile rename ${profile} ${profile}.${_SDATE}
_eval lxc profile create ${profile}

path=${S_HOST_PATH_SHARE}/ssl/${_HPX_DOMAIN_FQDN}
path_ct=${S_VM_PATH_SHARE}/ssl/${_HPX_DOMAIN_FQDN}
[ -d ${path} ] || _evalr mkdir -p ${path}
_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}

########################  INIT

_echot "------------------  init"
if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_echot "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
fi
_eval lxc init ${_CT_INIT_NAME} ${_CT_NAME} -p default -p global -p ssl-${_HPX_DOMAIN_FQDN}

_echot "------------------  network fixed ip"
if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	#_eval lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
	_eval lxc config device override ${_CT_NAME} eth0 ipv4.address=${_CT_IP}
fi

_echot "------------------  ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}

########################  METADATA

_echot "------------------  metadata"
_lxc_meta_set ${_CT_NAME} profiles default global ssl-${_HPX_DOMAIN_FQDN}
_lxc_meta_add ${_CT_NAME} apps haproxy

########################  IPTABLES

_echot "------------------  iptables"
sed -i '/^_NAT_HAPROXY=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
_service restart ${_IPT_SERVICE}

########################  SYSCTL

_echot "------------------  conf sysctl.conf"

file=/etc/sysctl.d/20-lxd.conf

txt="# server configuration
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout= ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time= ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl= ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}"

_lxc_exec ${_CT_NAME} "echo '${txt}' > ${file}"

########################  PROXY

#_echot "------------------  proxy httpx"
#for port in 80 443; do
#	_eval lxc config device add ${_CT_NAME} http-${port} proxy listen=tcp:0.0.0.0:${port} connect=tcp:127.0.0.1:${port}
#done

_echot "------------------  proxy stats"
for port in ${S_HAPROXY_STATS_PORTS}; do
	_eval lxc config device add ${_CT_NAME} stats-${port} proxy listen=tcp:0.0.0.0:${port} connect=tcp:127.0.0.1:${port}
done

########################  INSTALL

_echot "------------------  install"
_lxc_exec ${_CT_NAME} "apk update"
_lxc_exec ${_CT_NAME} "apk add haproxy bash bash-completion vim curl" # lnav

_echot "------------------  service enable"
_lxc_exec ${_CT_NAME} rc-update add haproxy

########################  CONF

_echot "------------------  conf bash"
_lxc_exec ${_CT_NAME} "sed -i 's|^\(root.*\):[^:]*$|\1:/bin/bash|' /etc/passwd"
_eval lxc file push -q ${S_PATH_INSTALL_CONF}/bash-completion/haconf ${_CT_NAME}/usr/share/bash-completion/completions/

path=$(lxc exec ${_CT_NAME} -- sh -c  "ls -d /usr/share/vim/vim*/colors")
_eval "lxc file push -q ${S_PATH_INSTALL_CONF}/vim/* ${_CT_NAME}${path}/"

file=/root/.vimrc
_lxc_exec ${_CT_NAME} "[ -e ${file} ] || ln -s ${file_vim} ${file}"

_echot "------------------  conf haproxy"
path=/etc/haproxy
_lxc_exec ${_CT_NAME} "[ -d ${path} ] && rm -fR ${path} ${path}.${_SDATE}"
_eval lxc file push -rq ${path_haproxy} ${_CT_NAME}/etc

# select alpine configuration
_lxc_exec ${_CT_NAME} "sed -i 's|^\(\s*\)#\(.*\) # alpine$|\1\2|' ${path}/haproxy.cfg"

_echot "------------------  conf variables"
# replace variables
_lxc_var_replace ${_CT_NAME} ${path} haproxy rspamd

_echot "------------------  conf enable"
_lxc_exec ${_CT_NAME} "[ -d ${path}/conf-enabled ] || mkdir -p ${path}/conf-enabled"
files="10-defaults 12-listen-stats 14-resolvers-lxd 20-fronts-80 40-fronts-mail 50-backs-80 60-backs-mail"
[ ${_HPX_DOMAIN_FQDN##*.} != lxd ] && files+=" 30-fronts-443"
for str in ${files}; do
	_lxc_exec ${_CT_NAME} "[ -e ${path}/conf-enabled/${str} ] || ln -s ${path}/conf-available/${str}  ${path}/conf-enabled/${str}"
done

_echot "------------------  haproxy start"
_lxc_exec ${_CT_NAME} "rc-service haproxy -S start"

_echot "------------------  conf init.d"
file=/etc/init.d/${file_haproxy_initd##*/}
_lxc_exec ${_CT_NAME} "[ -f ${file} ] && mv ${file} ${file}.${_SDATE} && chmod -x ${file}.${_SDATE}"
_eval lxc file push -q ${file_haproxy_initd} ${_CT_NAME}/etc/init.d/haproxy
_lxc_exec ${_CT_NAME} "chmod +x ${file}"

########################  OPENSSL

_echot "------------------  openssl install"
_lxc_exec ${_CT_NAME} "apk add openssl"

_lxc_exec ${_CT_NAME} cp -a /etc/ssl1.1/openssl.cnf ${_HPX_SSL_CONF}

_echot "------------------  openssl conf ${_HPX_DOMAIN_FQDN}"
cmds=; while read str val; do
	cmds+="sed -i 's|^#\?\(${str}\s*=\).*$|\1 ${val}|' ${_HPX_SSL_CONF}
";done <<< "countryName  FR
stateOrProvinceName  Britain
0.organizationName  ${_HPX_DOMAIN_NAME}
organizationalUnitName  ${_HPX_DOMAIN_NAME}"
_lxc_exec ${_CT_NAME} "${cmds}"

cmds=; while read str val; do
	cmds+="sed -i '/req_extensions = v3_req/,$ s|^\(${str}\s.*\)$|\1\n${val}|' ${_HPX_SSL_CONF}
";done <<< "localityName  localityName_default = Nantes
commonName  commonName_default = ${_HPX_DOMAIN_FQDN}
emailAddress  emailAddress_default = admin@${_HPX_DOMAIN_FQDN}"
_lxc_exec ${_CT_NAME} "${cmds}"

cmds=; while read str val; do
	cmds+="sed -i 's|^#\?\(${str}\s*=\).*$|\1 ${val}|' ${_HPX_SSL_CONF}
";done <<< "countryName_default  FR
stateOrProvinceName_default  Britain
0.organizationName_default  ${_HPX_DOMAIN_NAME}
organizationalUnitName_default  ${_HPX_DOMAIN_NAME}"
_lxc_exec ${_CT_NAME} "${cmds}"

cmds=; while read str val; do
	cmds+="sed -i '/req_extensions = v3_req/,$ s|^\(${str}\s.*\)$|\1\n${val}|' ${_HPX_SSL_CONF}
";done <<< "localityName  localityName_default = Nantes
commonName  commonName_default = ${_HPX_DOMAIN_FQDN}
emailAddress  emailAddress_default = admin@${_HPX_DOMAIN_FQDN}"
_lxc_exec ${_CT_NAME} "${cmds}"

_echot "------------------  openssl conf CA"
_lxc_exec ${ct_proxy} openssl genrsa -out ${_HPX_SSL_CA_KEY} 4096
_lxc_exec ${ct_proxy} openssl req -x509 -new -nodes -key ${_HPX_SSL_CA_KEY} -sha256 -days 3650 -out ${_HPX_SSL_CA_PEM} -config ${_HPX_SSL_CONF}
lxc file pull ${ct_proxy}/${_HPX_SSL_CA_KEY} ${S_PATH_CONF_SSL}/private/
lxc file pull ${ct_proxy}/${_HPX_SSL_CA_PEM} ${S_PATH_CONF_SSL}/certs/
_evalr chmod g=,o= -R ${S_PATH_CONF_SSL}/private

if [ "${_HPX_LCRYPT_ENABLE}" ]; then
	########################  LETSENCRYPT
	# cert.pem: Your domain’s certificate
	# chain.pem: The Let’s Encrypt chain certificate
	# privkey.pem: Your certificate’s private key
	# fullchain.pem: cert.pem and chain.pem combined
	# https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-centos-7

	_echot "------------------  letsencrypt install"
	_lxc_exec ${_CT_NAME} "apk add certbot"

	_echot "------------------  copy letsencrypt"
	_echoA "Copy backup of letsencrypt certs" && read str
	_askno "Valid to continue"

	for domain in ${_HPX_DOMAIN_ALL_FQDN}; do
		if ! _lxc_exec ${_CT_NAME} "[ -d /etc/letsencrypt/live/${domain} ]"; then
			_echot "------------------  letsencrypt cert ${domain}"
			str="-d ${domain}"
			for sub in ${_HPX_LCRYPT_SUBS}; do
				str+=" -d ${sub}.${domain}"
			done
			cmd="certbot certonly --standalone --preferred-challenges http --http-01-port 80 --non-interactive --agree-tos --email ${_HPX_LCRYPT_EMAIL} ${str}"
			#cmd="certbot certonly --standalone --preferred-challenges http --http-01-port 80 -d example.com -d www.example.com"
			_lxc_exec ${_CT_NAME} "${cmd}"
		else
			_echot "------------------  letsencrypt skip ${domain}"
		fi
	done

	_echot "------------------  letsencrypt unify"
	_lxc_exec ${_CT_NAME} "${S_PATH_SCRIPT}/scripts/letsencrypt-unify.sh"

	_echot "------------------  letsencrypt unified"
	_lxc_exec ${_CT_NAME} "cat ${S_PATH_CONF_SSL}/private/letsencrypt.pem.lst"

	_echot "------------------  letsencrypt cron"
	file=/etc/periodic/weekly/${file_cron_letsencrypt##*/}
	_eval lxc file push -q ${file_cron_letsencrypt} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} haproxy script
	_lxc_exec ${_CT_NAME} "chmod +x ${file}"

else

	########################  OPENSSL

	_echot "------------------  openssl conf www"
	file_ssl_conf=${S_PATH_CONF_SSL}/openssl-${_HPX_DOMAIN_FQDN}-www.cnf
	file_ssl_csr=${S_PATH_CONF_SSL}/private/${_HPX_DOMAIN_FQDN}.csr
	file_ssl_crt=${S_PATH_CONF_SSL}/certs/${_HPX_DOMAIN_FQDN}.crt

	_lxc_exec ${ct_proxy} cp -a ${_HPX_SSL_CONF} ${file_ssl_conf}
	_lxc_exec ${ct_proxy} "sed -i 's|^#\?\(commonName_default\s*=\).*$|\1 *.${_HPX_DOMAIN_FQDN}|' ${file}"

	# Create the key
	_lxc_exec ${ct_proxy} openssl genrsa -out ${_FILE_SSL_KEY} 2048
	# Create the Certificate Signing Request CSR - for CN use the correct FQDN !! ex: mail.ambau.ovh
	_lxc_exec ${ct_proxy} openssl req -new  -key ${_FILE_SSL_KEY} -out ${file_ssl_csr} -config ${file_ssl_conf}

	_echot "------------------  conf verify"
	# verify configuration of CSR
	_lxc_exec ${ct_proxy} openssl req -text -noout -in ${file_ssl_csr}|grep -e '\(Subject:\|DNS:\)'
	# Self-sign the certificate CSR to a CRT
	_lxc_exec ${ct_proxy} openssl x509 -req -days 3650 -sha256 -in ${file_ssl_csr} -CA ${_HPX_SSL_CA_PEM} -CAkey ${_HPX_SSL_CA_KEY} -CAcreateserial -out ${file_ssl_crt} -extensions v3_req -extfile ${file_ssl_conf}
	# Create pem file
	_lxc_exec ${ct_proxy} "cat ${file_ssl_crt} ${_FILE_SSL_KEY} > ${_FILE_SSL_FULL}"

fi

########################  RSYSLOG

if [ "${S_RSYSLOG_PTC}" = udp ]; then
	_echot "------------------  conf udp"

	file=/etc/rsyslog.conf
	_lxc_exec ${_CT_NAME} "sed -i '/#module(load=.imudp/,/#)/ s|^#||' ${file}"
	_lxc_exec ${_CT_NAME} "sed -i '/^\s*port=/ s|=.*|=\"${S_RSYSLOG_PORT}\"|' ${file}"

	_echot "------------------  ${_CT_NAME} restart rsyslog"
	_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"
fi


_echot "------------------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}/haproxy
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"


_echot "------------------  ${S_SERVICE[log]} host-haproxy"
file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push -q ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echot "------------------  ${S_SERVICE[log]} restart rsyslog"
_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"


_echot "------------------  ${_CT_NAME} client path"
path=${S_PATH_LOG}/haproxy
_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"


_echot "------------------  ${_CT_NAME} client-haproxy"
file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push -q ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog

_echot "------------------  ${_CT_NAME} rsyslog restart"
_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"

########################  LOGROTATE

_echot "------------------  ${S_SERVICE[log]} logrotate"

file=/etc/logrotate.d/${file_logrotate_host##*/}
_eval lxc file push -q ${file_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate

_echot "------------------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} "rc-service crond restart"


_echot "------------------  client logrotate"
file=/etc/logrotate.d/${file_logrotate_client##*/}
_eval lxc file push -q ${file_logrotate_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} logrotate

_echot "------------------  ${_CT_NAME} crond restart"
_lxc_exec ${_CT_NAME} "rc-service crond restart"

########################  CLEAN LOG

_echot "------------------  ${_CT_NAME} log clean"
_lxc_exec ${_CT_NAME} "find ${S_PATH_LOG}/haproxy -name *.log -exec rm {} \;"

########################  PUBLISH

_echot "------------------  publish ${_CT_NAME}"
lxc image list -f csv -c l | grep -q ^${_CT_NAME}$ && _eval lxc image alias rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
_eval lxc publish --force ${_CT_NAME} --alias ${_CT_NAME}

########################  TEST

_echot "------------------  test haproxy"

_echoA "password to access to  haproxy: ${_HPX_ACCESS_PWD}"
_echoa "${_IPTHIS}:${_HPX_STATS_PORT}${_HPX_ACCESS_URI}"

_echot "------------------  test ${_CT_NAME}"

_echoA "To test connection type:"
_echoa "curl ${_IPTHIS}:80"
_echoa "curl ${_HPX_DOMAIN_FQDN}:80"

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
