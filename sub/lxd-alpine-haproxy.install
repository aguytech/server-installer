#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  ${_RELEASE} ${_PART}"

file_haproxy_initd=${S_PATH_INSTALL_CONF}/init.d/haproxy
file_vim=${S_PATH_SCRIPT_CONF}/.vimrc
path_haproxy=${S_PATH_INSTALL_CONF}/haproxy

_echoT "------------------ required files"
_require ${file_haproxy_initd} ${file_vim}

_echoT "------------------ required paths"
_required ${path_haproxy}

####################################  DATA

_CT_NAME=${S_SERVICE[proxy]}

eval ${S_HOST_VM_ETH[default]}
_CT_IP=${s_base}.${S_SERVICE_BITS[proxy]}

_echoT "----------  data"

[ -z ${_IPTABLES_PORTS+x} ] && anstmp="80 443" && _askno "IPs to redirect to haproxy container ($anstmp)" && _IPTABLES_PORTS=${_ANSWER:-$anstmp} && _confset _IPTABLES_PORTS "$_IPTABLES_PORTS"


[ -z ${S_DOMAIN_FQDN+x} ] && anstmp="$S_DOMAIN_FQDN" && _askno "Enter a fqdn domain name ($anstmp)" && S_DOMAIN_FQDN="${_ANSWER:-$anstmp}" && _confset S_DOMAIN_FQDN "$S_DOMAIN_FQDN"
S_DOMAIN_NAME="${S_DOMAIN_FQDN%.*}" && _confset S_DOMAIN_NAME "$S_DOMAIN_NAME"

[ -z ${_ACCESS_USER+x} ] && anstmp="admin" && _askno "Enter a name for stats access ($anstmp)" && _ACCESS_USER="${_ANSWER:-$anstmp}" && _confset _ACCESS_USER "$_ACCESS_USER"

[ -z ${_ACCESS_PWD+x} ] && anstmp="$(_pwd)" && _askno "Enter a password to stats access ($anstmp)" && _ACCESS_PWD="${_ANSWER:-$anstmp}" && _confset _ACCESS_PWD "$_ACCESS_PWD"

[ -z ${_ACCESS_URI+x} ] && anstmp="/haproxy-stats" && _askno "Enter the URI to access to admin site ($anstmp)" && _ACCESS_URI="${_ANSWER:-$anstmp}" && _confset _ACCESS_URI "$_ACCESS_URI"


####################################  INIT

_echoT "----------  init"

! lxc image list -f json |jq -r '.[].aliases[].name' | grep -q ^${_CT_NAME_COM}$ && _exite "Unable to find image container '${_CT_NAME_COM}'"
if lxc list -f json |jq -r '.[].name' | grep -q ^${_CT_NAME}$; then
	if lxc list --format=json | jq -r '.[] | select(.status == "Running").name' | grep -q ^${_CT_NAME}$; then
		_eval lxc stop ${_CT_NAME}
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}.${_SDATE}
		_eval lxc start ${_CT_NAME}
	else
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}.${_SDATE}
	fi

fi

_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global


_echoT "----------  network fixed ip"

if ! lxc list --format=json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
fi
_eval lxc config device set ${_CT_NAME} eth0 ipv4.address ${_CT_IP}


_echoT "----------  ct start"

_eval lxc start ${_CT_NAME}


####################################  INSTALL

_echoT "----------  install"

_lxc_exec ${_CT_NAME} "apk add haproxy bash bash-completion"


_echoT "----------  service set"

_lxc_exec ${_CT_NAME} "rc-update add haproxy"
_lxc_exec ${_CT_NAME} "rc-service haproxy start"


####################################  CONF

_echoT "----------  conf bash"

_lxc_exec ${_CT_NAME} "sed -i 's|^\(root.*\):[^:]*$|\1:/bin/bash|' /etc/passwd"
_eval lxc file push -q ${S_PATH_INSTALL_CONF}/bash-completion/haconf ${_CT_NAME}/usr/share/bash-completion/completions/

_echoD "path=\$(lxc exec ${_CT_NAME} -- sh -c  \"readlink -f /usr/share/vim/vim*/colors\")"
path=$(lxc exec ${_CT_NAME} -- sh -c  "readlink -f /usr/share/vim/vim*/colors")
_eval "lxc file push -q ${S_PATH_INSTALL_CONF}/vim/* ${_CT_NAME}${path}/"

file=/root/.vimrc
_lxc_exec ${_CT_NAME} "[ -e ${file} ] || ln -s ${file_vim} ${file}"

_echoT "----------  conf"

path=/etc/haproxy
_lxc_exec ${_CT_NAME} "[ -d ${path} ] && mv ${path} ${path}.${_SDATE}"
_eval lxc file push -rq ${path_haproxy} ${_CT_NAME}/etc

vars="S_PATH_CONF_SSL _ACCESS_USER _ACCESS_PWD _ACCESS_URI S_HAPROXY_STATS_PORT S_RSYSLOG_PORT S_DOMAIN_FQDN S_DOMAIN_NAME"
for var in ${vars}; do
	_lxc_exec ${_CT_NAME} "find ${path} -type f|while read file; do sed -i 's|${var}|${!var}|g' \${file}; done"
done

_echoT "----------  init.d"

file=/etc/init.d/haproxy
_lxc_exec ${_CT_NAME} "[ -f ${file} ] && mv ${file} ${file}.${_SDATE} && chmod -x ${file}.${_SDATE}"
_eval lxc file push ${file_haproxy_initd} ${_CT_NAME}/etc/init.d/
_lxc_exec ${_CT_NAME} "chmod +x ${file}"

_echoT "----------  restart"

_lxc_exec ${_CT_NAME} "rc-service haproxy restart"


####################################  IPTABLES

_echoT "----------  iptables rules"

eval ${S_CLUSTER[$HOSTNAME]}

for port in ${_IPTABLES_PORTS}; do
	#cmd="PREROUTING -d ${S_NODE_IPV4}/32 -i ${S_ETH} -p tcp -m tcp --dport ${port} -j DNAT --to-destination ${_CT_IP}:${port}"
	cmd="PREROUTING -d ${s_ip}/32 -p tcp -m tcp --dport ${port} -j DNAT --to-destination ${_CT_IP}:${port}"
	iptables -S -t nat | grep -qi "${cmd}" || iptables -t nat -I ${cmd}
done





echo exit && exit

_echoT "----------  iptables persistent"

file=/etc/iptables/iptables.rules
sudo systemctl stop lxd.*
sudo iptables-save -f ${file}
sudo sed -i 's|^\(.* ACCEPT\) .*$|\1|' ${file}
sudo systemctl start lxd.service


####################################  CERTBOT

_echoT "----------  certbot install"

_lxc_exec ${_CT_NAME} "apk add certbot"


########################################  PUBLISH

_echoT "----------  publish ${_CT_NAME}"

_eval lxc image list --format=json | jq -r '.[].aliases[].name' | grep -q ^${_CT_NAME}$ && lxc image alias rename ${_CT_NAME} ${_CT_NAME}-$(date +%s)
_eval lxc publish ${_CT_NAME} --alias ${_CT_NAME} --force


####################################  END

_echoT "---------- ${_PART} end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"
