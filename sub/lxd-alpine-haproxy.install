#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_INSTALL}-${_PART#++}"
grep -q "^# ${_PART#++}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART#++}" >> ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echot "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_INIT_NAME}$ || _exite "Unable to find image container: ${_CT_INIT_NAME}"

_echot "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find container: ${S_SERVICE[log]}"

file_conf_vim=${S_PATH_SCRIPT_CONF}/.vimrc
file_conf_haproxy=${S_PATH_INSTALL_CONF}/haproxy/haproxy
file_conf_certbot=${S_PATH_INSTALL_CONF}/cron/certbot-renew
file_conf_ssl_root=${S_PATH_INSTALL_CONF}/ssl/openssl-root.cnf
file_conf_ssl=${S_PATH_INSTALL_CONF}/ssl/openssl-domains.cnf

file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-haproxy.conf
file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-haproxy.conf
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-haproxy
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/client-haproxy

path_haproxy=${S_PATH_INSTALL_CONF}/haproxy

_echot "------------------ required files"
_require ${file_conf_haproxy} ${file_conf_vim}  ${file_conf_certbot}  ${file_conf_ssl_root}  ${file_conf_ssl} ${file_rsyslog_host} ${file_rsyslog_client} ${file_logrotate_host} ${file_logrotate_client}

_echot "------------------ required paths"
_requirep ${path_haproxy}

########################  DATA

_echot "------------------  data domain"

cts_www=`lxc list -f json | jq -r '.[] | select(.profiles | any(contains("www-"))).name'`
[ "${cts_www}" ] || _exite "Unable to find a container with a www* profile"

[ -z ${_SERVER_DEFAULT+x} ] && { _menu "Select one available container for www default server" ${cts_www}
	_SERVER_DEFAULT=${_ANSWER}; }

_echot "------------------  data"

[ -z ${_HPX_DOM_FQDN+x} ] && { anstmp=${S_DOM_FQDN}; _askno "Domain name to use (${anstmp})"; _HPX_DOM_FQDN="${_ANSWER:-${anstmp}}"; }

[ -z ${_HPX_DOM_NAME+x} ] && { anstmp=${S_DOM_NAME}; _askno "Short name to use (${anstmp})"; _HPX_DOM_NAME="${_ANSWER:-${anstmp}}"; }

[ -z ${_HPX_ACCESS_USER+x} ] && { anstmp=admin; _askno "Name for stats access (${anstmp})"; _HPX_ACCESS_USER="${_ANSWER:-${anstmp}}"; }
_confset _HPX_ACCESS_USER "${_HPX_ACCESS_USER}"

[ -z ${_HPX_ACCESS_PWD+x} ] && { anstmp=`_pwd`; _askno "Password to stats access (${anstmp})"; _HPX_ACCESS_PWD="${_ANSWER:-${anstmp}}"; }
_confset _HPX_ACCESS_PWD "${_HPX_ACCESS_PWD}"

[ -z ${_HPX_ACCESS_URI+x} ] && { anstmp=/haproxy-stats; _askno "URI to access to admin site (${anstmp})"; _HPX_ACCESS_URI="${_ANSWER:-${anstmp}}"; }
_confset _HPX_ACCESS_URI "${_HPX_ACCESS_URI}"

_echot "------------------  data certbot"

[ -z ${_HPX_CERTBOT_ON+x} ] && { _askyn "Use certbot"; 	_HPX_CERTBOT_ON="${_ANSWER/n/}"; }

if [ "${_HPX_CERTBOT_ON}" ] ; then
	[ -z ${_HPX_CERTBOT_SUBS+x} ] && { anstmp="admin blog carte chat chiffres cloud cms code compta dev diaspora discord discourse down elastik \
files forum gestion git gitea gitlab graylog info kibana links log manage matomo metrics monitor nextcloud pfa \
pma pro project projet riot roundcube shaarli snippet social stats test tuleap vma vmail webmail wiki www zabbix" # imap mail mail10 mx mx10 smtp
	_askno "Subdomains to register to certbot: (${anstmp})"; _HPX_CERTBOT_SUBS="${_ANSWER:-${anstmp}}"; }
	_confset _HPX_CERTBOT_SUBS "${_HPX_CERTBOT_SUBS}"

	[ -z ${_HPX_CERTBOT_PORT+x} ] && { anstmp=8079; _askno "Port for certbot (${anstmp})"; _HPX_CERTBOT_PORT="${_ANSWER:-${anstmp}}"; }
	_confset _HPX_CERTBOT_PORT "${_HPX_CERTBOT_PORT}"
fi

_CT_NAME=${S_SERVICE[proxy]}
eval ${S_HOST_VM_ETH[default]}
_CT_IP=${s_base}.${S_SERVICE_BITS[proxy]}

_HPX_CT_NAME=${_HPX_DOM_FQDN//./-}; _confset _HPX_CT_NAME "${_HPX_CT_NAME}"
_HPX_DNS_DEFAULT=${s_base}.1:53; _confset _HPX_DNS_DEFAULT "${_HPX_DNS_DEFAULT}"

_HPX_STATS_PORT=${S_HAPROXY_STATS_PORTS%% *}; _confset _HPX_STATS_PORT "${_HPX_STATS_PORT}"
_HPX_STATS_2_PORT=${S_HAPROXY_STATS_PORTS#* }; _HPX_STATS_2_PORT=${_HPX_STATS_2_PORT%% *}; _confset _HPX_STATS_2_PORT "${_HPX_STATS_2_PORT}"

_HPX_PATH_SSL=${S_VM_PATH_SHARE}/ssl/haproxy; _confset _HPX_PATH_SSL "${_HPX_PATH_SSL}"
path_ssl_conf=${_HPX_PATH_SSL}/conf
path_ssl_private=${_HPX_PATH_SSL}/private
path_ssl_certs=${_HPX_PATH_SSL}/certs
path_ssl_haproxy=${_HPX_PATH_SSL}/haproxy
path_ssl_letsencrypt=${_HPX_PATH_SSL}/letsencrypt
_HPX_SSL_CA_KEY=${path_ssl_private}/rootCA.key.ca; _confset _HPX_SSL_CA_KEY "${_HPX_SSL_CA_KEY}"
_HPX_SSL_CA_PEM=${path_ssl_certs}/rootCA.pem.ca; _confset _HPX_SSL_CA_PEM "${_HPX_SSL_CA_PEM}"

########################  CONFIGURATION

# load configuration file
. ${S_FILE_INSTALL_CONF}

########################  PROFILE

profile=ssl-haproxy
if ! lxc profile list -f csv|grep -q "^${profile},"; then
	_echot "------------------  profile ${profile}"
	_eval lxc profile create ${profile}

	path=${S_HOST_PATH_SHARE}/ssl/haproxy
	path_ct=${_HPX_PATH_SSL}
	[ -d ${path} ] || _evalr mkdir -p ${path}
	_evalr chown -R ${_LXD_UID}:${_LXD_UID} ${S_HOST_PATH_SHARE}/ssl
	_eval lxc profile device add ${profile} ${profile} disk source=${path} path=${path_ct}
fi

########################  INIT

_echot "------------------  init"
if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$ && _eval lxc stop ${_CT_NAME}
	_echot "------------------ rename ${_CT_NAME} -> ${_CT_NAME}-${_SDATE}"
	_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
	_eval lxc config device remove ${_CT_NAME}-${_SDATE} eth0
fi
_eval lxc init ${_CT_INIT_NAME} ${_CT_NAME} -p default -p global -p ssl-haproxy

_echot "------------------  network fixed ip"
if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	#_eval lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
	_eval lxc config device override ${_CT_NAME} eth0 ipv4.address=${_CT_IP}
fi

_echot "------------------  ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}

########################  METADATA

_echot "------------------  metadata"
_lxc_meta_set ${_CT_NAME} profiles default global ssl-haproxy
_lxc_meta_add ${_CT_NAME} apps haproxy

########################  SYSCTL

_echot "------------------  conf sysctl.conf"
file=/etc/sysctl.d/20-lxd.conf
txt="# server configuration
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout= ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time= ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl= ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}"
_lxc_exec ${_CT_NAME} "echo '${txt}' > ${file}"

########################  PROXY

#_echot "------------------  proxy httpx"
#for port in 80 443; do
#	_eval lxc config device add ${_CT_NAME} http-${port} proxy listen=tcp:0.0.0.0:${port} connect=tcp:127.0.0.1:${port}
#done

_echot "------------------  proxy stats"
for port in ${S_HAPROXY_STATS_PORTS}; do
	_eval lxc config device add ${_CT_NAME} stats-${port} proxy listen=tcp:0.0.0.0:${port} connect=tcp:127.0.0.1:${port}
done

########################  INSTALL

_echot "------------------  install"
_lxc_exec ${_CT_NAME} apk update
_lxc_exec ${_CT_NAME} apk add haproxy openssl bash bash-completion curl # lnav vim

_echot "------------------  service enable"
_lxc_exec ${_CT_NAME} rc-update add haproxy
_lxc_exec ${_CT_NAME} rc-service -S haproxy start

########################  CONF

_echot "------------------  conf bash"
_lxc_exec ${_CT_NAME} "sed -i 's|^\(root.*\):[^:]*$|\1:/bin/bash|' /etc/passwd"
_eval lxc file push -q ${S_PATH_INSTALL_CONF}/bash-completion/haconf ${_CT_NAME}/usr/share/bash-completion/completions/

if _lxc_exec ${_CT_NAME} "type vim >/dev/null 2>&1"; then
	_echot "------------------  conf vim"
	path=$(lxc exec ${_CT_NAME} -- sh -c  "ls -d /usr/share/vim/vim*/colors")
	_eval "lxc file push -q ${S_PATH_INSTALL_CONF}/vim/* ${_CT_NAME}${path}/"

	file=/root/.vimrc
	_lxc_exec ${_CT_NAME} "[ -e ${file} ] || ln -s ${file_conf_vim} ${file}"
fi

_echot "------------------  conf haproxy"
path=/etc/haproxy
_lxc_exec ${_CT_NAME} "[ -d '${path}' ] && rm -fR ${path} ${path}.${_SDATE}"
_eval lxc file push -rq ${path_haproxy} ${_CT_NAME}/etc

_echot "------------------  conf variables"
# replace variables
_lxc_var_replace ${_CT_NAME} ${path} haproxy
# select alpine configuration
_lxc_exec ${_CT_NAME} "sed -i 's|^\(\s*\)#\(.*\) # alpine$|\1\2|' ${path}/haproxy.cfg"

_echot "------------------  conf enable"
_lxc_exec ${_CT_NAME} "[ -d '${path}/conf-enabled' ] || mkdir -p ${path}/conf-enabled"
files="10-defaults 12-listen-stats 14-resolvers-lxd 20-fronts-80 50-backs-80"
for file in ${files}; do
	_lxc_exec ${_CT_NAME} "[ -e ${path}/conf-enabled/${file} ] || ln -s ${path}/conf-available/${file}  ${path}/conf-enabled/${file}"
done

_echot "------------------  conf init.d"
file=/etc/init.d/${file_conf_haproxy##*/}
_lxc_exec ${_CT_NAME} "[ -f '${file}' ] && mv ${file} ${file}.${_SDATE} && chmod -x ${file}.${_SDATE}"
_eval lxc file push -q ${file_conf_haproxy} ${_CT_NAME}/etc/init.d/haproxy
_lxc_exec ${_CT_NAME} chmod +x ${file}

_echot "------------------  haproxy restart"
_lxc_exec ${_CT_NAME} rc-service haproxy restart

_echot "------------------  paths create"
for path in ${path_ssl_conf} ${path_ssl_private} ${path_ssl_certs} ${path_ssl_haproxy} ${path_ssl_letsencrypt}; do
	_lxc_exec ${_CT_NAME} "[ -d '${path}' ] || mkdir -p ${path}"
done

########################  OPENSSL ROOT

if ! _lxc_exec ${_CT_NAME}  "[ -f '${_HPX_SSL_CA_KEY}' -a -f '${_HPX_SSL_CA_PEM}' ]"; then
	_echot "------------------  openssl conf"
	file_ssl_conf=${path_ssl_conf}/openssl-rootCA.cnf
	_eval lxc file push -q ${file_conf_ssl_root} ${_CT_NAME}${file_ssl_conf}
	_lxc_var_replace ${_CT_NAME} ${file_ssl_conf} haproxy

	_echot "------------------  openssl conf CA"
	_lxc_exec ${_CT_NAME} openssl genrsa -out ${_HPX_SSL_CA_KEY} 4096
	_lxc_exec ${_CT_NAME} openssl req -x509 -new -nodes -key ${_HPX_SSL_CA_KEY} -sha256 -days 3650 -out ${_HPX_SSL_CA_PEM} -config ${file_ssl_conf}

	_echot "------------------  openssl rights"
	_lxc_exec ${_CT_NAME} chown 0:0 -R ${_HPX_PATH_SSL}
	_lxc_exec ${_CT_NAME} chmod g=,o= -R ${path_ssl_private}
fi

if [ "${_HPX_CERTBOT_ON}" ]; then

	########################  LETSENCRYPT

	# cert.pem: Your domain’s certificate
	# chain.pem: The Let’s Encrypt chain certificate
	# privkey.pem: Your certificate’s private key
	# fullchain.pem: cert.pem and chain.pem combined
	# https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-centos-7

	_echot "------------------  certbot link"
	path=/etc/letsencrypt
	_lxc_exec ${_CT_NAME} "[ -h "${path}" -o -e "${path}" ] && rm -fR ${path}"
	_lxc_exec ${_CT_NAME} "ln -s ${path_ssl_letsencrypt} ${path}"

	_echot "------------------  certbot install"
	_lxc_exec ${_CT_NAME} apk add certbot

	_echot "------------------  copy certbot"
	_echoA "To renew existing certificates, delete them"
	[ -z "${_INSTALL_AUTO}" ] && _askno "Valid to continue"

	for domain in ${S_DOM_ALL_FQDN}; do
		if ! _lxc_exec ${_CT_NAME} "[ -d /etc/letsencrypt/live/${domain} ]"; then
			_echot "------------------  certbot cert ${domain}"
			str="-d ${domain}"
			for sub in ${_HPX_CERTBOT_SUBS}; do
				str+=" -d ${sub}.${domain}"
			done
			cmd="certbot certonly --standalone --preferred-challenges http --http-01-port ${_HPX_CERTBOT_PORT} --non-interactive --agree-tos --email ${S_EMAIL_ADMIN} ${str}"
			#cmd="certbot certonly --standalone --preferred-challenges http --http-01-port 80 -d example.com -d www.example.com"
			_lxc_exec ${_CT_NAME} "${cmd}"
		else
			_echot "------------------  certbot skip ${domain}"
		fi
	done

	_echot "------------------  certbot unify"
	_lxc_exec ${_CT_NAME} ${S_PATH_SCRIPT}/scripts/certbot-unify.sh

	_echot "------------------  certbot unified"
	_lxc_exec ${_CT_NAME} cat ${_HPX_PATH_SSL}/certbot.pem.lst

	_echot "------------------  certbot cron"
	file=/etc/periodic/weekly/${file_conf_certbot##*/}
	_eval lxc file push -q ${file_conf_certbot} ${_CT_NAME}${file}
	_lxc_var_replace ${_CT_NAME} ${file} haproxy script
	_lxc_exec ${_CT_NAME} chmod +x ${file}

else

	########################  OPENSSL

	for domain in ${S_DOM_ALL_FQDN}; do
		file_ssl_csr=${path_ssl_certs}/${domain}.csr
		file_ssl_key=${path_ssl_private}/${domain}-privkey.pem
		file_ssl_full=${path_ssl_certs}/${domain}-fullchain.pem

		if ! _lxc_exec ${_CT_NAME}  "[ -f '${file_ssl_key}' -a -f '${file_ssl_full}' ]"; then

			_echot "------------------  openssl certs ${domain}"
			file_ssl_conf=${path_ssl_conf}/openssl-${domain}.cnf
			_eval lxc file push -q ${file_conf_ssl} ${_CT_NAME}${file_ssl_conf}
			_lxc_var_replace ${_CT_NAME} ${file_ssl_conf} haproxy

			# Create the key
			_lxc_exec ${_CT_NAME} openssl genrsa -out ${file_ssl_key} 4096
			# Create the Certificate Signing Request CSR - for CN use the correct FQDN !! ex: mail.ambau.ovh
			_lxc_exec ${_CT_NAME} openssl req -new  -key ${file_ssl_key} -out ${file_ssl_csr} -config ${file_ssl_conf}
			# verify configuration of CSR
			_lxc_exec ${_CT_NAME} openssl req -text -noout -in ${file_ssl_csr}|grep -e '\(Subject:\|DNS:\)'
			# Self-sign the certificate CSR to a CRT
			_lxc_exec ${_CT_NAME} openssl x509 -req -days 3650 -sha512 -in ${file_ssl_csr} -CA ${_HPX_SSL_CA_PEM} -CAkey ${_HPX_SSL_CA_KEY} -CAcreateserial -out ${file_ssl_full} -extensions v3_req -extfile ${file_ssl_conf}
			# Compose
			_lxc_exec ${_CT_NAME} "cat ${file_ssl_full} ${file_ssl_key} > ${path_ssl_haproxy}/${domain}.pem"

		fi
	done
	# create haproxy pem list
	_lxc_exec ${_CT_NAME} "ls -1 ${path_ssl_haproxy}/*.pem > ${_HPX_PATH_SSL}/certbot.pem.lst"
fi

_echot "------------------  haproxy rights"
_lxc_exec ${_CT_NAME} "chown 0:0 -R ${_HPX_PATH_SSL}
chmod g=,o= -R ${path_ssl_private} ${path_ssl_haproxy}"

########################  SSL

_echot "------------------  conf ssl enable"
path=/etc/haproxy
file=30-fronts-443
_lxc_exec ${_CT_NAME} "[ -e ${path}/conf-enabled/${file} ] || ln -s ${path}/conf-available/${file}  ${path}/conf-enabled/${file}"

_echot "------------------  haproxy restart"
_lxc_exec ${_CT_NAME} "rc-service haproxy restart"

########################  RSYSLOG

_echot "------------------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}/haproxy
_lxc_exec ${S_SERVICE[log]} "[ -d '${path}' ] || mkdir -p ${path}"

_echot "------------------  ${S_SERVICE[log]} host-haproxy"
file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push -q ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echot "------------------  ${S_SERVICE[log]} restart rsyslog"
_lxc_exec ${S_SERVICE[log]} rc-service rsyslog restart

_echot "------------------  ${_CT_NAME} client path"
path=${S_PATH_LOG}/haproxy
_lxc_exec ${_CT_NAME} "[ -d '${path}' ] || mkdir -p ${path}"

_echot "------------------  ${_CT_NAME} client-haproxy"
file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push -q ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog

_echot "------------------  ${_CT_NAME} rsyslog restart"
_lxc_exec ${_CT_NAME} rc-service rsyslog restart

########################  LOGROTATE

_echot "------------------  ${S_SERVICE[log]} logrotate"

file=/etc/logrotate.d/${file_logrotate_host##*/}
_eval lxc file push -q ${file_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate
_lxc_exec ${S_SERVICE[log]} "chmod g-w,o= /etc/logrotate.d/*"

_echot "------------------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} rc-service crond restart

_echot "------------------  client logrotate"
file=/etc/logrotate.d/${file_logrotate_client##*/}
_eval lxc file push -q ${file_logrotate_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} logrotate
_lxc_exec ${_CT_NAME} "chmod g-w,o= /etc/logrotate.d/*"

_echot "------------------  ${_CT_NAME} crond restart"
_lxc_exec ${_CT_NAME} rc-service crond restart

########################  CLEAN LOG

_echot "------------------  ${_CT_NAME} log clean"
_lxc_exec ${_CT_NAME} "find ${S_PATH_LOG}/haproxy -name *.log -exec rm {} \;"

########################  PUBLISH

_echot "------------------  publish ${_CT_NAME}"
lxc image list -f csv -c l | grep -q ^${_CT_NAME}$ && _eval lxc image alias rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
_eval lxc publish --force ${_CT_NAME} --alias ${_CT_NAME}

########################  TEST

_echot "------------------  test haproxy"

_echoA "password to access to  haproxy: ${_HPX_ACCESS_PWD}"
_echoa "${_IPTHIS}:${_HPX_STATS_PORT}${_HPX_ACCESS_URI}"

_echot "------------------  test ${_CT_NAME}"

_echoA "To test connection type:"
_echoa "curl ${_IPTHIS}:80"
_echoa "curl ${_APA_DOM_FQDN}:80"

########################  IPTABLES

_echot "------------------  iptables"
sed -i '/^_NAT_HAPROXY=/ s|=.*$|=true|' ${_IPT_FILE_CONF}
_service restart ${_IPT_SERVICE}
_eval sleep 4

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART#++} ${S_FILE_INSTALL_DONE}
