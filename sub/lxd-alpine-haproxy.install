#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_RELEASE} ${_PART}"


########################  REQUIRED

_echoT "------------------ required vm image"
lxc image list -f json |jq -r '.[].aliases[].name' | grep -q ^${_CT_NAME_COM}$ || _exite "Unable to find image container: '${_CT_NAME_COM}'"

_echoT "------------------ required vm"
lxc list -f json |jq -r '.[].name'| grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find image container: '${S_SERVICE[log]}'"
lxc list -f json |jq -r '.[].name'| grep -q ^${S_SERVICE[http]}$ || _exite "Unable to find image container: '${S_SERVICE[http]}'"


file_haproxy_initd=${S_PATH_INSTALL_XTRA}/haproxy
file_vim=${S_PATH_SCRIPT_CONF}/.vimrc
path_haproxy=${S_PATH_INSTALL_CONF}/haproxy

_echoT "------------------ required files"
_require ${file_haproxy_initd} ${file_vim}

_echoT "------------------ required paths"
_requirep ${path_haproxy}


########################  DATA

_CT_NAME=${S_SERVICE[proxy]}

eval ${S_HOST_VM_ETH[default]}
_CT_IP=${s_base}.${S_SERVICE_BITS[proxy]}

_echoT "----------  data"

[ -z ${_HP_DOMAIN_2_FQDN+x} ] && anstmp="ggj.ovh" && _askno "Give a second fqdn second domain name ($anstmp)" && _HP_DOMAIN_2_FQDN="${_ANSWER:-$anstmp}" && _confset _HP_DOMAIN_2_FQDN "$_HP_DOMAIN_2_FQDN"
_HP_DOMAIN_2_NAME="${_HP_DOMAIN_2_FQDN%.*}" && _confset _HP_DOMAIN_2_NAME "${_HP_DOMAIN_2_NAME}"

[ -z ${_HP_ACCESS_USER+x} ] && anstmp="admin" && _askno "Enter a name for stats access ($anstmp)" && _HP_ACCESS_USER="${_ANSWER:-$anstmp}" && _confset _HP_ACCESS_USER "${_HP_ACCESS_USER}"

[ -z ${_HP_ACCESS_PWD+x} ] && anstmp="$(_pwd)" && _askno "Enter a password to stats access ($anstmp)" && _HP_ACCESS_PWD="${_ANSWER:-$anstmp}" && _confset _HP_ACCESS_PWD "${_HP_ACCESS_PWD}"

[ -z ${_HP_ACCESS_URI+x} ] && anstmp="/haproxy-stats" && _askno "Enter the URI to access to admin site ($anstmp)" && _HP_ACCESS_URI="${_ANSWER:-$anstmp}" && _confset _HP_ACCESS_URI "${_HP_ACCESS_URI}"


########################  INIT

_echoT "----------  init"

if lxc list -f json |jq -r '.[].name' | grep -q ^${_CT_NAME}$; then
	if lxc list --format=json | jq -r '.[] | select(.status == "Running").name' | grep -q ^${_CT_NAME}$; then
		_eval lxc stop ${_CT_NAME}
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}.${_SDATE}
		_eval lxc start ${_CT_NAME}
	else
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}.${_SDATE}
	fi
fi

_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global


_echoT "----------  network fixed ip"

if ! lxc list --format=json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	_eval lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
fi
_eval lxc config device set ${_CT_NAME} eth0 ipv4.address ${_CT_IP}


_echoT "----------  ${_CT_NAME} start"

_eval lxc start ${_CT_NAME}

_eval sleep 1


########################  SYSCTL

_echoT "----------  conf sysctl.conf"

file=/etc/sysctl.d/20-lxd.conf

txt="# server configuration
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout= ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time= ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl= ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}"

_lxc_exec ${_CT_NAME} "echo '${txt}' > ${file}"


########################  INSTALL

_echoT "----------  install"

_lxc_exec ${_CT_NAME} "apk update"
_lxc_exec ${_CT_NAME} "apk add haproxy bash bash-completion vim"


_echoT "----------  service set"

service=haproxy
_lxc_exec ${_CT_NAME} "rc-update add ${service}"
_lxc_exec ${_CT_NAME} "rc-service ${service} start"


########################  CONF

_echoT "----------  conf bash"

_lxc_exec ${_CT_NAME} "sed -i 's|^\(root.*\):[^:]*$|\1:/bin/bash|' /etc/passwd"
_eval lxc file push -q ${S_PATH_INSTALL_CONF}/bash-completion/haconf ${_CT_NAME}/usr/share/bash-completion/completions/

path=$(lxc exec ${_CT_NAME} -- sh -c  "ls -d /usr/share/vim/vim*/colors")
_eval "lxc file push -q ${S_PATH_INSTALL_CONF}/vim/* ${_CT_NAME}${path}/"

file=/root/.vimrc
_lxc_exec ${_CT_NAME} "[ -e ${file} ] || ln -s ${file_vim} ${file}"


_echoT "----------  conf haproxy"

path=/etc/haproxy
_lxc_exec ${_CT_NAME} "[ -d ${path} ] && mv ${path} ${path}.${_SDATE}"
_eval lxc file push -rq ${path_haproxy} ${_CT_NAME}/etc

# select alpine configuration
_lxc_exec ${_CT_NAME} "sed -i 's|^\(\s*\)#\(.*\) # alpine$|\1\2|' ${path}/haproxy.cfg"

_echoT "----------  conf variables"

# replace variables
_lxc_var_replace ${_CT_NAME} ${path} haproxy

_echoT "----------  conf enable"

_lxc_exec ${_CT_NAME} "[ -d ${path}/conf-enabled ] || mkdir -p ${path}/conf-enabled"
for str in 00-defaults 20-listen-stats 40-frontends-80 80-backends; do
	_lxc_exec ${_CT_NAME} "[ -e ${path}/conf-enabled/${str} ] || ln -s ${path}/conf-available/${str}  ${path}/conf-enabled/${str}"
done


_echoT "----------  conf init.d"

file=/etc/init.d/haproxy
_lxc_exec ${_CT_NAME} "[ -f ${file} ] && mv ${file} ${file}.${_SDATE} && chmod -x ${file}.${_SDATE}"
_eval lxc file push ${file_haproxy_initd} ${_CT_NAME}/etc/init.d/haproxy
_lxc_exec ${_CT_NAME} "chmod +x ${file}"

_echoT "----------  restart"

_lxc_exec ${_CT_NAME} "rc-service haproxy restart"


########################  CERTBOT

_echoT "----------  certbot install"

_echoI "----------  This part have to be implemented"

#_lxc_exec ${_CT_NAME} "apk add certbot"


########################  PUBLISH

_echoT "----------  publish ${_CT_NAME}"

_eval lxc image list --format=json | jq -r '.[].aliases[].name' | grep -q ^${_CT_NAME}$ && lxc image alias rename ${_CT_NAME} ${_CT_NAME}-$(date +%s)
_eval lxc publish ${_CT_NAME} --alias ${_CT_NAME} --force


########################  TEST

_echoT "----------  publish ${_CT_NAME}"

_echoI "To test connection use: curl ${_CT_NAME}:80"


########################  END

_echoT "---------- ${_PART} end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"
