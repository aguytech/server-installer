#!/bin/bash
#
# write by Aguy

_echoT "\n==========================================  ${_RELEASE} ${_PART}"

grep -q "^# ${_PART}$" ${S_FILE_INSTALL_CONF} || echo  "# ${_PART}" | _evalqr tee -a ${S_FILE_INSTALL_CONF}

########################  REQUIRED

_echoT "------------------ required vm image"
lxc image list -f csv -c l | grep -q ^${_CT_NAME_COM}$ || _exite "Unable to find image container: '${_CT_NAME_COM}'"

_echoT "------------------ required vm"
lxc list -f csv -c n | grep -q ^${S_SERVICE[log]}$ || _exite "Unable to find image container: '${S_SERVICE[log]}'"
lxc list -f csv -c n | grep -q ^${S_SERVICE[http]}$ || _exite "Unable to find image container: '${S_SERVICE[http]}'"

file_haproxy_initd=${S_PATH_INSTALL_XTRA}/haproxy
file_vim=${S_PATH_SCRIPT_CONF}/.vimrc
path_haproxy=${S_PATH_INSTALL_CONF}/haproxy

file_rsyslog_host=${S_PATH_INSTALL_CONF}/rsyslog/host-haproxy.conf
file_rsyslog_client=${S_PATH_INSTALL_CONF}/rsyslog/client-haproxy.conf
file_logrotate_host=${S_PATH_INSTALL_CONF}/logrotate/host-haproxy
file_logrotate_client=${S_PATH_INSTALL_CONF}/logrotate/client-haproxy


_echoT "------------------ required files"
_require ${file_haproxy_initd} ${file_vim} ${file_rsyslog_host} ${file_rsyslog_client} ${file_logrotate_host} ${file_logrotate_client}

_echoT "------------------ required paths"
_requirep ${path_haproxy}


########################  DATA

_CT_NAME=${S_SERVICE[proxy]}

eval ${S_HOST_VM_ETH[default]}
_CT_IP=${s_base}.${S_SERVICE_BITS[proxy]}

_HPX_STATS_PORT=${S_HAPROXY_STATS_PORTS%% *}
_HPX_STATS_2_PORT=${S_HAPROXY_STATS_PORTS#* } && _HPX_STATS_2_PORT=${_HPX_STATS_2_PORT%% *}

_echoT "----------  data"

[ -z ${_HPX_DOMAIN_2_FQDN+x} ] && anstmp="otokoz.ovh" && _askno "Give a second fqdn second domain name (${anstmp})" && _HPX_DOMAIN_2_FQDN="${_ANSWER:-$anstmp}" && _confset _HPX_DOMAIN_2_FQDN "$_HPX_DOMAIN_2_FQDN"
_HPX_DOMAIN_2_NAME="${_HPX_DOMAIN_2_FQDN%.*}" && _confset _HPX_DOMAIN_2_NAME "${_HPX_DOMAIN_2_NAME}"

[ -z ${_HPX_ACCESS_USER+x} ] && anstmp="admin" && _askno "Enter a name for stats access (${anstmp})" && _HPX_ACCESS_USER="${_ANSWER:-$anstmp}" && _confset _HPX_ACCESS_USER "${_HPX_ACCESS_USER}"

[ -z ${_HPX_ACCESS_PWD+x} ] && anstmp="$(_pwd)" && _askno "Enter a password to stats access (${anstmp})" && _HPX_ACCESS_PWD="${_ANSWER:-$anstmp}" && _confset _HPX_ACCESS_PWD "${_HPX_ACCESS_PWD}"

[ -z ${_HPX_ACCESS_URI+x} ] && anstmp="/haproxy-stats" && _askno "Enter the URI to access to admin site (${anstmp})" && _HPX_ACCESS_URI="${_ANSWER:-$anstmp}" && _confset _HPX_ACCESS_URI "${_HPX_ACCESS_URI}"


########################  INIT

_echoT "----------  init"

if lxc list -f csv -c n | grep -q ^${_CT_NAME}$; then
	if lxc list -f csv -c n status=Running| grep -q ^${_CT_NAME}$; then
		_eval lxc stop ${_CT_NAME}
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
		_eval lxc start ${_CT_NAME}-${_SDATE}
	else
		_eval lxc rename ${_CT_NAME} ${_CT_NAME}-${_SDATE}
	fi
fi

_eval lxc init ${_CT_NAME_COM} ${_CT_NAME} -p default -p global


_echoT "----------  network fixed ip"

if ! lxc list -f json | jq -r '.[] | select(.name == "'${_CT_NAME}'").devices[].name' | grep -q eth0; then
	_eval lxc network attach ${s_inet} ${_CT_NAME} eth0 eth0
fi
_eval lxc config device set ${_CT_NAME} eth0 ipv4.address ${_CT_IP}


_echoT "----------  ${_CT_NAME} start"
_eval lxc start ${_CT_NAME}


########################  SYSCTL

_echoT "----------  conf sysctl.conf"

file=/etc/sysctl.d/20-lxd.conf

txt="# server configuration
net.ipv4.tcp_max_syn_backlog = ${_MAX_SYN_BACKLOG}
net.ipv4.tcp_max_tw_buckets = ${_MAX_TW_BUCKETS}
net.ipv4.tcp_fin_timeout= ${_FIN_TIMEOUT}
net.ipv4.tcp_keepalive_time= ${_KEEPALIVE_TIME}
net.ipv4.tcp_keepalive_intvl= ${_KEEPALIVE_INTVL}
net.ipv4.tcp_keepalive_probes = ${_KEEPALIVE_PROBES}"

_lxc_exec ${_CT_NAME} "echo '${txt}' > ${file}"


########################  PROXY

_echoT "----------  proxy httpx"
for port in 80 443; do
	_eval lxc config device add ${_CT_NAME} http-${port} proxy listen=tcp:0.0.0.0:${port} connect=tcp:127.0.0.1:${port}
done

_echoT "----------  proxy stats"
for port in ${S_HAPROXY_STATS_PORTS}; do
	_eval lxc config device add ${_CT_NAME} stats-${port} proxy listen=tcp:0.0.0.0:${port} connect=tcp:127.0.0.1:${port}
done


########################  INSTALL

_echoT "----------  install"
_lxc_exec ${_CT_NAME} "apk update"
_lxc_exec ${_CT_NAME} "apk add haproxy bash bash-completion vim curl" # lnav


_echoT "----------  service set"
service=haproxy
_lxc_exec ${_CT_NAME} "rc-update add ${service}"
_lxc_exec ${_CT_NAME} "rc-service ${service} start"


########################  CONF

_echoT "----------  conf bash"

_lxc_exec ${_CT_NAME} "sed -i 's|^\(root.*\):[^:]*$|\1:/bin/bash|' /etc/passwd"
_eval lxc file push -q ${S_PATH_INSTALL_CONF}/bash-completion/haconf ${_CT_NAME}/usr/share/bash-completion/completions/

path=$(lxc exec ${_CT_NAME} -- sh -c  "ls -d /usr/share/vim/vim*/colors")
_eval "lxc file push -q ${S_PATH_INSTALL_CONF}/vim/* ${_CT_NAME}${path}/"

file=/root/.vimrc
_lxc_exec ${_CT_NAME} "[ -e ${file} ] || ln -s ${file_vim} ${file}"


_echoT "----------  conf haproxy"

path=/etc/haproxy
_lxc_exec ${_CT_NAME} "[ -d ${path} ] && mv ${path} ${path}.${_SDATE}"
_eval lxc file push -rq ${path_haproxy} ${_CT_NAME}/etc

# select alpine configuration
_lxc_exec ${_CT_NAME} "sed -i 's|^\(\s*\)#\(.*\) # alpine$|\1\2|' ${path}/haproxy.cfg"

_echoT "----------  conf variables"

# replace variables
_lxc_var_replace ${_CT_NAME} ${path} haproxy

_echoT "----------  conf enable"

_lxc_exec ${_CT_NAME} "[ -d ${path}/conf-enabled ] || mkdir -p ${path}/conf-enabled"
for str in 00-defaults 20-listen-stats 40-frontends-80 80-backends; do
	_lxc_exec ${_CT_NAME} "[ -e ${path}/conf-enabled/${str} ] || ln -s ${path}/conf-available/${str}  ${path}/conf-enabled/${str}"
done


_echoT "----------  conf init.d"

file=/etc/init.d/${file_haproxy_initd##*/}
_lxc_exec ${_CT_NAME} "[ -f ${file} ] && mv ${file} ${file}.${_SDATE} && chmod -x ${file}.${_SDATE}"
_eval lxc file push ${file_haproxy_initd} ${_CT_NAME}/etc/init.d/haproxy
_lxc_exec ${_CT_NAME} "chmod +x ${file}"


_echoT "----------  restart"

_lxc_exec ${_CT_NAME} "rc-service haproxy restart"


########################  letsencrypt
# cert.pem: Your domain’s certificate
# chain.pem: The Let’s Encrypt chain certificate
# fullchain.pem: cert.pem and chain.pem combined
# privkey.pem: Your certificate’s private key

_echoT "----------  letsencrypt install"
_lxc_exec ${_CT_NAME} "apk add certbot"

_echoT "----------  haproxy stop"
_lxc_exec ${_CT_NAME} "rc-service haproxy stop"

_echoT "----------  letsencrypt first run"
subs="ada admin blog carte chat chiffres cloud cms code compta dev diaspora discord discourse down elastik files forum gestion git gitea gitlab graylog imap info kibana links log mail manage matomo metrics monitor mx nextcloud pfa pma roundcube shaarli smtp snippet social st stats test tuleap vma vmail webmail wiki www zabbix" #  mail10 mx10
str="-d ${S_DOMAIN_FQDN}"; for sub in ${subs}; do str+=" -d ${sub}.${S_DOMAIN_FQDN}"; done
cmd="certbot certonly --standalone --preferred-challenges --non-interactive --agree-tos --email aguytech@free.fr http --http-01-port 80 ${str}"
_lxc_exec ${_CT_NAME} "${cmd}"

_echoT "----------  letsencrypt pem"
path=${S_PATH_CONF_SSL}/private
path_le=/etc/letsencrypt/live/${S_DOMAIN_FQDN}
_lxc_exec ${_CT_NAME} "cat ${path_le}/fullchain.pem ${path_le}/privkey.pem > ${path}/${S_DOMAIN_FQDN}.pem"

file_names=`_lxc_exec ${_CT_NAME} "ls -1 ${path} | grep -v ^letsencrypt"`
_lxc_exec ${_CT_NAME} "echo \"${file_names}\" > ${path}/letsencrypt.pem.lst"

_lxc_exec ${_CT_NAME}  "find ${S_PATH_CONF_SSL} -type f -exec chmod 640 '{}' \\;"
_lxc_exec ${_CT_NAME}  "find ${S_PATH_CONF_SSL}/private -type f -exec chmod 600 '{}' \\;"

_echoT "----------  haproxy start"
_lxc_exec ${_CT_NAME} "rc-service haproxy start"

_echoT "----------  letsencrypt script"

_echoT "----------  letsencrypt cron"


# https://www.digitalocean.com/community/tutorials/how-to-secure-haproxy-with-let-s-encrypt-on-centos-7


########################  RSYSLOG

if [ "${S_RSYSLOG_PTC}" = udp ]; then
	_echoT "----------  conf udp"

	file=/etc/rsyslog.conf
	_lxc_exec ${_CT_NAME} "sed -i '/#module(load=.imudp/,/#)/ s|^#||' ${file}"
	_lxc_exec ${_CT_NAME} "sed -i '/^\s*port=/ s|=.*|=\"${S_RSYSLOG_PORT}\"|' ${file}"

	_echoT "----------  restart rsyslog ${_CT_NAME}"
	_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"
fi


_echoT "----------  ${S_SERVICE[log]} host path"
path=${S_VM_PATH_LOG}/haproxy
_lxc_exec ${S_SERVICE[log]} "[ -d ${path} ] || mkdir -p ${path}"


_echoT "----------  ${S_SERVICE[log]} host-haproxy"
file=/etc/rsyslog.d/${file_rsyslog_host##*/}
_eval lxc file push ${file_rsyslog_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} rsyslog

_echoT "----------  restart rsyslog ${S_SERVICE[log]}"
_lxc_exec ${S_SERVICE[log]} "rc-service rsyslog restart"


_echoT "----------  ${S_SERVICE[log]} client path"
path=${S_PATH_LOG}/haproxy
_lxc_exec ${_CT_NAME} "[ -d ${path} ] || mkdir -p ${path}"


_echoT "----------  ${S_SERVICE[log]} client-haproxy"
file=/etc/rsyslog.d/${file_rsyslog_client##*/}
_eval lxc file push ${file_rsyslog_client} ${_CT_NAME}${file}
_lxc_var_replace ${_CT_NAME} ${file} rsyslog

_echoT "----------  rsyslog restart ${_CT_NAME}"
_lxc_exec ${_CT_NAME} "rc-service rsyslog restart"


########################  LOGROTATE

_echoT "----------  ${S_SERVICE[log]} logrotate"

file=/etc/logrotate.d/${file_logrotate_host##*/}
_eval lxc file push ${file_logrotate_host} ${S_SERVICE[log]}${file}
_lxc_var_replace ${S_SERVICE[log]} ${file} logrotate

_echoT "----------  ${S_SERVICE[log]} crond restart"
_lxc_exec ${S_SERVICE[log]} "rc-service crond restart"


_echoT "----------  client logrotate"
file=/etc/logrotate.d/${file_logrotate_client##*/}
_eval lxc file push ${file_logrotate_client} ${S_SERVICE[log]}${file}
_lxc_var_replace ${_CT_NAME} ${file} logrotate

_echoT "----------  ${_CT_NAME} crond restart"
_lxc_exec ${_CT_NAME} "rc-service crond restart"


########################  CLEAN LOG

_echoT "----------  ${_CT_NAME} log clean"
_lxc_exec ${_CT_NAME} "find ${S_PATH_LOG}/haproxy -name *.log -exec rm {} \;"


########################  PUBLISH

_echoT "----------  publish ${_CT_NAME}"

_eval lxc image list -f csv -c l | grep -q ^${_CT_NAME}$ && lxc image alias rename ${_CT_NAME} ${_CT_NAME}-$(date +%s)
_eval lxc publish --force ${_CT_NAME} --alias ${_CT_NAME}


########################  TEST

_echoT "----------  test haproxy"

_echoI "password to access to  haproxy: ${_HPX_ACCESS_PWD}"
_echoW "${_IPTHIS}:${_HPX_STATS_PORT}${_HPX_ACCESS_URI}"

_echoT "----------  test ${_CT_NAME}"

_echoI "To test connection type:"
_echo "curl ${_IPTHIS}:80"
_echo "curl ${S_DOMAIN_FQDN}:80"


########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART} ${S_FILE_INSTALL_DONE}
