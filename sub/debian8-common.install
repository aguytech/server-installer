#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  $S_RELEASE $_PART"

FILE_BASH_ALIASES="${S_PATH_SCRIPT_CONF}/.bash_aliases"
FILE_BASH_FUNCTIONS="${S_PATH_SCRIPT_CONF}/.bash_functions"
PATH_BASH_COMPLETION="${S_PATH_SCRIPT_CONF}/bash_completion"

_echoT "------------------ file required"
FILES="$FILE_BASH_ALIASES $FILE_BASH_FUNCTIONS"
for FILE in $FILES; do ! [ -e "$FILE" ] && _exitE "Unable to find file: '$FILE'"; done


####################################  MAIN

colorroot="\e[1;91m"
case "$S_SERVER_TYPE" in
	home)	color="\e[1;34m" ;;
	ovh)	color="\e[1;32m" ;;
	vz)	color="\e[1;33m" ;;
	lxd)	color="\e[1;33m" ;;
	kvm)	color="\e[1;38;5;172m" ;;
	*)	color="\e[1;34m"; colorroot=$color ;;
esac


_echoT "----------  root password change"

_askyn "Would you change the default root password "
if [ "$_ANSWER" == y ]; then
	_ask "Please enter a root password"
	passwd root <<EOF
$_ANSWER
$_ANSWER
EOF
fi


_echoT "------------------ fileconf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

#[ -z ${_MYORGA+x} ] && anstmp="$S_DOMAIN_NAME" && _askno "Please enter a organization name ($anstmp)" && _MYORGA=${_ANSWER:-$anstmp} && _confset _MYORGA "$_MYORGA"
#[ -z ${_MYDOMAIN+x} ] && anstmp="$S_DOMAIN_FQDN" && _askno "Please enter a domain name ($anstmp)" && _MYDOMAIN="${_ANSWER:-$anstmp}" && _confset _MYDOMAIN "$_MYDOMAIN"
#[ -z ${_MYEMAIL+x} ] && anstmp="$S_DOMAIN_EMAIL_ADMIN" && _askno "Please enter an administration email adress for domain ($anstmp)" && _MYEMAIL=${_ANSWER:-$anstmp} && _confset _MYEMAIL "$_MYEMAIL"
[ -z ${_MYORGA+x} ] && _MYORGA="$S_DOMAIN_NAME" && _confset _MYORGA "$_MYORGA"
[ -z ${_MYDOMAIN+x} ] && _MYDOMAIN="$S_DOMAIN_FQDN" && _confset _MYDOMAIN "$_MYDOMAIN"
[ -z ${_MYEMAIL+x} ] && _MYEMAIL="$S_DOMAIN_EMAIL_ADMIN" && _confset _MYEMAIL "$_MYEMAIL"


# home
[ "$S_SERVER_TYPE" == home ] && _evalq "chown root.1000 /home; chmod g+rwx /home"


if [ "$S_SERVER_TYPE" != "lxd" ]; then

	_echoT "----------  shell"

	# select y
	_eval "dpkg-reconfigure dash"

fi


_echoT "----------  timezone"

[ -e /etc/localtime ] && rm /etc/localtime
ln -sv /usr/share/zoneinfo/posix/Europe/Paris /etc/localtime


_echoT "----------  .bashrc"

FILE=~/.bashrc
[[ ! -f "$FILE.$DDATE" && -f "$FILE" ]] && _evalq cp -a "$FILE" "$FILE.$DDATE"

cat > ~/.bashrc << EOF
# Source global definitions
[ -f /etc/bash.bashrc ] && . /etc/bash.bashrc

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# PS1
[ "\$PS1" ] && PS1="\${debian_chroot:+(\$debian_chroot)}\[$colorroot\]\u\[\e[1;37m\]@\[$color\]\h\[\e[1;37m\]:\w\[$color\]\$\[\e[0;0m\]"

# source global variables
[ -f /etc/server/env.conf ] && . /etc/server/env.conf

# aliases
[ -f ~/.bash_aliases ] && . ~/.bash_aliases

# functions
[ -f ~/.bash_functions ] && . ~/.bash_functions
EOF

_echoT "----------  .bash_aliases"

FILE=~/.bash_aliases
[ -f "$FILE" ] && ! [ -f "$FILE.$DDATE" ] && _evalq mv "$FILE" "$FILE.$DDATE"
_evalq "ln -sv $FILE_BASH_ALIASES $FILE"


_echoT "----------  .bash_functions"

FILE=~/.bash_functions
[ -f "$FILE" ] && ! [ -f "$FILE.$DDATE" ] && _evalq mv "$FILE" "$FILE.$DDATE"
_evalq "ln -sv $FILE_BASH_FUNCTIONS $FILE"


_echoT "----------  grub"

FILE=/etc/default/grub
if [ -f "$FILE" ]; then
	# grub timeout
	STR=0; sed -i "s/^\(GRUB_TIMEOUT=\).*/\1$STR/" "$FILE"

	update-grub
fi


_echoT "----------  repository"

#apt-get install -y python-software-properties
#add-apt-repository 'deb http://http.debian.net/debian wheezy-backports main'
#if ! grep -q ${S_RELEASE_NAME}-backports /etc/apt/sources.list
#    then echo "deb http://http.debian.net/debian ${S_RELEASE_NAME}-backports main
#    deb-src http://http.debian.net/debian ${S_RELEASE_NAME}-backports main" >> /etc/apt/sources.list
#fi

FILE=/etc/apt/sources.list
[ ! -f "$FILE.$DDATE" ] && _evalq cp -p "$FILE" "$FILE.$DDATE"

echo "deb http://debian.mirrors.ovh.net/debian $S_RELEASE_NAME main contrib
deb-src http://debian.mirrors.ovh.net/debian $S_RELEASE_NAME main contrib

deb http://security.debian.org/ $S_RELEASE_NAME/updates main contrib
deb-src http://security.debian.org/ $S_RELEASE_NAME/updates main contrib

deb http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-updates main contrib
deb-src http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-updates main contrib

deb http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-backports main
deb-src http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-backports main

# old
#deb http://ftp.fr.debian.org/debian $S_RELEASE_NAME main contrib
#deb http://security.debian.org $S_RELEASE_NAME/updates main contrib
#deb http://http.us.debian.org/debian ${S_RELEASE_NAME}-updates main
#deb http://http.debian.net/debian ${S_RELEASE_NAME}-backports main
#deb-src http://http.debian.net/debian ${S_RELEASE_NAME}-backports main
" > "$FILE"


STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  dirmngr install"

	_eval "apt-get install -y dirmngr"


	_echoT "----------  mariadb repos"

	apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
	# search 0xCBCB082A1BB943DB in http://keyserver.ubuntu.com:11371/
	#FILE=${S_PATH_SCRIPT_XTRA}/mariadb-10.3-${S_RELEASE}.key
	#! [ -f "$FILE" ] && _exitE "Unable to find file: '$FILE'"
	#_evalq "apt-key add $FILE"

	FILE=/etc/apt/sources.list.d/mariadb.list
	[ -f "$FILE" ] && [ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	echo "# MariaDB 10.3 repository list - created 2018-02-01 14:48 UTC
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64,i386] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main" > "$FILE"

	_echoT "----------  pgsql repos"

	wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
	#FILE=${S_PATH_SCRIPT_XTRA}/postgresql-10.key
	#! [ -f "$FILE" ] && _exitE "Unable to find file: '$FILE'"
	#_evalq "apt-key add $FILE"

	FILE=/etc/apt/sources.list.d/pgdg.list
	[ -f "$FILE" ] && [ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	echo "deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "$FILE"

fi


_echoT "----------  upgrade"

_eval "upgrade"


_echoT "----------  install base"

_eval "apt-get install -y apt-utils bash-completion bsdmainutils cron htop iotop less logrotate lsb-release man nano netcat openssh-server rsync sysv-rc-conf telnet curl"
# acpid apt-file apt-utils dstat hdparm iputils-tracepath jwhois mlocate mtop p7zip p7zip-plugins pciutils rcconf sysstat wget

# while debian8 problem in lxd
#[ "$S_SERVER_TYPE" != lxd ]] && apt-get install -y bash-completion


_echoT "----------  bash_completion"

_evalq "cp -a "$PATH_BASH_COMPLETION"/* /etc/bash_completion.d/"


_echoT "----------  exim4 install"

_eval "apt install -y exim4-base"


_echoT "----------  exim4 conf for relaying"

FILE=/etc/exim4/update-exim4.conf.conf
[ -f "$FILE" ] && [ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
SCH='dc_eximconfig_configtype'; STR="'satellite'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_other_hostnames';       STR="''"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_local_interfaces';      STR="'127.0.0.1 ; ::1'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_readhost';              STR="'$HOSTNAME'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_relay_domains';         STR="''"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_minimaldns';            STR="'false'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_relay_nets';            STR="''"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_smarthost';             STR="'${S_SERVICE_IPS['mail']%% *}::25'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='CFILEMODE';                STR="'644'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_use_split_config';      STR="'false'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_hide_mailname';         STR="'false'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_mailname_in_oh';        STR="'true'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"
SCH='dc_localdelivery';         STR="'mail_spool'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "$FILE"

_service restart exim4

STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  install tools"

	_eval "apt-get install -y git lnav multitail mariadb-client postgresql-client"

fi


_echoT "----------  conf nano"

# *.nanorc
PATHFROM=${S_PATH_SCRIPT_XTRA}/nano
PATHTO=/usr/share/nano
FILENANO=/etc/nanorc
! grep -q "## Personnal include" "$FILENANO" && echo -e "\n## Personnal include" >> $FILENANO
for FILE in $(ls -1 "$PATHFROM"); do
	! [ -f $PATHTO/$FILE ] && _evalq "cp -a $PATHFROM/$FILE $PATHTO/"
	! grep -q "$FILE" "$FILENANO" && echo -e "include \"$PATHTO/$FILE\"" >> $FILENANO
done

FILE=/etc/nanorc
sed -i "s|^.*\(set const\)$|\1|" "$FILE"
sed -i "s|^.*\(set matchbrackets.*\)$|\1|" "$FILE"
sed -i "s|^.*\(set softwrap.*\)$|\1|" "$FILE"
SCH='tabsize'; STR='4'; sed -i "s|^.*\(set ${SCH}\).*$|\1 ${STR}|" "$FILE"
sed -i "s|^\(set cut.*\)$|# \1|" "$FILE"
sed -i "s|^\(set nowrap.*\)$|# \1|" "$FILE"
#sed -i "s|^.*\(set mouse\)$|\1|" "$FILE"


_echoT "----------  cron conf"

FILE="/etc/crontab"
STR="MAILTO=$S_DOMAIN_EMAIL_TECH"
! grep -q '^MAILTO' "$FILE" && sed -i "/^PATH=.*/ a $STR" "$FILE"


_echoT "----------  rsyslog cron conf"

FILE=/etc/rsyslog.d/cron.conf
echo "##############################  CRON
# rsyslog filter to separate cron log
cron.* action(type=\"omfile\" dirCreateMode=\"0700\" FileCreateMode=\"0644\" File=\"$S_PATH_LOG/cron.log\")
& stop" > "$FILE"


_echoT "----------  rsyslog mail conf"

FILE="/etc/rsyslog.conf"
# remove mail logs for mail.log
#sed -i 's|^\(mail\.\*.*\)$|#\1|' "$FILE"
# remove mail logs for syslog
! grep -q "mail\.\* *stop" "$FILE" && sed -i 's|^\(mail\.err.*\)$|\1\nmail.*              stop|' "$FILE"


STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  rsyslog hosting conf"

	FILE=/etc/rsyslog.conf
	[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	# udp
	if [ "$S_RSYSLOG_PTC" == udp ]; then
		sed -i "s|^#\(\$ModLoad imudp\)$|\1|" "$FILE"
		sed -i "s|^#\?\(\$UDPServerRun\).*$|\1 $S_RSYSLOG_PORT|" "$FILE"
	fi
	# tcp
	if [ "$S_RSYSLOG_PTC" == tcp ]; then
		sed -i "s|^#\(\$ModLoad imtcp\)$|\1|" "$FILE"
		sed -i "s|^#\?\(\$InputTCPServerRun\).*$|\1 $S_RSYSLOG_PORT|" "$FILE"
	fi
fi


PARTSUB="host-$_PART"
STR=" vz lxd kvm "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ] && ! grep -q "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then

	_echoT "----------  $PARTSUB"

	while ! grep -q "^$PARTSUB$" "${S_FILE_INSTALL_DONE}"; do
		_echoi "from an other terminal in server host launch:"
		_echoI "${S_PATH_SCRIPT_INSTALL}/sub/${S_HOST_RELEASE}-${PARTSUB}.install ${_CTIDTHIS} $S_FILE_INSTALL_DONE${cclear}"
		_askyn "Confirm"
	done
fi


STR=" vz lxd kvm "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  rsyslog vz conf"

	FILE=/etc/rsyslog.conf
	[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"

	sed -i "s%\t|/dev/xconsole% |/dev/console%" "$FILE"


	_echoT "----------  rsyslog conf auth"

	FILE=/etc/rsyslog.d/vm-auth.conf
	echo "##############################  AUTH
# forward auth logs from vm to hosting server $S_HOST_IPV4
#auth.* @$S_HOST_IPV4
auth.* action(type=\"omfwd\" target=\"$S_HOST_IPV4\" port=\"$S_RSYSLOG_PORT\" protocol=\"$S_RSYSLOG_PTC\")" > "$FILE"
fi


_echoT "----------  rsyslog restart"

_eval _service restart rsyslog


_echoT "----------  rsyslog mail conf"

FILE="/etc/rsyslog.conf"
# remove mail logs for mail.log
#sed -i 's|^\(mail\.\*.*\)$|#\1|' "$FILE"
# remove mail logs for syslog
#! grep -q "mail\.\* *stop" "$FILE" && sed -i 's|^\(mail\.err.*\)$|\1\nmail.*              stop|' "$FILE"


_echoT "----------  logrotate server conf"

! [ -d $S_PATH_LOG_SERVER ] && mkdir $S_PATH_LOG_SERVER

# logrotate
echo "# Logrotate file for server functions logs
#$S_PATH_LOG_INSTALL/*.info
$S_PATH_LOG_SERVER/*.log
$S_PATH_LOG_SERVER/*.err
$S_PATH_LOG_SERVER/*.info
{
    missingok
    compress
    delaycompress
    notifempty
    weekly
    rotate 8
}
" > /etc/logrotate.d/server

FILE=/etc/logrotate.d/exim4-base
STR='7'
[ -f "$FILE" ] && sed -i "s/\(\t\+rotate\).*/\1 $STR/" "$FILE"

FILE=/etc/logrotate.d/munin-node
STR='7'
[ -f "$FILE" ] && sed -i "s/\(\t\+rotate\).*/\1 $STR/" "$FILE"

FILE=/etc/logrotate.d/rsyslog
STR='5'
[ -f "$FILE" ] && sed -i "s/\(\t\+rotate\) 4/\1 $STR/" "$FILE"


STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  logrotate rsyslog conf"

	FILE=/etc/logrotate.d/rsyslog
	_eval "sed -i '\|$S_PATH_LOG/auth.log|d' '$FILE'"
	_eval "sed -i '1i$S_PATH_LOG/auth.log' '$FILE'"

	_eval "sed -i '\|$S_PATH_LOG/cron.log|d' '$FILE'"
	_eval "sed -i '1i$S_PATH_LOG/cron.log' '$FILE'"


	_echoT "----------  bind conf -IPV6"

	FILE=/etc/default/bind9
	SCH="OPTIONS="; STR="\"-u bind -4\""; sed -i "s|^\($SCH\).*|\1$STR|" "$FILE"

	_service restart bind9
fi


if [ "$S_SERVER_TYPE" != "vz" ]; then

	_echoT "----------  install ntp"

	_eval "apt-get install -y ntp"


	_echoT "----------  conf ntp"

	FILE=/etc/ntp.conf
	# /etc/ntp.conf
	[ -f "$FILE" ] && [ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	STR='.fr.pool.ntp.org'; sed -i "s/^\(server .\).*/\1$STR/" "$FILE"
	_eval "systemctl start ntp"
fi


_echoT "----------  pam remove log"

! grep -q pam_succeed_if.so /etc/pam.d/common-session-noninteractive && sed -i "s/^\(session[[:blank:]]required[[:blank:]]*pam_unix\.so.*\)$/session\t\t\t[success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid\n\1/" /etc/pam.d/common-session-noninteractive

_service restart cron


######################  CERTIFICATE

#_echoT "----------  certbot install"
#_eval "apt install -y certbot"
#_echoT "----------  generate certificates for mail. imap. smtp. "
#_eval "certbot certonly --standalone --rsa-key-size 4096 -d mail.$_MYDOMAIN -d imap.$_MYDOMAIN -d smtp.$_MYDOMAIN"


_echoT "----------  Openssl conf multi-domains"

_eval "apt install -y openssl"

FILE='/etc/ssl/openssl.cnf'
[ -f "$FILE" ] && ! [ -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"

SCH='countryName_default';            STR='FR';       sed -i "s|^\(${SCH}\s*= \).*$|\1${STR}|" "$FILE"
SCH='stateOrProvinceName_default';    STR='Britain';  sed -i "s|^\(${SCH}\s*= \).*$|\1${STR}|" "$FILE"
SCH="0\\.organizationName_default";   STR="$_MYORGA";  sed -i "s|^\(${SCH}\s*= \).*$|\1${STR}|" "$FILE"
SCH="organizationalUnitName_default"; STR="$_MYORGA";  sed -i "s|^#\?\(${SCH}\s*=\).*$|\1 ${STR}|" "$FILE"
SCH='localityName'; STR="localityName_default\t\t= Nantes"; sed -i "s|^\(${SCH}\s*= Locality Name.*\)$|\1\n${STR}|" "$FILE"
SCH='commonName'; STR="commonName_default\t\t= ${_MYDOMAIN}"; sed -i "s|^\(${SCH}\s*= Common Name.*\)$|\1\n${STR}|" "$FILE"
SCH='emailAddress'; STR="emailAddress_default\t\t= ${_MYEMAIL}"; sed -i "s|^\(${SCH}\s*= Email Address.*\)$|\1\n${STR}|" "$FILE"


_echoT "----------  clean"

_evalq "apt-get autoremove; apt-get clean; apt-get autoclean"


_echoT "----------  end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<KEEP

	_echoT "----------  mtop install"

	_eval "apt-get install -y libncurses5-dev make gcc libmariadbclient-dev"
	_eval "perl -MCPAN -e 'install Curses'"
	_eval "perl -MCPAN -e 'install Getopt::Long'"
	_eval "perl -MCPAN -e 'install Net::Domain'"
	_eval "perl -MCPAN -e 'install DBI'"
	_eval "perl -MCPAN -e 'install DBD::mysql'"

	version='0.6.6'
	_askno "Give the version of mtop to download from 'http://downloads.sourceforge.net/project/mtop/mtop' ($version) "
	version=${_ANSWER:-$version}
	cd /tmp
	wget -q "http://downloads.sourceforge.net/project/mtop/mtop/v$version/mtop-$version.tar.gz"
	tar xzf "mtop-$version.tar.gz"
	cd "mtop-$version"
	_eval "perl Makefile.PL"
	_eval "make"
	_eval "make install"

KEEP
