#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  $S_RELEASE $_PART"

_echoT "------------------ file required"
FILE_SITE="${S_PATH_INSTALL_CONF}/apache2/000-default.conf"
FILE_SITESSL="${S_PATH_INSTALL_CONF}/apache2/000-default-ssl.conf"
FILEKEY_MARIADB="${S_PATH_INSTALL_XTRA}/mariadb-10.3-${S_RELEASE}.key"
FILEKEY_POSTGRESQL="${S_PATH_INSTALL_XTRA}/postgresql-10.key"

FILES="$FILE_SITE $FILE_SITESSL $FILEKEY_MARIADB $FILEKEY_POSTGRESQL"
for FILE in $FILES; do ! [ -f "$FILE" ] && _exite "Unable to find file: '$FILE'"; done


####################################  CTID

if [ "$S_SERVER_TYPE" == vz ]; then
	_echoT "----------  ${S_SERVICE_IPS['http']}"

	# test IP
	[ "${S_SERVICE_IPS['http']/$_IPTHIS/}" == "${S_SERVICE_IPS['http']}" ] && _askno "This container is not one of the default declared for www\nConfirm or answer 'n' to exit"
	[ "$_ANSWER" == "n" ] && _exit
fi


####################################  FUNCTION


####################################  MAIN

_echoT "------------------ fileconf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

[ -z ${_PATH_WWW+x} ] && anstmp="/var/www" && _askno "path for local WWW ($anstmp)" && _PATH_WWW=${_ANSWER:-$anstmp} && _confset _PATH_WWW "$_PATH_WWW"

[ -z ${_PATH_WWW_SHARE+x} ] && anstmp="$S_VM_PATH_SHARE/www/default" && _askno "path for shared WWW ($anstmp)" && _PATH_WWW_SHARE=${_ANSWER:-$anstmp} && _confset _PATH_WWW_SHARE "$_PATH_WWW_SHARE"

[ -z ${_PATH_SSL_SHARE+x} ] && anstmp="$_PATH_WWW_SHARE/ssl" && _askno "path for shared SSL ($anstmp)" && _PATH_SSL_SHARE=${_ANSWER:-$anstmp} && _confset _PATH_SSL_SHARE "$_PATH_SSL_SHARE"

[ -z ${_MODEMPM+x} ] && _menu "Select the mpm module to enable for apache" mpm_event mpm_prefork mpm_worker && _MODEMPM=$_ANSWER && _confset _MODEMPM $_MODEMPM

[ -z ${_MODEVASIVE+x} ] && anstmp="n" && _askno "Do you want install 'evasive' module ($anstmp)" && _MODEVASIVE=${_ANSWER:-$anstmp} && _MODEVASIVE=${_GIT/n/} && _confset _MODEVASIVE "$_MODEVASIVE"

[ -z ${_GIT+x} ] && anstmp="y" && _askno "Do you want install 'git' ($anstmp)" && _GIT=${_ANSWER:-$anstmp} && _GIT=${_GIT/n/} && _confset _GIT "$_GIT"

[ -z ${_MYEMAIL+x} ] && anstmp="$S_DOMAIN_EMAIL_TECH" && _askno "Give an technical email adress for domain ($anstmp)" && _MYEMAIL=${_ANSWER:-$anstmp} && _confset _MYEMAIL "$_MYEMAIL"


_echoT "----------  data sysctl.conf"

[ -z ${_SOMAXCONN+x} ] && anstmp="4096" && _askno "Set net.core.somaxconn ($anstmp)" && _SOMAXCONN=${_ANSWER:-$anstmp} && _confset _SOMAXCONN "$_SOMAXCONN"
[ -z ${_MAX_BACKLOG+x} ] && anstmp="1024" && _askno "Set net.core.netdev_MAX_BACKLOG ($anstmp)" && _MAX_BACKLOG=${_ANSWER:-$anstmp} && _confset _MAX_BACKLOG "$_MAX_BACKLOG"
[ -z ${_FIN_TIMEOUT+x} ] && anstmp="15" && _askno "Set net.ipv4.tcp_FIN_TIMEOUT ($anstmp)" && _FIN_TIMEOUT=${_ANSWER:-$anstmp} && _confset _FIN_TIMEOUT "$_FIN_TIMEOUT"
[ -z ${_KEEPALIVE_TIME+x} ] && anstmp="300" && _askno "Set net.ipv4.tcp_KEEPALIVE_TIME ($anstmp)" && _KEEPALIVE_TIME=${_ANSWER:-$anstmp} && _confset _KEEPALIVE_TIME "$_KEEPALIVE_TIME"
[ -z ${_KEEPALIVE_PROBES+x} ] && anstmp="5" && _askno "Set net.ipv4.tcp_KEEPALIVE_PROBES ($anstmp)" && _KEEPALIVE_PROBES=${_ANSWER:-$anstmp} && _confset _KEEPALIVE_PROBES "$_KEEPALIVE_PROBES"
[ -z ${_KEEPALIVE_INTVL+x} ] && anstmp="15" && _askno "Set net.ipv4.tcp_KEEPALIVE_INTVL ($anstmp)" && _KEEPALIVE_INTVL=${_ANSWER:-$anstmp} && _confset _KEEPALIVE_INTVL "$_KEEPALIVE_INTVL"


PATHCER="${_PATH_SSL_SHARE}/certs"
PATHKEY="${_PATH_SSL_SHARE}/private"


_echoT "----------  path create"

for PATHTMP in "$_PATH_WWW" "$_PATH_WWW/html" "$_PATH_WWW_SHARE" "$_PATH_SSL_SHARE" "$PATHCER" "$PATHKEY"; do
	! [ -d "$PATHTMP" ] && _evalq mkdir -p "$PATHTMP"
	_evalq chown www-data:www-data "$PATHTMP"
done

_evalq chmod 750 "$_PATH_WWW_SHARE" "$_PATH_SSL_SHARE"

_evalq chmod 755 "$PATHCER"
_evalq chmod 750 "$PATHKEY"


####################################  CONTAINER

if [ "$S_SERVER_TYPE" == vz ]; then

	PARTSUB="host-$_PART"
	STR=" vz lxd "
	if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ] && ! grep -q "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then

		_echoT "----------  $PARTSUB"

		while ! grep -q "^$PARTSUB$" "${S_FILE_INSTALL_DONE}"; do
			_echoi "from an other terminal in server host launch:"
			_echoI "${S_PATH_INSTALL}/sub/${S_HOST_RELEASE}-${PARTSUB}.install ${_CTIDTHIS} ${_PATH_WWW_SHARE} $S_FILE_INSTALL_DONE${cclear}"
			_askyn "Confirm"
		done
	fi

fi


_echoT "----------  conf sysctl.conf"

FILE=/etc/sysctl.conf
echo -e "\n# apache2 php-fpm" >> "$FILE"
STR="net.core.somaxconn"; val="$_SOMAXCONN"; grep -q "$STR" "$FILE" && sed -i "s/^.*\($STR\).*/\1 = $val/" $FILE || echo "$STR = $val" >> "$FILE"
STR="net.core.netdev_MAX_BACKLOG"; val="$_MAX_BACKLOG"; grep -q "$STR" "$FILE" && sed -i "s/^.*\($STR\).*/\1 = $val/" $FILE || echo "$STR = $val" >> "$FILE"
STR="net.ipv4.tcp_FIN_TIMEOUT"; val="$_FIN_TIMEOUT"; grep -q "$STR" "$FILE" && sed -i "s/^.*\($STR\).*/\1 = $val/" $FILE || echo "$STR = $val" >> "$FILE"
STR="net.ipv4.tcp_KEEPALIVE_TIME"; val="$_KEEPALIVE_TIME"; grep -q "$STR" "$FILE" && sed -i "s/^.*\($STR\).*/\1 = $val/" $FILE || echo "$STR = $val" >> "$FILE"
STR="net.ipv4.tcp_KEEPALIVE_PROBES"; val="$_KEEPALIVE_PROBES"; grep -q "$STR" "$FILE" && sed -i "s/^.*\($STR\).*/\1 = $val/" $FILE || echo "$STR = $val" >> "$FILE"
STR="net.ipv4.tcp_KEEPALIVE_INTVL"; val="$_KEEPALIVE_INTVL"; grep -q "$STR" "$FILE" && sed -i "s/^.*\($STR\).*/\1 = $val/" $FILE || echo "$STR = $val" >> "$FILE"


_echoT "----------  variables set"

PATHSITE=/etc/apache2/sites-available
PATHCONF=/etc/apache2/conf-available
PATHMOD=/etc/apache2/mods-available

PACKAGES="apache2 libapache2-mod-auth-plain"

_echoT "----------  install"

[ "$_MODEVASIVE" ] && PACKAGES+=" libapache2-mod-evasive"

# libapache2-mod-geoip libapache2-mod-perl2 libapache2-mod-chroot libapache2-svn apache2-doc
_eval apt-get install -y "$PACKAGES"


_echoT "----------  install extra"

# libapache2-mod-geoip libapache2-mod-perl2 libapache2-mod-chroot libapache2-svn postgresql-client
_eval apt-get install -y curl lynx-cur

#git
[ "$_GIT" ] && _echoT "----------  git install" && _eval apt-get install -y git


_echoT "----------  modules disable"

_evalq a2dismod access_compat mpm_event mpm_prefork mpm_worker


_echoT "----------  modules enable"

modules="$_MODEMPM info rewrite info status remoteip" # dav cgid dav_svn deflate geoip perl unique_id userdir vhost_alias
[ "$_MODEVASIVE" ] && modules+=" evasive"

_evalq a2enmod "$modules"


_echoT "----------  mariadb repos"

#apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xf1656f24c74cd1d8
# search 0xf1656f24c74cd1d8 in http://keyserver.ubuntu.com:11371/
_evalq apt-key add "$FILEKEY_MARIADB"

FILE=/etc/apt/sources.list.d/mariadb.list
[ ! -f "$FILE.$DDATE" ] && [ -f "$FILE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
echo "# MariaDB 10.3 repository list - created 2018-02-01 14:48 UTC
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64,i386] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main" > "$FILE"

_echoT "----------  pgsql repos"

#wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
_evalq apt-key add "$FILEKEY_POSTGRESQL"

FILE=/etc/apt/sources.list.d/pgdg.list
[ ! -f "$FILE.$DDATE" ] && [ -f "$FILE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
echo "deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "$FILE"


_echoT "----------  apt update"

_evalq apt-get update

_echoT "----------  mariadb-client postgresql-client install"

_eval apt-get install -y mariadb-client postgresql-client


if [ "$_MODEMPM" == "mpm_worker" ]; then
	_echoT "----------  apache worker"

	FILE=$PATHMOD/mpm_worker.conf
	[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	SCH='StartServers'; STR="\t\t\t2"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MinSpareThreads'; STR="\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxSpareThreads'; STR="\t\t\t75"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadLimit'; STR="\t\t\t\t64"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadsPerChild'; STR="\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxRequestWorkers'; STR="\t\t150"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxConnectionsPerChild'; STR="\t0"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"

elif [ "$_MODEMPM" == "mpm_event" ]; then
	_echoT "----------  apache event"

	FILE=$PATHMOD/mpm_event.conf
	[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	SCH='StartServers'; STR="\t\t\t2"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MinSpareThreads'; STR="\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxSpareThreads'; STR="\t\t\t75"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadLimit'; STR="\t\t\t\t64"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadsPerChild'; STR="\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxRequestWorkers'; STR="\t\t150"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxConnectionsPerChild'; STR="\t0"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"

<<keep
	SCH='StartServers'; STR="\t\t\t1"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MinSpareThreads'; STR="\t\t\t10"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxSpareThreads'; STR="\t\t\t30"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadLimit'; STR="\t\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadsPerChild'; STR="\t\t\t15"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxRequestWorkers'; STR="\t\t90"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxConnectionsPerChild'; STR="\t0"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"

	SCH='StartServers'; STR="\t\t\t2"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MinSpareThreads'; STR="\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxSpareThreads'; STR="\t\t\t75"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadLimit'; STR="\t\t\t\t64"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='ThreadsPerChild'; STR="\t\t\t25"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxRequestWorkers'; STR="\t\t150"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
	SCH='MaxConnectionsPerChild'; STR="\t0"; sed -i "s|^\s*\($SCH\)\s*.*|\t\1$STR|" "$FILE"
keep

fi


_echoT "----------  conf servername"

echo "ServerName localhost" > $PATHCONF/servername.conf
_evalq a2enconf servername

# show
_evalq apachectl graceful

_echoT "----------  conf ssl"

FILE=$PATHSITE/default-ssl.conf
[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"


_echoT "----------  conf security"

FILE=$PATHCONF/security.conf
[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
# Require all denied
begin='#<Directory \/>'; end='#<\/Directory>'
sed -i "/^${begin}/,/^${end}/s|^#\?\(.*\)$|\1|" $path/$FILE
begin='<Directory \/>'; end='<\/Directory>'
SCH='Require'; STR="all denied"; sed -i "/^${begin}/,/^${end}/s|^\(\s*$SCH\).*$|\1 $STR|" $path/$FILE

# ServerTokens OS

# ServerSignature Off
STR=Off; sed -i "s/^\(ServerSignature\).*$/\1 $STR/" "$FILE"
# TraceEnable Off
STR=Off; sed -i "s/^\(TraceEnable\).*$/\1 $STR/" "$FILE"


_echoT "----------  apache2.conf error.log"

FILE="/etc/apache2/apache2.conf"
sed -i 's|^\(ErrorLog\).*|\1 ${APACHE_LOG_DIR}/default.err|' "$FILE"

sed -i 's|^\(.* vhost_combined\)$|RemoteIPHeader X-Forwarded-For\nLogFormat "%v:%p %a %l %u %t \\"%r\\" %>s %O \\"%{Referer}i\\" \\"%{User-Agent}i\\"" vhost_combined\n#\1|' "$FILE"
sed -i 's|^\(.* combined\)$|LogFormat "%a %l %u %t \\"%r\\" %>s %O \\"%{Referer}i\\" \\"%{User-Agent}i\\"" combined\n#\1|' "$FILE"

if [ "$_MODEVASIVE" ]; then

	_echoT "----------  conf evasive"

	FILE=$PATHMOD/evasive.conf
	[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
	SCH='DOSHashTableSize'; STR="3097"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSPageCount'; STR="4"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSSiteCount'; STR="100"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSPageInterval'; STR="1"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSSiteInterval'; STR="1"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSBlockingPeriod'; STR="10"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSEmailNotify'; STR="$_MYEMAIL"; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
	SCH='DOSLogDir'; STR="\"$S_PATH_LOG/apache2/mod_evasive.log\""; sed -i "s|^\( *\)#\($SCH *\).*$|\1\2 $STR|" "$FILE"
fi


_echoT "----------  conf info & status"

FILE=$PATHMOD/info.conf
[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
# optimize require for info
STR="\1Require ip 127.0.0.1 ${_IPS_AUTH}"; sed -i "s/\(\t\+\)\(Require*\)/$STR\n\1#\2/" "$FILE"

FILE=$PATHMOD/status.conf
[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
# optimize require for status
STR="\1Require ip 127.0.0.1 ${_IPS_AUTH}"; sed -i "s/\(\t\+\)\(Require*\)/$STR\n\1#\2/" "$FILE"


_echoT "----------  userdir conf"

FILE="/etc/apache2/mods-available/userdir.conf"
[ -f "$FILE" ] && sed -i 's|public_html|html|g' "$FILE"


_echoT "----------  other_vhosts conf"

sed -i 's|other_vhosts_access.log|other_vhosts.log|' "$PATHCONF/other-vhosts-access-log.conf"


_echoT "----------  create ping-monitor.html"

PATHTMP="$_PATH_WWW/html"
! [ -d "$PATHTMP" ] && _echoE "Unable to find path $PATHTMP"
_evalq "echo 'pong' > '$PATHTMP/ping-monitor.html'"


_echoT "----------  rights on $_PATH_WWW_SHARE"

_evalq chown -R www-data:www-data "$_PATH_WWW_SHARE" "$_PATH_SSL_SHARE"
_evalq chmod 750 "$_PATH_SSL_SHARE"


########################################  RSYSLOG

STR=" vz lxd "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  rsyslog conf apache"

	FILECONF="/etc/rsyslog.d/vm-apache.conf"
	FILE=${S_PATH_INSTALL_CONF}/rsyslog/vm-apache.conf
	[ ! -f "$FILE" ] && _exite "Unable to find file: '$FILE'"

	_evalq cp -a "$FILE" "$FILECONF"
	_var_replace "$FILECONF"


	_echoT "----------  restart rsyslog"

	systemctl restart rsyslog.service
fi


_echoT "----------  default site"

FILE=$PATHSITE/000-default.conf
[ ! -f "$FILE.$DDATE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
cp -a $FILE_SITE "$FILE"

STR=${S_HOST_IPV4//./\\\\.}; sed -i "s|S_HOST_IPV4|$STR|" "$FILE"
STR=${_VM_IP_BASE//./\\\\.}; sed -i "s|S_HOST_IPV4|$STR|" "$FILE"

_var_replace_www "$FILE"

# put tweak for compatibility to debian 8
[ "$S_HOST_RELEASE" == "debian8" ] && sed -i "s|/usr/bin/logger -t|/usr/bin/logger --rfc3164 -t|g" "$FILE"


_echoT "----------  server restart"

_evalq systemctl restart apache2


#_echoT "----------  ssl enable"
#
#_evalq a2enmod ssl


_echoT "----------  default-ssl conf"

! [ -f "${PATHKEY}/${S_NODE_IPV4}.key" ] && ! [ -f "${PATHCER}/${S_NODE_IPV4}.crt" ] && _evalq openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout "${PATHKEY}/${S_NODE_IPV4}.key" -out "${PATHCER}/${S_NODE_IPV4}.crt"

FILE="$PATHSITE/000-default-ssl.conf"
[ ! -f "$FILE.$DDATE" ] && [ -f "$FILE" ] && _evalq cp -a "$FILE" "$FILE.$DDATE"
cp -a $FILE_SITESSL "$FILE"

STR=${S_HOST_IPV4//./\\\\.}; sed -i "s|S_HOST_IPV4|$STR|" "$FILE"

SCH='SSLCertificateFile'; STR="${PATHCER}/${S_NODE_IPV4}.crt"; sed -i "s|^\(\s*$SCH\).*|\1    $STR|" "$FILE"
SCH='SSLCertificateKeyFile'; STR="${PATHKEY}/${S_NODE_IPV4}.key"; sed -i "s|^\(\s*$SCH\).*|\1 $STR|" "$FILE"

_var_replace_www "$FILE"

# put tweak for compatibility to debian 8
[ "$S_HOST_RELEASE" == "debian8" ] && sed -i "s|/usr/bin/logger -t|/usr/bin/logger --rfc3164 -t|g" "$FILE"


#_echoT "----------  ssl site enable"
#
#_evalq a2ensite 000-default-ssl.conf


_echoT "----------  server restart"

_evalq systemctl restart apache2


PARTSUB=host-apache-iptables
STR=" vz lxd "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ] && ! grep -q "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then
	_echoT "----------  $PARTSUB"

	while ! grep -q "^$PARTSUB$" "${S_FILE_INSTALL_DONE}"; do
		_echoi "To forward incoming traffic to this container '$_IPTHIS',"
		_echoi "from an other terminal in server host edit file '${S_PATH_CONF}/firewall.conf'"
		_echoI "add a key to array '_PORTSIDVZ' for Ip forwading"
		_askno "Confirm"
		[ "$_ANSWER" == n ] && _exite "exit"
	done
fi


_echoT "----------  rights /var/www"

_evalq chown www-data:www-data -R "/var/www"


_echoT "----------  Apache test"

if [ "$S_SERVER_TYPE" == vz ]; then
    IPHTTP=${S_NODE_IPV4}:${S_VM_PORT_HTTP_PRE}$_CTIDTHIS
    IPHTTPS=${S_NODE_IPV4}:${S_VM_PORT_HTTPS_PRE}$_CTIDTHIS
else
    IPHTTP=$(ifconfig $S_ETH | awk '/inet addr/{print substr($2,6)}')
    IPHTTPS=$iphhtp
fi
_echoi "Test this following addresses in your browser"
_echoI "http://$IPHTTP/server-info\nhttps://$IPHTTPS/server-status?refresh=10"
_askno "Confirm"


_echoT "----------  logrotate conf"

FILE=/etc/logrotate.d/apache2
! grep -q "$S_PATH_LOG/apache2/\*.info" $FILE && sed -i "1i$S_PATH_LOG/apache2/*.info" "$FILE"
! grep -q "$S_PATH_LOG/apache2/\*.err" $FILE && sed -i "1i$S_PATH_LOG/apache2/*.err" "$FILE"


_echoT "----------  log old delete"

FILES="$S_PATH_LOG/apache2/error.log $S_PATH_LOG/apache2/access.log $S_PATH_LOG/apache2/other_vhosts_access.log"
for FILE in $FILES; do [ -f "$FILE" ] && rm $FILE; done


####################################  USAGE

_echoT "----------  conf S_USAGE www"
_confset "S_USAGE" "www" "$S_GLOBAL_CONF"

_echoT "----------  conf S_PARTS $_PART"
_confmulti_add "S_PARTS" "$_PART" "$S_GLOBAL_CONF"


####################################  END

_echoT "----------  end"

_evalq _var_unset "part" "*"
_evalq _partadd "$_PART" "$S_FILE_INSTALL_DONE"


<<KEEP

. $S_GLOBAL_CONF

FILE='/etc/ssl/openssl.cnf'
FILEMULTI='/etc/ssl/openssl-localhost.cnf'
DOMAIN="$S_NODE_IPV4"
SUBDOMAINS="localhost 127.0.0.1"

_FILESSLKEY="${_PATH_SSL_SHARE}/private/$DOMAIN.key"
_FILESSLCSR="${_PATH_SSL_SHARE}/certs/$DOMAIN.csr"
_FILESSLCRT="${_PATH_SSL_SHARE}/certs/$DOMAIN.crt"

# filemulti
if ! [ -f $FILEMULTI ]; then
	DNS="$(return=; for SUB in $SUBS; do return+="DNS:$SUB,"; done; echo $return)"
	DNS=${DNS%,}
	cp -a $FILE $FILEMULTI
	sed -i "s|^.*\(req_extensions = v3_req.*\)$|\1|" $FILEMULTI
	sed -i "s|^\(commonName_default\s*=\).*|\1 $DOMAIN|" $FILEMULTI
	sed -i "s|^\(\[ v3_req \].*\)$|\1\n\nsubjectAltName = ${DNS}|" $FILEMULTI
fi

# generate certificate
if ! [[ -f $_FILESSLKEY && -f $_FILESSLCRT ]]; then

	_echoT "----------  Openssl generate for ${DOMAIN}"

	openssl genrsa -out $_FILESSLKEY 2048
	openssl req -new -out $_FILESSLCSR -key $_FILESSLKEY -config $FILEMULTI
	openssl req -text -noout -in $_FILESSLCSR
	_askno "Please verify in lines above the valid subdomains are present & valid to continue"

	openssl x509 -req -days 3650 -in $_FILESSLCSR -signkey $_FILESSLKEY -out $_FILESSLCRT -extensions v3_req -extfile $FILEMULTI

	chmod 0444 $_FILESSLCSR
	chmod 0400 $_FILESSLKEY
fi


KEEP
