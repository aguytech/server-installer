#!/bin/bash
#
# write by Aguy

<<TODO

USE FALLBACK RELAY to 181
relayhost = [admin1.hl.local]
fallback_relay = [admin2.hl.local]

TODO


_echoT "\n==========================================  $S_RELEASE $_PART"

file_env="${S_PATH_SCRIPT_CONF}/env"
file_bash_aliases="${S_PATH_SCRIPT_CONF}/.bash_aliases"
file_bash_functions="${S_PATH_SCRIPT_CONF}/.bash_functions"
path_install_bash_completion="${S_PATH_INSTALL_CONF}/bash_completion"

file_vim="${S_PATH_SCRIPT_CONF}/.vimrc"
file_tmux="${S_PATH_SCRIPT_CONF}/.tmux.conf"

_echoT "----------  required files"

_require "${file_env}" "${file_bash_aliases}" "${file_bash_functions}" "${file_vim}" "${file_tmux}"


####################################  MAIN

_echoT "----------  root password change"

_askyn "Do you change the default root password"
if [ "$_ANSWER" = y ]; then
	_ask "Please enter a root password"
	passwd root <<<"$_ANSWER
$_ANSWER
"
fi


_echoT "----------  home"

# home
[ "$S_SERVER_TYPE" = home ] && _evalq chown root:1000 /home && _evalq chmod g+rwx /home


_echoT "----------  .bashrc"

file=~/.bashrc
_keepcpts "${file}"

sed -i '/^HISTSIZE/ s/=.*/=2000/' "${file}"
sed -i '/^HISTFILESIZE/ s/=.*/=6000/' "${file}"
sed -i '/^#force_color_prompt/ s/^#//' "${file}"

color_root="\033[01;31m"
case "$S_SERVER_TYPE" in
	home)	color='\\[\\033[01;34m\\]' ;;
	ovh)	color='\\[\\033[01;32m\\]' ;;
	docker)	color='\\[\\033[01;33m\\]' ;;
	kvm)	color='"\\[\\033[01;38;5;172m\\]' ;;
	lxd)	color='\\[\\033[01;33m\\]' ;;
	*)		color='\\[\\033[01;34m\\]'; color_root=$color ;;
esac

# PS1
ps1='${debian_chroot:+($debian_chroot)}'${color}'\\h\\[\\033[00m\\]\\w\\[\\033[01;31m\\]\\$\\[\\033[00m\\]'
# no root
#ps1='${debian_chroot:+($debian_chroot)}\\[\\033[01;31m\\]\\u\\[\\033[00m\\]@\\[\\033[01;32m\\]\\h\\[\\033[00m\\]:\\w\\[\\033[01;31m\\]\\$\\[\\033[00m\\]'
sed -i "\|if \[ \"\$color_prompt\" = yes \]|{n;s|=.*|='$ps1'|}" "${file}"

! grep -q '${file_env}' "${file}" && echo '

# source global variables
[ -f ${file_env} ] && . ${file_env}

# aliases
[ -f ~/.bash_aliases ] && . ~/.bash_aliases

# functions
[ -f ~/.bash_functions ] && . ~/.bash_functions
' >> "${file}"

_source "${file}"

_echoT "----------  .bash_aliases"

file=~/.bash_aliases
_keepmvts "${file}"
_evalq ln -s "${file_bash_aliases}" "${file}"


_echoT "----------  .bash_functions"

file=~/.bash_functions
_keepmvts "${file}"
_evalq ln -s "${file_bash_functions}" "${file}"


_echoT "----------  repository"

str=" ovh home "
if [ "${str/ "$S_SERVER_TYPE" /}" != "$str" ]; then

	_echoT "----------  mariadb repos"

	apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8

	#add-apt-repository -y 'deb [arch=amd64,arm64,ppc64el] http://mirror.mva-n.net/mariadb/repo/10.4/ubuntu bionic main'
	file=/etc/apt/sources.list.d/mariadb.list
	echo "# MariaDB 10.4
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64,arm64,ppc64el] http://mirror.mva-n.net/mariadb/repo/10.4/ubuntu bionic main
# deb-src [arch=amd64,arm64,ppc64el] http://mirror.mva-n.net/mariadb/repo/10.4/ubuntu bionic main
" > "${file}"

	_echoT "----------  pgsql repos"

	wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

	file=/etc/apt/sources.list.d/pgdg.list
	echo "# PostgreSQL
deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "${file}"

fi


_echoT "----------  upgrade"

_eval "upgrade"


_echoT "----------  install base"

_eval "apt install -y zfsutils-linux apt-utils bsdmainutils cron curl htop iotop logrotate lsb-release man netcat openssh-server rsync jq" # vim acpid apt-file apt-utils dstat hdparm iputils-tracepath jwhois mlocate mtop p7zip p7zip-plugins pciutils wget telnet yq


_echoT "----------  bash completion"

_evalq cp -a "${path_install_bash_completion}"/* "/usr/share/bash-completion/completions/"


_echoT "----------  conf tmux"

file="$HOME/.tmux.conf"
_keepmvts "${file}"
_eval ln -s "${file_tmux}" "${file}"

# colorscheme
_eval cp ${S_PATH_INSTALL_CONF}/vim/*.vim /usr/share/vim/vim*/colors/

_echoT "----------  conf vim"

_eval update-alternatives --set editor /usr/bin/vim.basic

file="$HOME/.vimrc"
_keepmvts "${file}"
_eval ln -s "${file_vim}" "${file}"

# colorscheme
_eval cp ${S_PATH_INSTALL_CONF}/vim/*.vim /usr/share/vim/vim*/colors/

_echoT "------------------ nano"

for str in conf install; do
	cp -a /usr/share/nano/sh.nanorc /usr/share/nano/$str.nanorc
	sed -i 's|^\(syntax \).*|\1"'$str'" "\.'$str'$"|' /usr/share/nano/$str.nanorc
done

file=/etc/nanorc
_keepcpts "${file}"

sed -i 's|^.*\(set tabsize\).*|\1 4|' "${file}"
sed -i 's|^\(set cut.*\)$|# \1|' "${file}"
sed -i 's|^\(set linenumbers.*\)$|# \1|' "${file}"
sed -i '/^# *include/ s/^# //' "${file}"

# various
opts="constantshow historylog matchbrackets multibuffer nohelp softwrap"
# color
opts+=" errorcolor functioncolor keycolor numbercolor selectedcolor statuscolor stripecolor titlecolor"
# uncomment
for opt in $opts; do
	sed -i "s|^.*\(set $opt .*\)$|\1|" "${file}"
done


_echoT "----------  cron conf"

file="/etc/crontab"
str="MAILTO=$S_DOMAIN_EMAIL_TECH"
! grep -q '^MAILTO' "${file}" && sed -i "/^PATH=.*/ a $str" "${file}"


_echoT "----------  rsyslog cron conf"

file=/etc/rsyslog.d/cron.conf
echo "#  CRON
# rsyslog filter to separate cron log
cron.* action(type=\"omfile\" dirCreateMode=\"0700\" FileCreateMode=\"0644\" File=\"$S_PATH_LOG/cron.log\")
& stop" > "${file}"


<<KEEP
_echoT "----------  rsyslog mail conf"

file="/etc/rsyslog.conf"
# remove mail logs for mail.log
#sed -i 's|^\(mail\.\*.*\)$|#\1|' "${file}"
# remove mail logs for syslog
! grep -q "mail\.\* *stop" "${file}" && sed -i 's|^\(mail\.err.*\)$|\1\nmail.*              stop|' "${file}"
KEEP


if [[ " home ovh " = *" $S_SERVER_TYPE "* ]]; then

	_echoT "----------  rsyslog hosting conf"

	file=/etc/rsyslog.conf
	_keepcpts "${file}"

	# udp
	if [ "$S_RSYSLOG_PTC" = udp ]; then
		sed -i "s|^#\(\$ModLoad imudp\)$|\1|" "${file}"
		sed -i "s|^#\?\(\$UDPServerRun\).*$|\1 $S_RSYSLOG_PORT|" "${file}"
	fi

	# tcp
	if [ "$S_RSYSLOG_PTC" = tcp ]; then
		sed -i "s|^#\(\$ModLoad imtcp\)$|\1|" "${file}"
		sed -i "s|^#\?\(\$InputTCPServerRun\).*$|\1 $S_RSYSLOG_PORT|" "${file}"
	fi
fi


PARTSUB="host-$_PART"
if [[ " docker kvm lxd kvm " = *" $S_SERVER_TYPE "* ]] && ! grep -q "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then

	_echoT "----------  $PARTSUB"

	while ! grep -q "^$PARTSUB$" "${S_FILE_INSTALL_DONE}"; do
		_echoi "from an other terminal in server host launch:"
		_echoI "${S_PATH_INSTALL}/sub/${S_HOST_RELEASE}-${PARTSUB}.install ${_CTIDTHIS} $S_FILE_INSTALL_DONE${cclear}"
		_askyn "Confirm"
	done
fi


if [[ " docker kvm lxd kvm " = *" $S_SERVER_TYPE "* ]]; then

	_echoT "----------  rsyslog conf auth"

	file=/etc/rsyslog.d/vm-auth.conf
	echo "##############################  AUTH
# forward auth logs from vm to hosting server ${S_SERVICE_LOG}
#auth.* @${S_SERVICE_LOG}
auth.* action(type=\"omfwd\" target=\"${S_SERVICE_LOG}\" port=\"${S_RSYSLOG_PORT}\" protocol=\"${S_RSYSLOG_PTC}\")" > "${file}"
fi


_echoT "----------  rsyslog restart"

_service restart rsyslog


_echoT "----------  logrotate server conf"

! [ -d $S_PATH_LOG_SERVER ] && mkdir $S_PATH_LOG_SERVER

# logrotate
echo "# Logrotate file for server functions logs
#$S_PATH_LOG_INSTALL/*.log
$S_PATH_LOG_SERVER/*.log
$S_PATH_LOG_SERVER/*.err
$S_PATH_LOG_SERVER/*.debug
{
    missingok
    compress
    delaycompress
    notifempty
    weekly
    rotate 8
}
" > /etc/logrotate.d/server

file=/etc/logrotate.d/rsyslog
str='5'
[ -f "${file}" ] && sed -i "s/\(\t\+rotate\) 4/\1 $str/" "${file}"


if [[ " home ovh " = *" $S_SERVER_TYPE "* ]]; then

	_echoT "----------  logrotate rsyslog conf"

	file=/etc/logrotate.d/rsyslog
	sed -i "\|$S_PATH_LOG/auth.log|d" "${file}"
	sed -i "1i$S_PATH_LOG/auth.log" "${file}"

	sed -i "\|$S_PATH_LOG/cron.log|d" "${file}"
	sed -i "1i$S_PATH_LOG/cron.log" "${file}"


	_echoT "----------  bind conf -IPV6"

	file=/etc/default/bind9
	sch="OPTIONS="; str="\"-u bind -4\""; sed -i "s|^\($sch\).*|\1$str|" "${file}"

	_service restart bind9
fi


if [[ " home ovh kvm " = *" $S_SERVER_TYPE "* ]]; then

	_echoT "----------  install ntp"

	_eval "apt-get install -y ntp"


	_echoT "----------  conf ntp"

	file=/etc/ntp.conf
	_keepcpts "${file}"

	str='.fr.pool.ntp.org'; sed -i "s/^\(server .\).*/\1$str/" "${file}"
	_eval "systemctl start ntp"
fi


######################  CERTIFICATE

#_echoT "----------  certbot install"
#_eval "apt install -y certbot"
#_echoT "----------  generate certificates for mail. imap. smtp. "
#_eval "certbot certonly --standalone --rsa-key-size 4096 -d mail.$S_DOMAIN_FQDN -d imap.$S_DOMAIN_FQDN -d smtp.$S_DOMAIN_FQDN"


_echoT "----------  openssl conf multi-domains"

_eval "apt install -y openssl"

file='/etc/ssl/openssl.cnf'
_keepcpts "${file}"

sed -i "/countryName_default/ s|=.*|= FR|" "${file}"
sed -i "/stateOrProvinceName_default/ s|=.*|= Britain|" "${file}"
sed -i "/0\.organizationName_default/ s|=.*|= ${S_DOMAIN_NAME}|" "${file}"
sed -i "/#\?organizationalUnitName_default/ {s|^#||;s|=.*|= ${S_DOMAIN_NAME}|}" "${file}"
sed -i "/localityName\s*= Locality Name/ a localityName_default\t\t= Nantes" "${file}"
sed -i "/commonName\s*= Common Name/ a commonName_default\t\t= ${S_DOMAIN_FQDN}" "${file}"
sed -i "/emailAddress\s*= Email Address/ a emailAddress_default\t\t= ${S_DOMAIN_EMAIL_ADMIN}" "${file}"


_echoT "----------  clean"

_evalq "apt-get -y autoremove; apt-get clean; apt-get autoclean"


_echoT "----------  end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<KEEP

_echoT "----------  pam remove log"

! grep -q 'pam_succeed_if.so' /etc/pam.d/common-session-noninteractive && sed -i "s/^\(session[[:blank:]]required[[:blank:]]*pam_unix\.so.*\)$/session\t\t\t[success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid\n\1/" /etc/pam.d/common-session-noninteractive

_service restart cron


	_echoT "----------  mtop install"

	_eval "apt-get install -y libncurses5-dev make gcc libmariadbclient-dev"
	_eval "perl -MCPAN -e 'install Curses'"
	_eval "perl -MCPAN -e 'install Getopt::Long'"
	_eval "perl -MCPAN -e 'install Net::Domain'"
	_eval "perl -MCPAN -e 'install DBI'"
	_eval "perl -MCPAN -e 'install DBD::mysql'"

	version='0.6.6'
	_askno "Give the version of mtop to download from 'http://downloads.sourceforge.net/project/mtop/mtop' ($version) "
	version=${_ANSWER:-$version}
	cd /tmp
	wget -q "http://downloads.sourceforge.net/project/mtop/mtop/v$version/mtop-$version.tar.gz"
	tar xzf "mtop-$version.tar.gz"
	cd "mtop-$version"
	_eval "perl Makefile.PL"
	_eval "make"
	_eval "make install"

KEEP
