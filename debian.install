#!/bin/bash
#
# write by Aguy

<<MANUALY
rsync --exclude=/.git /usr/local/bs/ root@node2:/usr/local/bs/ -av --delete

cmds="apt update
apt dist-upgrade
apt install rsync zfsutils-linux
ln -sv /usr/local/bs/install/xtra/conf/.bash_aliases $HOME/.bash_aliases"

ssh root@node2 bash -i <<<$cmds
MANUALY

################################ global functions
#S_TRACE=debug

if [[ -z "$S_GLOBAL_FUNCTIONS" || -f $S_GLOBAL_FUNCTIONS ]]; then
	file="/usr/local/bs/inc-functions"
	if ! . "$file"; then echo -e "\e[1;31merror - unable to find file '$file' from ${BASH_SOURCE[0]}\e[0;0m" && exit 1; fi
fi
. $S_GLOBAL_FUNCTIONS

################################  DATA

################################  mandatory parts

# mandatory _RELEASE conf
_PART="conf"
_echoD "_PART='$_PART'"
! _parthave "$_PART" "$S_FILE_INSTALL_DONE" && _source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"


# openvz
PARTSUB=host-root
if [ "$S_SERVER_TYPE" = "vz" ] && ! _parthave "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then
	_echoi "to mount device(s) in this container\nexit from this container ${_CTIDTHIS} and from hosting server launch:"
	_echoI "${_PATH_BASE_SUB}/${S_HOST_RELEASE}-${PARTSUB}.install ${_CTIDTHIS} $S_PATH_LOG_INSTALL/${S_RELEASE}.done"
	_exit
fi
#echo "MOUNT openVZ PARTSUB" && _exit

# mandatory _RELEASE
partsmandatory="common ssh"
for _PART in $partsmandatory; do
	_echoD "_PART='$_PART'"
	! _parthave "$_PART" "$S_FILE_INSTALL_DONE" && _source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
done


################################  MENU

while [ "$_PART" != quit ]; do

	partsall="$(sed -n "s|^\t*\(\w\+\)) # .*$S_SERVER_TYPE.*$|\1|p" "$0" | xargs)"
	partsrelease=" $(ls -1 "$_PATH_BASE_SUB"/*${S_RELEASE}* | sed -n "s|.*${S_RELEASE}-\(.*\)\.install|\1|p" | xargs) "
	partsmade=" $(cat ${S_FILE_INSTALL_DONE} | xargs) "
	parts2do=
	for part in $partsall; do
		[ "${partsmade/ $part /}" = "$partsmade" ] && [ "${partsrelease/ $part /}" != "$partsrelease" ] && parts2do+="$part "
	done

	_echoD "partsall='$partsall'"
	_echoD "partsmade='$partsmade'"
	_echoD "parts2do='$parts2do'"

	_echo "Part already made: ${blueb}$partsmade${cclear}"
	PS3="Write your choice: "
	select _PART in quit $parts2do
	do
		case "$_PART" in
			quit)
				break
				;;
			apache) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			app-matomo) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			app-nextcloud) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			app-phpmyadmin) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			app-postfixadmin) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			app-roundcube) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			app-vmailmanage) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			fail2ban) # ovh
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			haproxy) # ovh home
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			iptables) # ovh
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			kvm) # ovh
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			logwatch) # ovh
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			mail) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			mariadb) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			openvz-1) # ovh
				# put vz command in host
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			openvz-2) # ovh
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			php) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			php73) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			php7) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			postfix) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			postfix-ovh) # ovh vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			redis) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			g1) # vz lxd
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			*)
				_echoE "Wrong option: '$_PART'"
				;;
		esac
		break
	done

done

_exit


<<KEEP
# wipe free disk space

FILE=/tmp/test
paths="$(df -l |grep "^/dev.*" |sed "s|^.* \([^ ]*\)$|\1|" | sed "/save/d")"
#paths='/ /var'
echo '#!/bin/bash' > "$FILE"
for path in $paths
do
        echo "# $path" >> "$FILE"
        echo "(echo \"start $path - pid $! - \$(date +\"%T - %N\")\"; cd $path; dd if=/dev/zero of=free2zero; rm free2zero; echo \"end $path \$(date +\"%T - %N\")\"; exit) &" >> "$FILE"
done
chmod +x "$FILE"
#cat "$FILE"
sh "$FILE"

#watch -dn10 df
KEEP

<<KEEP
# rescue

HOST=ns398616

DIRSAVE=/dev/mapper/vg-save
RELEASE=debian7

apt-get install -y

DATE=$(date +"%Y%m%d")
VD="/dev/sda"
VDP=${VD#/}; VDP=${VDP//\//_}
DIR="/mnt/save"
DIRBCK="$DIR/backup/rescue"
#VOLS="/dev/sda1 /dev/mapper/vg-lvvar /dev/mapper/vg-lvvz /dev/mapper/vg-lvvzdump /dev/mapper/vg-lvlibvirt"
VOLS=$(blkid |grep "^/dev/.*TYPE=\"ext4\".*" |sed "s|^\([^:]*\):.*$|\1|" |sed "/save/d")

#apt-get install -y lsb-release
#RELEASE=$(lsb_release -sc)
whiteb='\e[1;1m'; redb='\e[1;31m'; greenb='\e[1;32m'; blueb='\e[1;34m'; magentab='\e[1;35m'; yellowb='\e[1;33m'; cclear='\e[0;0m'

blkid
echo $VOLS

# mount
! [ -d $DIR ] && mkdir -p $DIR
mount $DIRSAVE /mnt/save
! [ -d $DIRBCK ] && mkdir -p $DIRBCK
cd $DIRBCK

sudo bs=446 count=1 if=/dev/sda of="$HOST-${RELEASE}-${DATE}-mbr.iso"
sudo bs=512 count=1 if=/dev/sda of="$HOST-${RELEASE}-${DATE}-mbrpt.iso"

for VOL in $VOLS
do
	echo -e "${blueb}************************  $VOL${cclear}"
	VOLNAME=${VOL#/dev/}; VOLNAME=${VOLNAME//\//_}
	e2fsck -f $VOL
	SIZE=$(fdisk -l /dev/sda1 |grep "^Disk.*" |sed "s/^Disk .*, \([0-9]*\) bytes, .*$/\1/")
	dcfldd bs=4096 if=$VOL | gzip > $HOST-$RELEASE-$DATE-$VOLNAME.iso.gz
done

# umount
cd
umount /mnt/save

reboot
KEEP

<<KEEP
# restore rescue

DIR="/mnt/save"
DIRBCK="$DIR/backup/rescue"
# mount
! [ -d $DIR ] && mkdir -p $DIR
mount /dev/mapper/vg-lvsave /mnt/save
! [ -d $DIRBCK ] && mkdir -p $DIRBCK
cd $DIRBCK

dcfldd bs=512 count=1 if=ns398616-debian7-20160306-mbrpt.iso of=/dev/sda
gzip -c ns398616-debian7-20160306-sda1.iso.gz | bs=4096 of=/dev/sda1
gzip -c ns398616-debian7-20160306-mapper_vg-lvvar.iso.gz | bs=4096 of=/dev/mapper/vg-lvvar
KEEP
