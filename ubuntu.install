#!/bin/bash
#
# write by Aguy

<<MANUALY
#[ -e /home/ubuntu/.bash_aliases ] || sudo ln -sv /usr/local/bs/conf/.bash_aliases /home/ubuntu/.bash_aliases
#[ -e /root/.bash_aliases ] || sudo ln -sv /usr/local/bs/conf/.bash_aliases /root/.bash_aliases

rm ~/.ssh/known_hosts

# HOME
server=node1 && ssh_port=2002

cmds="echo '-------------- update' && sudo apt update
echo '-------------- upgrade' && sudo apt -y dist-upgrade
echo '-------------- clean' && sudo apt -y autoremove
echo '-------------- install' && sudo apt install -y rsync zfsutils-linux
echo '-------------- conf ssh' && sudo  cp -a /root/.ssh/authorized_keys /root/.ssh/authorized_keys.$(date +%s)
sudo sed -i 's|^no-port-forwarding.* \(ssh-rsa .*\)$|\1|' /root/.ssh/authorized_keys
sudo sed -i 's|^#\?\(PermitRootLogin\) .*$|\1 without-password|' /etc/ssh/sshd_config
sudo sed -i 's|^#\?\(Port\) .*$|\1 ${ssh_port}|' /etc/ssh/sshd_config
echo '-------------- restart ssh' && sudo systemctl restart ssh.service"

ssh ubuntu@${server} -p22 "${cmds}"

rsync -e "ssh -p${ssh_port}" /home/shared/dev/bs/ root@${server}:/usr/local/bs/ --exclude=/.git* --delete -av && rsync -e "ssh -p${ssh_port}" /home/shared/dev/install/ root@${server}:/usr/local/install/ --exclude=/.git* --delete -av

# HOST
ssh root@${server} -p${ssh_port}

blkid|grep -v squashfs
fdisk /dev/sda # m p F n w | extend with lxd:+50G / save:available
blkid|grep -v squashfs

/usr/local/install/ubuntu.install
# cp /usr/local/install/conf/server.conf-ovh /etc/server/server.conf
# rsync -e "ssh -p${ssh_port}" /home/nikita/dev/install/conf/server.conf-ovh root@${server}:/etc/server/server.conf -av
MANUALY

################################ global functions
S_TRACE=debug

# allow conf-init
_INSTALL=ubuntu

if [[ -z "${S_GLOBAL_FUNCTIONS}" || -f ${S_GLOBAL_FUNCTIONS} ]]; then
	S_GLOBAL_FUNCTIONS="/usr/local/bs/inc-functions.sh"
	if ! . "${S_GLOBAL_FUNCTIONS}"; then echo -e "\e[1;31merror - unable to find file '${S_GLOBAL_FUNCTIONS}' from ${BASH_SOURCE[0]}\e[0;0m" && exit 1; fi
fi
. ${S_GLOBAL_FUNCTIONS}

################################  mandatory parts

# common + ssh
parts="init common ssh"
for _PART in $parts; do
	! _parthave "${_PART}" "${S_FILE_INSTALL_DONE}" && _source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
done


################################  MENU

while [ "${_PART}" != "quit" ]; do

	partsall="$(sed -n "s|^\t*\(\w\+\)) # .*${S_SERVER_TYPE}.*$|\1|p" "$0" | xargs)"
	partsrelease=" $(ls -1 "${_PATH_BASE_SUB}"/*${S_RELEASE}* | sed -n "s|.*${S_RELEASE}-\(.*\)\.install|\1|p" | xargs) "
	partsmade=" $(cat ${S_FILE_INSTALL_DONE} | xargs) "
	parts2do=
	for part in $partsall; do
		[ "${partsmade/ $part /}" = "$partsmade" ] && [ "${partsrelease/ $part /}" != "$partsrelease" ] && parts2do+="$part "
	done

	_echoD "partsall='$partsall'"
	_echoD "partsmade='$partsmade'"
	_echoD "parts2do='$parts2do'"

	_echo "Part already made: ${blueb}$partsmade${cclear}"
	PS3="Give your choice: "
	select _PART in quit $parts2do; do
		case "${_PART}" in
			quit)
				break
				;;
			iptables) # ovh
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			lxd) # ovh home
				_source "${_PATH_BASE_SUB}/${S_RELEASE}-${_PART}.install"
				;;
			*)
				_echoE "Wrong option: '${_PART}'"
				;;
		esac
		break
	done

done

_exit

<<KEEP
# wipe free disk space

file=/tmp/wipe.$(date +%s)
paths="$(df -l | grep ^/dev/ | sed 's|.* \([^ ]\+\)$|\1|' | sed '/save/d')"
#paths='/ /var'
echo '#!/bin/bash' > "$file"
for path in $paths
do
	echo "# $path" >> "$file"
	echo "(echo \"start $path - pid $! - \$(date +\"%T - %N\")\"; cd $path; dd if=/dev/zero of=free2zero; rm free2zero; echo \"end $path \$(date +\"%T - %N\")\"; exit) &" >> "$file"
done
chmod +x "$file"
sh "$file"
KEEP

<<KEEP
# rescue LVM

path_save_vm=/dev/mapper/vg-save
path_save="/mnt/save"
path_backup="${path_save}/backup/rescue"
#vols="/dev/sda1 /dev/mapper/vg-lvvar /dev/mapper/vg-lvvz /dev/mapper/vg-lvvzdump /dev/mapper/vg-lvlibvirt"
vols=$(blkid | grep "^/dev/.*TYPE=\"ext4\".*" | sed "s|^\([^:]*\):.*$|\1|" | sed "/save/d")

host="$HOSTNAME"
ddate=$(date +"%Y%m%d")

file="/etc/os-release"
eval "$(grep '^VERSION_ID=' "$file")" # define VERSION_ID
eval "$(grep '^ID=' "$file")" # define VERSION_ID
release="${ID}${VERSION_ID}"

# show
blkid
echo ${vols}

# mount
! [ -d "${path_save}" ] && mkdir -p "${path_save}"
mount ${path_save_vm} "${path_save}"
! [ -d $path_backup ] && mkdir -p $path_backup
cd "${path_backup}"

sudo dd --progress bs=446 count=1 if=/dev/sda of="${host}-${release}-${ddate}-mbr446.iso"
sudo dd --progress bs=512 count=1 if=/dev/sda of="${host}-${release}-${ddate}-mbr.iso"

for vol in ${vols}
do
	echo -e "************************  ${vol}"
	vol_name=${vol#/dev/}; vol_name=${vol_name//\//_}
	e2fsck -f $vol
	dd --progress bs=4096 if=${vol} | gzip > ${host}-$release-${ddate}-${vol_name}.iso.gz
done

# umount
cd
umount /mnt/save

reboot
KEEP

<<KEEP
# restore rescue

path="/mnt/save"
path_backup="${path}/backup/rescue"
# mount
! [ -d "${path}" ] && mkdir -p "${path}"
mount /dev/mapper/vg-lvsave /mnt/save
! [ -d "${path_backup}" ] && mkdir -p "${path_backup}"
cd "${path_backup}"

dd bs=512 count=1 if=ns398616-debian7-20160306-mbrpt.iso of=/dev/sda
gzip -c ns398616-debian7-20160306-sda1.iso.gz | bs=4M status=progress of=/dev/sda1
gzip -c ns398616-debian7-20160306-mapper_vg-lvvar.iso.gz | bs=4M status=progress of=/dev/mapper/vg-lvvar
KEEP
