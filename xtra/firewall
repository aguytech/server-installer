#!/bin/bash
#
### BEGIN INIT INFO
# Provides:				firewall
# Short-Description:	Regles iptables
# Required-Start:		$remote_fs $syslog
# Required-Stop:		$remote_fs $syslog
# Default-Start:		2 3 4 5
# Default-Stop:			0 1 6
# Short-Description:	start/startvm/stop/stopnot/restart/restartnat firewall
#						manage rules for iptables & fail2ban
### END INIT INFO

################################ CONFIGURATION

# configuration file
file=/etc/server/firewall.conf
if ! [ -f "$file" ]; then
	echo -e "\e[1;31merror - unable to load file '$file'\e[0;0m" > /var/log/server/firewall_error.log
	exit 1
fi
. "$file"

################################ VARIABLES

is_fail2ban=false
is_fail2ban=$(type fail2ban-server >/dev/null 2>&1 || echo false)
is_vz=$(type fail2ban-server >/dev/null 2>&1 || echo false)


################################ FUNCTIONS

_add_chain() {
	local error comment values

	args_min=2 # number of arguments needs by this functions
	error="Error in function ${FUNCNAME}() : number of arguments for  must be greater then $args_min ${redb}not : $#${clear}\nList of arguments passed : $@"
	error+="\nUses :\n ${FUNCNAME} [chain] -i/--ip [ips] -c/--comment [comments]\nor\n ${FUNCNAME} [chain] -p/--port [ports] -c/--comment [comments]"

	if [ $# -ge $args_min ]
	then
		chain="$1"
		_echoD "chain : $chain"
		shift
		while [ $# -gt 0 ]; do
			_echoD "opt: $1"
			case "$1" in
				-i|--ip)
					chain=${chain// \$IP / \$value }
					shift
					values="$1"
					 _echoD "values: $values"
					;;
				-p|--port)
					chain=${chain// \$port / \$value }
					shift
					values="$1"
					 _echoD "values: $values"
					;;
				-c|--comment)
					shift
					comment=$1
					_echoD "comment : $comment"
					;;
				* )
					_echoD "$error"
					_exit 1
			esac
			shift
		done
		_echoD "chain: $chain"

	   str=
		for value in $values
		do
			eval $chain
			str+="$value "
			_echoD "$chain / $value"
		done
		comment+="$str"
		_echoD "$comment"
	else
		_echoD "$error"
		_exit 1
	fi
}

_allow() {
	_echo "--------------------------- DEFAULT POLICIES"

	# IPV4
	iptables -P INPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -P OUTPUT ACCEPT
	_echo "ALLOW all INPUT/FORWARD/OUTPUT"

	# IPV4
	ip6tables -P INPUT ACCEPT
	ip6tables -P FORWARD ACCEPT
	ip6tables -P OUTPUT ACCEPT
	_echo "ALLOW all INPUT/FORWARD/OUTPUT - IPV6"
}

_clear() {
	_echo "--------------------------- CLEAR"

	_echo "--------- CLEAR IPV4"

	# ipv4
	iptables -F
	iptables -X
	iptables -Z
	iptables -t nat -F
	iptables -t nat -Z
	iptables -t nat -X
	iptables -t mangle -Z
	iptables -t mangle -F
	iptables -t mangle -X
	_echo "Clear all rules in Filter/Nat/Mangle table for IPv4"

	_echo "--------- CLEAR IPV6"

	# ipv6
	ip6tables -F
	ip6tables -X
	ip6tables -t mangle -F
	ip6tables -t mangle -X
	_echo "Clear all rules in Filter/Mangle table for IPv6"
}

_clear_nat() {
	_echo "--------------------------- CLEAR NAT"

	# ipv4
	iptables -t nat -F
	iptables -t nat -Z
	iptables -t nat -X
	_echo "Clear all nat rules for IPv4"
}

_init() {
	_echo "--------------------------- INIT"

	$_LOG && _echo "LOG IPV4 activated !"

	_echo "--------- INIT IPV4"

	# DROP all connections in filter table
	iptables -P INPUT DROP
	iptables -P OUTPUT DROP
	iptables -P FORWARD DROP
	_echo "Drop all INPUT/FORWARD/OUTPUT in Filter table"

	# ALLOW all connections in nat table
	iptables -t nat -P PREROUTING ACCEPT
	iptables -t nat -P POSTROUTING ACCEPT
	iptables -t nat -P OUTPUT ACCEPT
	_echo "Allow all PREROUTING/POSTROUTING/OUTPUT in Nat table"

	# ALLOW all connections in mangle table
	iptables -t mangle -P PREROUTING ACCEPT
	iptables -t mangle -P INPUT ACCEPT
	iptables -t mangle -P OUTPUT ACCEPT
	iptables -t mangle -P FORWARD ACCEPT
	iptables -t mangle -P POSTROUTING ACCEPT
	_echo "Allow all PREROUTING/INPUT/OUTPUT/FORWARD/POSTROUTING in Mangle table"

	# CONNECTIONS
	iptables -A INPUT -p all -i $_ETH -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A OUTPUT -p all -o $_ETH -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	_echo "Allow existing INPUT & new OUTPUT for $_ETH"

	# FORWARD
	iptables -A FORWARD -p all -i $_ETH -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -p all -o $_ETH -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	_echo "Allow existing incomming FORWARD & new outcomming FORWARD for $_ETH"
	iptables -A FORWARD -p all -i $_ETH_SUB -m state --state ESTABLISHED,RELATED -j ACCEPT
	iptables -A FORWARD -p all -o $_ETH_SUB -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	_echo "Allow existing incomming FORWARD & new outcomming FORWARD for $_ETH_SUB"
	#iptables -A FORWARD -i $_ETHIn -o $_ETHOut -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	#iptables -A FORWARD -i $_ETHIn -o $_ETHOut -m state --state ! INVALID -j ACCEPT # idem NEW,ESTABLISHED,RELATED
	#iptables -A FORWARD -i $_ETHOut -o $_ETHIn -m state --state ESTABLISHED,RELATED -j ACCEPT

	# LO
	iptables -A INPUT -i lo -j ACCEPT
	iptables -A OUTPUT -o lo -j ACCEPT
	_echo "Allow all INPUT/OUTPUT for lo"


	_echo "--------- INIT IPV6"

	# DROP all connections in filter table
	ip6tables -P INPUT DROP
	ip6tables -P OUTPUT DROP
	ip6tables -P FORWARD DROP
	_echo "Drop all INPUT/FORWARD/OUTPUT in Filter table - IPV6"

	# ALLOW all connections in mangle table
	ip6tables -t mangle -P PREROUTING ACCEPT
	ip6tables -t mangle -P INPUT ACCEPT
	ip6tables -t mangle -P OUTPUT ACCEPT
	ip6tables -t mangle -P FORWARD ACCEPT
	ip6tables -t mangle -P POSTROUTING ACCEPT
	_echo "Allow all PREROUTING/INPUT/OUTPUT/FORWARD/POSTROUTING in Mangle table - IPV6"

	# CONNECTIONS
	ip6tables -A INPUT -p all -i $_ETH -m state --state ESTABLISHED,RELATED -j ACCEPT
	ip6tables -A OUTPUT -p all -o $_ETH -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	_echo "Allow existing INPUT & new OUTPUT for $_ETH - IPV6"

	# FORWARD
	ip6tables -A FORWARD -p all -i $_ETH -m state --state ESTABLISHED,RELATED -j ACCEPT
	ip6tables -A FORWARD -p all -o $_ETH -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	_echo "Allow existing incomming FORWARD & new outcomming FORWARD for $_ETH - IPV6"
	#ip6tables -A FORWARD -i $_ETHIn -o $_ETHOut -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	#ip6tables -A FORWARD -i $_ETHIn -o $_ETHOut -m state --state ! INVALID -j ACCEPT # idem NEW,ESTABLISHED,RELATED
	#ip6tables -A FORWARD -i $_ETHOut -o $_ETHIn -m state --state ESTABLISHED,RELATED -j ACCEPT

	# LO
	ip6tables -A INPUT -i lo -j ACCEPT
	ip6tables -A OUTPUT -o lo -j ACCEPT
	_echo "Allow all INPUT/OUTPUT for lo - IPV6"
}

_init_end() {
	_echo "--------------------------- INIT END"

	iptables -N DROP-INPUT
	iptables -N DROP-OUTPUT
	iptables -N DROP-FORWARD
	_echo "Add chain in filter for INPUT, OUTPUT, FORWARD"

	iptables -A INPUT -j DROP-INPUT
	$_LOG && iptables -A DROP-INPUT -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-input " --log-level 4
	iptables -A DROP-INPUT -j DROP
	_echo "Drop all INPUT"

	iptables -A OUTPUT -j DROP-OUTPUT
	$_LOG && iptables -A DROP-OUTPUT -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-output " --log-level 4
	iptables -A DROP-OUTPUT -j DROP
	_echo "Drop all OUTPUT"

	iptables -A FORWARD -j DROP-FORWARD
	$_LOG && iptables -A DROP-FORWARD -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-forward " --log-level 4
	iptables -A DROP-FORWARD -j DROP
	_echo "Drop all FORWARD"
}

_init_nat() {
	_echo "--------------------------- INIT NAT"

	# ALLOW all connections in nat table
	iptables -t nat -P PREROUTING ACCEPT
	iptables -t nat -P POSTROUTING ACCEPT
	iptables -t nat -P OUTPUT ACCEPT
	_echo "Allow all PREROUTING/POSTROUTING/OUTPUT in Nat table"
}

_scan() {
	_echo "--------------------------- SCAN"

	iptables -N DROP-SCAN

	# XMAS scans
	iptables -A INPUT -p tcp --tcp-flags FIN,PSH,URG FIN,PSH,URG -j DROP-SCAN
	#iptables -A INPUT -p tcp --tcp-flags FIN,PSH,URG FIN,PSH,URG -j DROP --log-prefix "ipt-drop-scan XMAS FIN,PSH,URG: "
	#iptables -A INPUT -p tcp --tcp-flags FIN,PSH,URG FIN,PSH,URG -j DROP
	_echo "Drop INPUT XMAS - FIN,PSH,URG FIN,PSH,URG"

	iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP-SCAN
	#iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "ipt-drop-scan XMAS SYN,RST: "
	#iptables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
	_echo "Drop INPUT XMAS - SYN,RST SYN,RST"

	iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP-SCAN
	#iptables -A INPUT -p tcp --tcp-flags ALL ALL -j LOG --log-prefix "ipt-drop-scan XMAS ALL: "
	#iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
	_echo "Drop INPUT XMAS - ALL ALL"

	# NULL scans
	iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP-SCAN
	#iptables -A INPUT -p tcp --tcp-flags ALL NONE -j LOG --log-prefix "ipt-drop-scan NULL NONE: "
	#iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
	_echo "Drop INPUT XMAS - ALL NONE"

	# Broadcast paquet
	iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP-SCAN
	#iptables -A INPUT -m pkttype --pkt-type broadcast -j LOG --log-prefix "ipt-drop-scan BROADCAST: "
	#iptables -A INPUT -m pkttype --pkt-type broadcast -j DROP
	_echo "Drop INPUT BROADCAST"

	$_LOG && iptables -A DROP-SCAN -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-scan " --log-level 4
	iptables -A DROP-SCAN -j DROP
}

_scan2() {
	_echo "--------------------------- SCAN V2"

	iptables -N DROP-SCAN2

	iptables -t filter -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j LOG --log-prefix "ipt-drop-scan2 FIN: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j DROP
	_echo "Drop INPUT FIN SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j LOG --log-prefix "ipt-drop-scan2 PSH: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j DROP
	_echo "Drop INPUT PSH SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags ACK,URG URG -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ACK,URG URG -j LOG --log-prefix "ipt-drop-scan2 URG: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ACK,URG URG -j DROP
	_echo "Drop INPUT URG SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags ALL ALL -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL ALL -j LOG --log-prefix "ipt-drop-scan2 XMAS scan: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
	_echo "Drop INPUT XMAS SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags ALL NONE -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL NONE -j LOG --log-prefix "ipt-drop-scan2 NULL scan: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
	_echo "Drop INPUT NULL SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j LOG --log-prefix "ipt-drop-scan2 pscan: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
	_echo "Drop INPUT pscan SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j LOG --log-prefix "ipt-drop-scan2 pscan 2: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
	_echo "Drop INPUT pscan 2 SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j LOG --log-prefix "ipt-drop-scan2 pscan 2: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
	_echo "Drop INPUT pscan 3 SCANS"

	iptables -t filter -A INPUT -p tcp --tcp-flags ALL SYN,FIN -j DROP-SCAN2
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL SYN,FIN -j LOG --log-prefix "ipt-drop-scan2 SYNFIN-SCAN: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL SYN,FIN -j DROP
	_echo "Drop INPUT SYNFIN-SCAN SCANS"

	# XMAS
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,FIN -j LOG --log-prefix "ipt-drop-scan2 NMAP-XMAS-SCAN: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,FIN -j DROP
	#_echo "Drop INPUT NMAP-XMAS-SCAN SCANS"

	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL FIN -j LOG --log-prefix "ipt-drop-scan2 FIN-SCAN: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL FIN -j DROP
	#_echo "Drop INPUT FIN-SCAN SCANS"

	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j LOG --log-prefix "ipt-drop-scan2 NMAP-ID: "
	#iptables -t filter -A INPUT -p tcp --tcp-flags ALL URG,PSH,SYN,FIN -j DROP
	#_echo "Drop INPUT NMAP-ID SCANS"

	#iptables -t filter -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j LOG --log-prefix "ipt-drop-scan2 SYN-RST: "
	#_echo "Drop INPUT SYN-RST SCANS"

	$_LOG && iptables -A DROP-SCAN2 -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-scan2 " --log-level 4
	iptables -A DROP-SCAN2 -j DROP
}

_ovh() {
	local chain comment

	_echo "--------------------------- OVH"

	# OVH
	chain='iptables -A INPUT -i $_ETH -p icmp -s $IP -j ACCEPT'
	comment="Allow INPUT ICMP, OVH /SLA/MRTG for IP: "
	_add_chain "$chain" -i "$_IPSOVHICMP ${_IPTHIS%.*}.250 ${_IPTHIS%.*}.251" -c "$comment"

	chain='iptables -A INPUT -i $_ETH -s $IP -j ACCEPT'
	comment="Allow INPUT UDP, *.253 *.252 for IP: "
	_add_chain "$chain" -i "${_IPTHIS%.*}.252 ${_IPTHIS%.*}.253" -c "$comment"

	chain='iptables -t filter -A OUTPUT -p udp --dport $port -j ACCEPT'
	comment="Allow OUTPUT UDP, OVH RTM for Port: "
	_add_chain "$chain" -p "$_PORTOVHRTM" -c "$comment"
}

_add_rules() {
	local chain comment

	_echo "--------------------------- RULES"

	# SSH
	chain='iptables -A INPUT -i $_ETH -p tcp -s $IP -d $_IPTHIS --sport $_PORTSSHS --dport $_PORTSSH -j ACCEPT'
	comment="Allow INPUT port: $_PORTSSHS -> $_PORTSSH SSH, for IP: "
	_add_chain "$chain" -i "$_IPSSSH" -c "$comment"

	# ICMP
	chain='iptables -A INPUT -i $_ETH -p icmp -s $IP -j ACCEPT'
	comment="Allow INPUT ICMP for IP:"
	_add_chain "$chain" -i "$_IPSICMP" -c "$comment"

	# RSYSLOG
	chain='iptables -A INPUT -i $_ETH -p udp -s $IP --dport $_PORTRSYSLOG -j ACCEPT'
	comment="Allow INPUT ICMP for IP on $_ETH_SUB:"
	_add_chain "$chain" -i "$_IPSRSYSLOG" -c "$comment"

	# DNS
	chain='iptables -A INPUT -i $_ETH -p tcp -s $IP --dport $_PORTDNS -j ACCEPT'
	comment="Allow INPUT port : $_PORTDNS, TCP DNS for IP:"
	_add_chain "$chain" -i "$_IPSDNS" -c "$comment"

	chain='iptables -A INPUT -i $_ETH -p udp -s $IP --dport $_PORTDNS -j ACCEPT'
	comment="Allow INPUT port : $_PORTDNS, UDP DNS for IP:"
	_add_chain "$chain" -i "$_IPSDNS" -c "$comment"

	# NTP (time) server
	#chain='iptables -A INPUT -i $_ETH -p udp --sport $_PORTNTP --dport $_PORTNTP -j ACCEPT'
	#comment="Allow INPUT port : $_PORTNTP, UDP NTP for IP:"
	#_add_chain "$chain" -i "$_IPSNTP" -c "$comment"

	# HTTP
	if [ "$_LIMITHTTP" ]
	then
		chain='iptables -A INPUT -i $_ETH -p tcp --syn --dport $port -m limit --limit $_LIMITHTTP --limit-burst $_LIMITBURSTHTTP -j ACCEPT'
		comment="Allow INPUT all IPs Mails with LIMIT $_LIMITHTTP & Burst $_LIMITBURSTHTTP for Port: "
	else
		chain='iptables -A INPUT -i $_ETH -p tcp --dport $port -j ACCEPT'
		comment="Allow INPUT all IPs HTTP for Port: "
	fi
	_add_chain "$chain" -p "$_PORTSHTTP" -c "$comment"

	if [ "$_CONMAXHTTP" ]
	then
		#chain='iptables -A INPUT -i $_ETH -p tcp --dport $port -j ACCEPT'
		chain='iptables -A INPUT -i $_ETH -p tcp --syn --dport $port -m connlimit --connlimit-upto $_CONMAXHTTP --connlimit-mask 32 -j LOG --log-prefix "ipt-fw-limit-$port $_CONMAXHTTP HTTP $port : "'
		comment="Log LIMIT INPUT all IPs HTTP with max // connLimit of $_CONMAXHTTP for Port: "
		_add_chain "$chain" -p "$_PORTSHTTP" -c "$comment"

		chain='iptables -A INPUT -i $_ETH -p tcp --syn --dport $port -m connlimit --connlimit-upto $_CONMAXHTTP --connlimit-mask 32 -j DROP'
		comment="Log DROPPED INPUT all IPs HTTP with max // connLimit of $_CONMAXHTTP for Port: "
		_add_chain "$chain" -p "$_PORTSHTTP" -c "$comment"
	fi

	# MAIL
	if [ "$_LIMITMAIL" ]
	then
		chain='iptables -A INPUT -i $_ETH -p tcp --syn --dport $port -m limit --limit $_LIMITMAIL --limit-burst $_LIMITBURSTMAIL -j ACCEPT'
		comment="Allow INPUT all IPs Mails with LIMIT $_LIMITMAIL & Burst $_LIMITBURSTMAIL for Port: "
	else
		chain='iptables -A INPUT -i $_ETH -p tcp --dport $port -j ACCEPT'
		comment="Allow INPUT all IPs Mails for Port: "
	fi
	_add_chain "$chain" -p "$_PORTSMAIL" -c "$comment"

	# HAPROXY
	for port in $_PORTHAPROXY; do
		chain='iptables -A INPUT -i $_ETH -p tcp -s $IP -d $_IPTHIS --dport $port -j ACCEPT'
		comment="Allow INPUT HAPROXY for IP:$_IPSHAPROXY port:$port"
		_add_chain "$chain" -i "$_IPSHAPROXY" -c "$comment"
	done

	# MariaDB
	#chain='iptables -A INPUT -i $_ETH -p tcp -s $IP --sport $_PORTMARIADBS -d $_IPTHIS --dport $_PORTMARIADB -m state --state NEW,ESTABLISHED -j ACCEPT'
	chain='iptables -A INPUT -i $_ETH -p tcp -s $IP --sport $_PORTMARIADB -d $_IPTHIS --dport $_PORTMARIADB -m state --state NEW,ESTABLISHED -j ACCEPT'
	comment="Allow INPUT port : $_PORTMARIADB -> $_PORTMARIADB, MariaDB for IP:"
	_add_chain "$chain" -i "$_IPSMARIADB" -c "$comment"

	#chain='iptables -A OUTPUT -p tcp -s $_IPTHIS --sport $_PORTMARIADB -d $IP --dport $_PORTMARIADBS -m state --state ESTABLISHED -j ACCEPT'
	#comment="Allow OUTPUT port : $_PORTMARIADB -> $_PORTMARIADBS, MariaDB for IP:"
	#_add_chain "$chain" -i "$_IPSMARIADB" -c "$comment"

	# PostgreSQL
	#chain='iptables -A INPUT -i $_ETH -p tcp -s $IP --sport $_PORTPGSQLS -d $_IPTHIS --dport $_PORTPGSQL -m state --state NEW,ESTABLISHED -j ACCEPT'
	chain='iptables -A INPUT -i $_ETH -p tcp -s $IP --sport $_PORTPGSQL -d $_IPTHIS --dport $_PORTPGSQL -m state --state NEW,ESTABLISHED -j ACCEPT'
	comment="Allow INPUT port : $_PORTPGSQL -> $_PORTPGSQL, PostgreSQL for IP:"
	_add_chain "$chain" -i "$_IPSPGSQL" -c "$comment"

	#chain='iptables -A OUTPUT -p tcp -s $_IPTHIS --sport $_PORTPGSQL -d $IP --dport $_PORTPGSQLS -m state --state ESTABLISHED -j ACCEPT'
	#comment="Allow OUTPUT port : $_PORTPGSQL -> $_PORTPGSQLS, PostgreSQL for IP:"
	#_add_chain "$chain" -i "$_IPSPGSQL" -c "$comment"

}

_vm_ssh() {
	_echo "--------------------------- VM SSH"

	if [ "$S_HOSTING_TYPE" == vz ] && [ "$_VM_SSH" == "ON" ] && ctids=$(vzlist -aHo ctid); then
		for ctid in $ctids
		do
			ctip=${_VM_IP_BASE}.${ctid}
			port_from=${S_VM_PORT_SSH_PRE}${ctid}
			port_to=${_PORTSSH}
			_echoD "VM - PREROUTING $_ETH / SSH $ctip: $port_from > $port_to"
			iptables -t nat -A PREROUTING -j DNAT -i $_ETH -p tcp -d $_IPTHIS --dport $port_from --to-destination ${ctip}:${port_to}
			_echo "Allow PREROUTING $_ETH / SSH port $port_from to ct ${ctip}:${port_to}"
		done
	fi
}

_vm_nat() {
	_echo "--------------------------- VM ROUTE"

	for ID in ${!_PORTSIDVM[@]}
	do
		ctid=${ID:0:3}
		ctip=${_VM_IP_BASE}.${ctid}
		for PORTS in ${_PORTSIDVM[$ID]}
		do
			port_from=${PORTS%-*}
			port_to=${PORTS#*-}
			_echoD "VM - PREROUTING $_ETH / $ctip: $port_from > $port_to"
			#iptables -t nat -A PREROUTING -i "$_ETH" -d "$_IPTHIS" -p tcp --dport "$port_from" -j DNAT --to-destination "${ctip}:${port_to}"
			#iptables -t nat -A PREROUTING -i "$_ETH" -p tcp --dport "$port_from" -j DNAT --to-destination "${ctip}:${port_to}"
			iptables -t nat -A PREROUTING -d "$_IPTHIS" -p tcp --dport "$port_from" -j DNAT --to-destination "${ctip}:${port_to}"
			iptables -t nat -A OUTPUT -p tcp -o lo --dport "$port_from" -j DNAT --to-destination "${ctip}:${port_to}"
			_echo "Allow PREROUTING $_ETH / port $port_from to ct ${ctip}:${port_to}"
		done
	done
}

_vm_nat_admin() {
	_echo "--------------------------- VM NAT ADMIN"

	for ipadmin in ${S_IPS_ADMIN[@]}
	do
		for ID in ${!_PORTSIDVM_ADMIN[@]}
		do
			ctid=${ID:0:3}
			ctip=${_VM_IP_BASE}.${ctid}
			for PORTS in ${_PORTSIDVM_ADMIN[$ID]}
			do
				port_from=${PORTS%-*}
				port_to=${PORTS#*-}
				_echoD "VM ADMIN - PREROUTING $_ETH / $ctip: $port_from > $port_to"
				iptables -t nat -A PREROUTING -j DNAT -i $_ETH -p tcp -s $ipadmin -d $_IPTHIS --dport $port_from --to-destination ${ctip}:${port_to}
				_echo "Allow PREROUTING $_ETH / port $port_from to ct ${ctip}:${port_to}"
			done
		done
	done
}

_vm_init() {
	_echo "--------------------------- VM INIT"

	# _ETH_SUB
	iptables -A INPUT -i $_ETH_SUB -j ACCEPT
	iptables -A OUTPUT -o $_ETH_SUB -j ACCEPT
	_echo "Allow INPUT/OUTPUT $_ETH_SUB connections INPUT/OUTPUT"

	# Output access
	#iptables -t nat -A POSTROUTING -s ${_VM_IP_BASE}.1/24 -o $_ETH -j SNAT --to $_IPTHIS
	iptables -t nat -A POSTROUTING -o $_ETH -j MASQUERADE
	_echo "Allow OUTPUT acces to all cts"

	iptables -A FORWARD -i $_ETH -p tcp -d ${_VM_IP_BASE}.1/24 -j ACCEPT
	_echo "Allow FORWARD to ${_VM_IP_BASE}.1/24 port all"
	#iptables -A FORWARD -i $_ETH -p tcp --dport 80 -d $_VM_IP_BASE.$_ctid_80_vm/32 -j ACCEPT
	#_echo "Allow FORWARD to ${_VM_IP_BASE}.$_ctid_80_vm/32 port 80"
	#iptables -A FORWARD -i $_ETH -p tcp --dport 8100:8254 -d ${_VM_IP_BASE}.1/24 -j ACCEPT
	#_echo "Allow FORWARD to ${_VM_IP_BASE}.1/24 port 8100:8254"


	# 80
	#iptables -t nat -A PREROUTING -j DNAT -i $_ETH -p tcp -d $_IPTHIS --dport 80 --to-destination $_VM_IP_BASE.$_ctid_80_vm:80
	#_echo "Allow PREROUTING port 80 to ct $_VM_IP_BASE.$_ctid_80_vm:80"
	# iptables -t nat -A POSTROUTING -s $ctIp -o $_ETH -j SNAT --to $hIp # if web access is not already given
	# iptables -t nat -A POSTROUTING -o $_ETH -p tcp --dport $hPort -d $ctIp -j MASQUERADE # if web access is not already given
}

_vm_init_nat() {
	_echo "--------------------------- VM INIT NAT"

	# Output access
	#iptables -t nat -A POSTROUTING -s ${_VM_IP_BASE}.1/24 -o $_ETH -j SNAT --to $_IPTHIS
	iptables -t nat -A POSTROUTING -o $_ETH -j MASQUERADE
	_echo "Allow OUTPUT acces to all cts"
}

_vm_rules() {
	_echo "--------------------------- VM RULES"

	_vm_nat
	_vm_nat_admin
	#_vm_ssh
}


################################ MAIN

_echoD "$SCRIPT / $(date +"%d-%m-%Y %T") ========================== start"

case $1 in
start)
	_init
	_ovh
	$is_fail2ban && $_FAIL2BAN && service fail2ban start && _echo "-- fail2ban STARTED"
	_add_rules
	$is_vz && _vm_init && _vm_rules
	_scan
	_init_end

	_echo "========================== Firewall STARTED"
	;;
startvm)
	_allow
	_clear
	$is_vz && _vm_rules
	$is_fail2ban && $_FAIL2BAN && service fail2ban start && _echo "--------- fail2ban STARTED"

	_echo "========================== VM NAT STARTED"
	;;
stop)
	$is_fail2ban && $_FAIL2BAN && service fail2ban stop && _echo "--------- fail2ban STOPPED"
	_allow
	_clear
	_echo "========================== Firewall STOPPED"
	;;
stopnot)
	$is_fail2ban && $_FAIL2BAN && service fail2ban stop && _echo "--------- fail2ban STOPPED"
	_allow
	_clear
	$is_vz && _vm_rules
	_echo "========================== Firewall STOPPED except VM NAT"
	;;
restart)
	$is_fail2ban && $_FAIL2BAN && service fail2ban stop && _echo "--------- fail2ban STOPPED"
	_allow
	_clear
	_init
	_ovh
	$is_fail2ban && $_FAIL2BAN && service fail2ban start && _echo "--------- fail2ban STARTED"
	_add_rules
	$is_vz && _vm_init && _vm_rules
	_scan
	_init_end

	_echo "========================== Firewall STARTED"
	;;
restartnat)
	_clear_nat

	_init_nat
	$is_vz && _vm_init_nat && _vm_rules
	_echo "========================== NAT rules RESTARTED"
	;;
*)
	_echo "Usage: $SCRIPTNAME {start|startvm|stop|stopall|restart}"
	_exit 3
	;;
esac

_exit 0
