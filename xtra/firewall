#!/bin/bash
#
# script to manage host firewal with iptables
# for configuration see /etc/server/firewall.conf

################################ GLOBAL FUNCTIONS

# configuration file
file=/etc/server/firewall.conf
! [ -f ${file} ] && echo -e "\e[1;31m[error] unable to load file: ${file}\e[0;0m" | tee -a /var/log/server/firewall.err && exit 1
. "${file}"

################################ FUNCTIONS

__add_chain() {
	local chain values message value cmd opts
	_echod "${FUNCNAME}():${LINENO} IN \$@=$@"

	opts_short="c:v:m:"
	opts=$(getopt -o ${opts_short} -n "${0##*/}" -- "$@") || _exite "Wrong or missing options"
	eval set -- "${opts}"

	while [ "$1" != "--" ]; do
		case "$1" in
			-c)		shift; chain="$1" ;;
			-v)		shift; values="$1" ;;
			-m)	shift; message="$1" ;;
			*)		_exite "Wrong argument: '$1'"  ;;
		esac
		shift
	done
	_echod "${FUNCNAME}():${LINENO} message='${message}'"
	_echod "${FUNCNAME}():${LINENO} chain='${chain}'"
	_echod "${FUNCNAME}():${LINENO} values='${values}'"

	_echo  "${message} ${values}"
	for value in ${values}; do
		#cmd="${chain//XX/$value}  -m comment --comment \"firewalled\""
		cmd="${chain//XX/$value}"
		${DRYRUN} && _echoi ${cmd} || _evalq ${cmd}
	done
}

__ipt() {
	cmd="iptables $*"
	${DRYRUN} && _echoi ${cmd} || _evalq ${cmd}
}

__ipt6() {
	cmd="ip6tables $*"
	${DRYRUN} && _echoi ${cmd} || _evalq ${cmd}
}

__allow() {
	_echo "\n-------------------------- DEFAULT POLICIES"

	_echo "- Allow all INPUT/FORWARD/OUTPUT"
	__ipt -P INPUT ACCEPT
	__ipt -P FORWARD ACCEPT
	__ipt -P OUTPUT ACCEPT

	_echo "- Allow all INPUT/FORWARD/OUTPUT - IPV6"
	__ipt6 -P INPUT ACCEPT
	__ipt6 -P FORWARD ACCEPT
	__ipt6 -P OUTPUT ACCEPT
}

__clear() {
	_echo "\n-------------------------- CLEAR"

	_echo "- Clear all rules in Filter/Nat/Mangle table for IPv4"
	__ipt -F
	__ipt -X
	#__ipt -Z
	__ipt -t nat -F
	__ipt -t nat -Z
	#__ipt -t nat -X
	__ipt -t mangle -Z
	__ipt -t mangle -F
	#__ipt -t mangle -X

	_echo "- Clear all rules in Filter/Mangle table for IPv6"
	__ipt6 -F
	__ipt6 -X
	#__ipt6 -Z
	__ipt6 -t nat -F
	__ipt6 -t nat -Z
	#__ipt6 -t nat -X
	__ipt6 -t mangle -Z
	__ipt6 -t mangle -F
	#__ipt6 -t mangle -X
}

__init() {
	_echo "\n-------------------------- INIT IPv4"

	#TODO put initial declaration to _init_end()

	# Drop all connections in filter table
	_echo "- Drop all INPUT/FORWARD/OUTPUT in Filter table"
	__ipt -P INPUT DROP
	__ipt -P OUTPUT DROP
	__ipt -P FORWARD DROP

	# Allow all connections in nat table
	_echo "- Allow all PREROUTING/POSTROUTING/OUTPUT in Nat table"
	__ipt -t nat -P PREROUTING ACCEPT
	__ipt -t nat -P POSTROUTING ACCEPT
	__ipt -t nat -P OUTPUT ACCEPT

	# Allow all connections in mangle table
	_echo "- Allow all PREROUTING/INPUT/OUTPUT/FORWARD/POSTROUTING in Mangle table"
	__ipt -t mangle -P PREROUTING ACCEPT
	__ipt -t mangle -P INPUT ACCEPT
	__ipt -t mangle -P OUTPUT ACCEPT
	__ipt -t mangle -P FORWARD ACCEPT
	__ipt -t mangle -P POSTROUTING ACCEPT

	# CONNECTIONS
	_echo "- Allow existing INPUT & new OUTPUT for ${_ETH}"
	__ipt -A INPUT -p all -i ${_ETH} -m state --state ESTABLISHED,RELATED -j ACCEPT
	__ipt -A OUTPUT -p all -o ${_ETH} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

	# FORWARD
	_echo "- Allow existing incomming FORWARD & new outcomming FORWARD for ${_ETH}"
	__ipt -A FORWARD -p all -i ${_ETH} -m state --state ESTABLISHED,RELATED -j ACCEPT
	__ipt -A FORWARD -p all -o ${_ETH} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

	_echo "- Allow existing incomming FORWARD & new outcomming FORWARD for ${_ETH_VM}"
	__ipt -A FORWARD -p all -i ${_ETH_VM} -m state --state ESTABLISHED,RELATED -j ACCEPT
	__ipt -A FORWARD -p all -o ${_ETH_VM} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

	# LO
	_echo "- Allow all INPUT/OUTPUT for lo"
	__ipt -A INPUT -i lo -j ACCEPT
	__ipt -A OUTPUT -o lo -j ACCEPT


	_echo "\n-------------------------- INIT IPv6"

	# Drop all connections in filter table
	_echo "- Drop all INPUT/FORWARD/OUTPUT in Filter table - IPV6"
	__ipt6 -P INPUT DROP
	__ipt6 -P OUTPUT DROP
	__ipt6 -P FORWARD DROP

	# Allow all connections in mangle table
	_echo "- Allow all PREROUTING/INPUT/OUTPUT/FORWARD/POSTROUTING in Mangle table - IPV6"
	__ipt6 -t mangle -P PREROUTING ACCEPT
	__ipt6 -t mangle -P INPUT ACCEPT
	__ipt6 -t mangle -P OUTPUT ACCEPT
	__ipt6 -t mangle -P FORWARD ACCEPT
	__ipt6 -t mangle -P POSTROUTING ACCEPT

	# CONNECTIONS
	_echo "- Allow existing INPUT & new OUTPUT for ${_ETH} - IPV6"
	__ipt6 -A INPUT -p all -i ${_ETH} -m state --state ESTABLISHED,RELATED -j ACCEPT
	__ipt6 -A OUTPUT -p all -o ${_ETH} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

	# FORWARD
	_echo "- Allow existing incomming FORWARD & new outcomming FORWARD for ${_ETH} - IPV6"
	__ipt6 -A FORWARD -p all -i ${_ETH} -m state --state ESTABLISHED,RELATED -j ACCEPT
	__ipt6 -A FORWARD -p all -o ${_ETH} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

	# LO
	_echo "- Allow all INPUT/OUTPUT for lo - IPV6"
	__ipt6 -A INPUT -i lo -j ACCEPT
	__ipt6 -A OUTPUT -o lo -j ACCEPT
}

__init_end() {
	_echo "\n-------------------------- INIT END"

	_echo "- Add chain in filter for INPUT, OUTPUT, FORWARD"
	__ipt -N DROP-INPUT
	__ipt -N DROP-OUTPUT
	__ipt -N DROP-FORWARD

	_echo "- Drop all INPUT"
	__ipt -A INPUT -j DROP-INPUT
	${_LOG} && __ipt -A DROP-INPUT -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-input " --log-level 4
	__ipt -A DROP-INPUT -j DROP

	_echo "- Drop all OUTPUT"
	__ipt -A OUTPUT -j DROP-OUTPUT
	${_LOG} && __ipt -A DROP-OUTPUT -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-output " --log-level 4
	__ipt -A DROP-OUTPUT -j DROP

	_echo "- Drop all FORWARD"
	__ipt -A FORWARD -j DROP-FORWARD
	${_LOG} && __ipt -A DROP-FORWARD -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-forward " --log-level 4
	__ipt -A DROP-FORWARD -j DROP

	${_LOG} && _echo "\nLOG IPV4 activated"
}

__ovh() {
	local chain message

	_echo "\n-------------------------- OVH"

	# OVH
	message="- Allow INPUT ICMP, OVH /SLA/MRTG for IP: "
	chain="iptables -A INPUT -i ${_ETH} -p icmp -s XX -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_OVHICMP}" -m "${message}"

	message="- Allow INPUT UDP, *.253 *.252 for IP: "
	chain="iptables -A INPUT -i ${_ETH} -s XX -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPTHIS%.*}.252 ${_IPTHIS%.*}.253" -m "${message}"

	message="- Allow OUTPUT UDP, OVH RTM for port: "
	chain="iptables -A OUTPUT -p udp --dport XX -j ACCEPT"
	__add_chain -c "${chain}" -v "${_PORT_OVHRTM}" -m "${message}"
}

__input() {
	local chain message

	_echo "\n-------------------------- INPUT"

	# SSH
	message="- Allow INPUT port: ${_PORTS_SSH} -> ${_PORT_SSH} SSH, for IP:"
	chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX -d ${_IPTHIS} --sport ${_PORTS_SSH} --dport ${_PORT_SSH} -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_SSH_IN}" -m "${message}"

	# ICMP
	message="- Allow INPUT ICMP for IP:"
	chain="iptables -A INPUT -i ${_ETH} -p icmp -s XX -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_ICMP}" -m "${message}"

	# RSYSLOG
	message="- Allow INPUT RSYSLOG ${S_RSYSLOG_PTC} on ${S_SERVICE[log]} for IP:"
	chain="iptables -A INPUT -i ${_ETH} -p ${S_RSYSLOG_PTC} -s XX --dport ${_PORT_RSYSLOG} -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_RSYSLOG}" -m "${message}"

	# DNS
	message="- Allow INPUT TCP DNS port: ${_PORT_DNS} for IP:"
	chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX --dport ${_PORT_DNS} -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_DNS}" -m "${message}"

	message="- Allow INPUT UDP DNS port: ${_PORT_DNS} for IP:"
	chain="iptables -A INPUT -i ${_ETH} -p udp -s XX --dport ${_PORT_DNS} -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_DNS}" -m "${message}"

	# NTP (time) server
	message="- Allow INPUT port: $_PORT_NTP, UDP NTP for IP:"
	chain="iptables -A INPUT -i ${_ETH} -p udp --sport $_PORT_NTP --dport $_PORT_NTP -j ACCEPT"
	__add_chain -c "${chain}" -v "$_IPS_NTP" -m "${message}"

	# HTTP
	if [ "${_LIMIT_HTTP}" ]; then
		message="- Allow INPUT all IPs Mails with LIMIT ${_LIMIT_HTTP} & Burst $_LIMIT_BURST_HTTP for port:"
		chain="iptables -A INPUT -i ${_ETH} -p tcp --syn --dport XX -m limit --limit ${_LIMIT_HTTP} --limit-burst $_LIMIT_BURST_HTTP -j ACCEPT"
	else
		message="- Allow INPUT all IPs HTTP for port:"
		chain="iptables -A INPUT -i ${_ETH} -p tcp --dport XX -j ACCEPT"
	fi
	__add_chain -c "${chain}" -v "${_PORTS_HTTP}" -m "${message}"

	if [ "${_CONMAX_HTTP}" ]; then
		message="- Limit log INPUT all IPs HTTP with max // connLimit of ${_CONMAX_HTTP} for port:"
		#chain="iptables -A INPUT -i ${_ETH} -p tcp --dport XX -j ACCEPT"
		chain="iptables -A INPUT -i ${_ETH} -p tcp --syn --dport XX -m connlimit --connlimit-upto ${_CONMAX_HTTP} --connlimit-mask 32 -j LOG --log-prefix "ipt-fw-limit-$port ${_CONMAX_HTTP} HTTP XX : ""
		__add_chain -c "${chain}" -v "${_PORTS_HTTP}" -m "${message}"

		message="- Drop INPUT all IPs HTTP with max // connLimit of ${_CONMAX_HTTP} for port:"
		chain="iptables -A INPUT -i ${_ETH} -p tcp --syn --dport XX -m connlimit --connlimit-upto ${_CONMAX_HTTP} --connlimit-mask 32 -j DROP"
		__add_chain -c "${chain}" -v "${_PORTS_HTTP}" -m "${message}"
	fi

	# HAPROXY
	for port in ${_PORT_HAPROXY}; do
		message="- Allow INPUT HAPROXY port:${port}  for IP:"
		chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX -d ${_IPTHIS} --dport ${port} -j ACCEPT"
		__add_chain -c "${chain}" -v "${_IPS_HAPROXY}" -m "${message}"
	done

	# MariaDB
	message="- Allow INPUT MariaDB port: ${_PORT_MARIADB} -> ${_PORT_MARIADB} for IP:"
	#chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX --sport ${_PORTS_MARIADB} -d ${_IPTHIS} --dport ${_PORT_MARIADB} -m state --state NEW,ESTABLISHED -j ACCEPT"
	chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX --sport ${_PORT_MARIADB} -d ${_IPTHIS} --dport ${_PORT_MARIADB} -m state --state NEW,ESTABLISHED -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_MARIADB}" -m "${message}"

	message="- Allow OUTPUT MariaDB port: ${_PORT_MARIADB} -> ${_PORTS_MARIADB} for IP:"
	chain="iptables -A OUTPUT -p tcp -s ${_IPTHIS} --sport ${_PORT_MARIADB} -d XX --dport ${_PORTS_MARIADB} -m state --state ESTABLISHED -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_MARIADB}" -m "${message}"

	# PostgreSQL
	message="- Allow INPUT PostgreSQL port: ${_PORT_PGSQL} -> ${_PORT_PGSQL} for IP:"
	#chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX --sport ${_PORTS_PGSQL} -d ${_IPTHIS} --dport ${_PORT_PGSQL} -m state --state NEW,ESTABLISHED -j ACCEPT"
	chain="iptables -A INPUT -i ${_ETH} -p tcp -s XX --sport ${_PORT_PGSQL} -d ${_IPTHIS} --dport ${_PORT_PGSQL} -m state --state NEW,ESTABLISHED -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_PGSQL}" -m "${message}"

	message="- Allow OUTPUT PostgreSQL port: ${_PORT_PGSQL} -> ${_PORTS_PGSQL} for IP:"
	chain="iptables -A OUTPUT -p tcp -s ${_IPTHIS} --sport ${_PORT_PGSQL} -d XX --dport ${_PORTS_PGSQL} -m state --state ESTABLISHED -j ACCEPT"
	__add_chain -c "${chain}" -v "${_IPS_PGSQL}" -m "${message}"

	# MAIL
	if [ "${_LIMIT_MAIL}" ]; then
		message="- Allow INPUT Mail all IPs with LIMIT ${_LIMIT_MAIL} & Burst ${_LIMIT_BURST_MAIL} for port:"
		chain="iptables -A INPUT -i ${_ETH} -p tcp --syn --dport XX -m limit --limit ${_LIMIT_MAIL} --limit-burst ${_LIMIT_BURST_MAIL} -j ACCEPT"
	else
		message="- Allow INPUT Mail all IPs for port:"
		chain="iptables -A INPUT -i ${_ETH} -p tcp --dport XX -j ACCEPT"
	fi
	__add_chain -c "${chain}" -v "${_PORTS_MAIL}" -m "${message}"

	# RSPAMD
	message="- Allow INPUT Rspamd all IPs for port:"
	chain="iptables -A INPUT -i ${_ETH} -p tcp --dport XX -j ACCEPT"
	__add_chain -c "${chain}" -v "${_PORTS_RSPAMD}" -m "${message}"

}

__nat() {
	_echo "\n-------------------------- NAT"

	message="- Allow PREROUTING HTTP to proxy VM / port ${_PORTS_HTTP} to ${_IP_SRV[proxy]} for port:"
	chain="iptables -t nat -A PREROUTING -i ${_ETH} -p tcp --dport XX -j DNAT --to-destination ${_IP_SRV[proxy]}:XX"
	__add_chain -c "${chain}" -v "${_PORTS_HTTP}" -m "${message}"

	message="- Allow PREROUTING Stats proxy to proxy VM / port ${_PORT_HAPROXY} to ${_IP_SRV[proxy]} for port:"
	chain="iptables -t nat -A PREROUTING -i ${_ETH} -p tcp --dport XX -j DNAT --to-destination ${_IP_SRV[proxy]}:XX"
	__add_chain -c "${chain}" -v "${_PORT_HAPROXY}" -m "${message}"

	message="- Allow PREROUTING Log ${_PTC_RSYSLOG} to log VM / port ${_PORT_RSYSLOG} to ${_IP_SRV[log]} for protocol:"
	chain="iptables -t nat -A PREROUTING -i ${_ETH} -p XX --dport ${_PORT_RSYSLOG} -j DNAT --to-destination ${_IP_SRV[log]}:${_PORT_RSYSLOG}"
	__add_chain -c "${chain}" -v "${_PTC_RSYSLOG}" -m "${message}"

	${_NAT_SGBD} && ips="${_PORT_MARIADB:-_PORT_PGSQL}"  || ips=
	message="- Allow PREROUTING SGBD to sgbd VM ${_ETH} to ${_IP_SRV[sgbd]} for port:"
	chain="iptables -t nat -A PREROUTING -i ${_ETH} -p tcp --dport XX -j DNAT --to-destination ${_IP_SRV[sgbd]}:XX"
	__add_chain -c "${chain}" -v "${ips}" -m "${message}"

	message="- Allow PREROUTING Mail to mail VM ${_ETH} to ${_IP_SRV[mail]} for port:"
	chain="iptables -t nat -A PREROUTING -i ${_ETH} -p tcp --dport XX -j DNAT --to-destination ${_IP_SRV[mail]}:XX"
	__add_chain -c "${chain}" -v "${_PORTS_MAIL}" -m "${message}"

	message="- Allow PREROUTING Stats rspamd to mail VM ${_ETH} to ${_IP_SRV[mail]} for port:"
	chain="iptables -t nat -A PREROUTING -i ${_ETH} -p tcp --dport XX -j DNAT --to-destination ${_IP_SRV[mail]}:XX"
	__add_chain -c "${chain}" -v "${_PORTS_RSPAMD}" -m "${message}"
}

__vm_init() {
	_echo "\n-------------------------- VM INIT"

	# _ETH_VM
	_echo "- Allow INPUT/OUTPUT VM ${_ETH_VM} connections INPUT/OUTPUT"
	__ipt -A INPUT -i ${_ETH_VM} -j ACCEPT
	__ipt -A OUTPUT -o ${_ETH_VM} -j ACCEPT

	# Output access
	_echo "- Allow OUTPUT acces for all VM"
	#__ipt -t nat -A POSTROUTING -s ${_VM_IP_BASE}.1/24 -o ${_ETH} -j SNAT --to ${_IPTHIS}
	__ipt -t nat -A POSTROUTING -o ${_ETH} -j MASQUERADE

	_echo "- Allow FORWARD to ${_VM_IP_BASE}.1/24 port all"
	__ipt -A FORWARD -i ${_ETH} -p tcp -d ${_VM_IP_CIDR} -j ACCEPT
}

__vm_nat_ips() {
	local ctid ctip ports ip_admin
	_echo "\n-------------------------- VM NAT IPS"

	_echo "- Allow PREROUTING ${_ETH} to VM for IP: ${_IPS_ADMIN}"
	for ip_admin in ${_IPS_ADMIN}; do
		for ctid in ${!_VM_NAT_IPS[*]}; do
			ctip=${_VM_IP_BASE}.${ctid}
			for ports in ${_VM_NAT_IPS[$ctid]}; do
				__ipt -t nat -A PREROUTING -i ${_ETH} -s ${ip_admin} -p tcp -d ${_IPTHIS} --dport ${ports%-*} -j DNAT --to-destination ${ctip}:${ports#*-}
			done
		done
	done
}

__vm_nat() {
	local ctid ctip ports
	_echo "\n-------------------------- VM NAT"

	_echo "- Allow PREROUTING to VM for IP: ALL"
	for ctid in ${!_VM_NAT[*]}; do
		ctip=${_VM_IP_BASE}.${ctid}
		for ports in ${_VM_NAT[$ctid]}; do
			__ipt -t nat -A PREROUTING -i ${_ETH} -p tcp -d ${_IPTHIS} --dport ${ports%-*} -j DNAT --to-destination ${ctip}:${ports#*-}
		done
	done
}

__vm_rules() {
	__vm_nat_ips
	__vm_nat
}

__scan() {
	_echo "\n-------------------------- SCAN"

	__ipt -N DROP-SCAN

	# XMAS scans
	_echo "- Drop INPUT XMAS - FIN,PSH,URG FIN,PSH,URG"
	__ipt -A INPUT -p tcp --tcp-flags FIN,PSH,URG FIN,PSH,URG -j DROP-SCAN

	_echo "- Drop INPUT XMAS - SYN,RST SYN,RST"
	__ipt -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j DROP-SCAN

	_echo "- Drop INPUT XMAS - ALL ALL"
	__ipt -A INPUT -p tcp --tcp-flags ALL ALL -j DROP-SCAN

	# NULL scans
	_echo "- Drop INPUT XMAS - ALL NONE"
	__ipt -A INPUT -p tcp --tcp-flags ALL NONE -j DROP-SCAN

	# Broadcast paquet
	_echo "- Drop INPUT BROADCAST"
	__ipt -A INPUT -m pkttype --pkt-type broadcast -j DROP-SCAN

	${_LOG} && __ipt -A DROP-SCAN -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-scan " --log-level 4
	__ipt -A DROP-SCAN -j DROP
}

__scan2() {
	_echo "\n-------------------------- SCAN V2"

	_echo "- Drop SCAN2"
	__ipt -N DROP-SCAN2

	_echo "- Drop INPUT FIN SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j DROP-SCAN2

	_echo "- Drop INPUT PSH SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j DROP-SCAN2

	_echo "- Drop INPUT URG SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ACK,URG URG -j DROP-SCAN2

	_echo "- Drop INPUT XMAS SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ALL ALL -j DROP-SCAN2

	_echo "- Drop INPUT NULL SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ALL NONE -j DROP-SCAN2

	_echo "- Drop INPUT pscan SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP-SCAN2

	_echo "- Drop INPUT pscan 2 SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP-SCAN2

	_echo "- Drop INPUT pscan 3 SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j DROP-SCAN2

	_echo "- Drop INPUT SYNFIN-SCAN SCANS"
	__ipt -t filter -A INPUT -p tcp --tcp-flags ALL SYN,FIN -j DROP-SCAN2

	${_LOG} && __ipt -A DROP-SCAN2 -m limit --limit 2/min -j LOG --log-prefix "ipt-drop-scan2 " --log-level 4
	__ipt -A DROP-SCAN2 -j DROP
}

# 1 action
__fail2ban() {
	local action cmd

	if [ "$1" = start ]; then
		! ${DRYRUN} && cmd="_service start fail2ban" || cmd="_echoi _service start fail2ban"
		action=STARTED
	elif [ "$1" = stop ]; then
		! ${DRYRUN} && cmd="_service stop fail2ban" || cmd="_echoi _service stop fail2ban"
		action=STOPPED
	fi

	${IS_FAIL2BAN} && ${_FAIL2BAN} && ${cmd}
	_echo "\n-------------------------- fail2ban ${action}"
}

# 1 action
__lxd() {
	local action cmd

	if [ "$1" = reload ]; then
		! ${DRYRUN} && cmd="_service reload snap.lxd.daemon" || cmd="_echoi _service reload snap.lxd.daemon"
		action=RELOAD
	fi

	${IS_FAIL2BAN} && ${_FAIL2BAN} && ${cmd}
	_echo "\n-------------------------- lxd ${action}"
}

__start() {
	_echo "\n========================== firewall STARTING"

	__init
	__ovh
	__fail2ban start
	__input
	__nat
	${IS_LXD} && __vm_init && __vm_rules
	#__scan
	#__scan2
	__init_end

	_echo "\n========================== firewall STARTED"
}

__stop() {
	_echo "\n========================== firewall STOPING"

	__fail2ban stop
	__allow
	__clear
	__lxd reload

	_echo "\n========================== firewall STOPED"
}

################################ MAIN

_echo "\n================================================= Firewall"

case $1 in
start)
	__start  ;;
stop)
	__stop  ;;
#TODO remove this
#restart)
#	__stop
#	__start
#	;;
*)
	_echo "Usage: ${_SCRIPT} {start|stop|restart}"
	_exit 3
	;;
esac

_exit 0
