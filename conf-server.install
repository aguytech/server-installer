#!/bin/bash
#
# write by Aguy

_PART=conf-server
_echoT "==========================================  ${_PART}"

########################  MAIN

_echot "------------------  release"

file="/etc/os-release"
! ${_SUDO} [ -f "${file}" ] && exit -e "${redb}error - unable to find file '$file'${cclear}"
# base
eval "$(${_SUDO} grep '^VERSION_ID=' "${file}")" # define VERSION_ID
eval "$(${_SUDO} grep '^ID=' "${file}")" # define ID
S_RELEASE_ID="$ID"
S_RELEASE="${ID}${VERSION_ID}"
S_RELEASE_NAME=`${_SUDO} sed -n "/^VERSION=/ s|.*(\(.*\)).*|\1|p" "${file}"`
S_RELEASE_NAME=${S_RELEASE_NAME% *}
if [ "$ID" = "manjaro" ]; then
	file="/etc/lsb-release"
	eval "$(${_SUDO} grep '^DISTRIB_CODENAME=' "${file}")"
	S_RELEASE_NAME="${DISTRIB_CODENAME}"
elif [ "$ID" = "alpine" ]; then
	S_RELEASE=${S_RELEASE%.*}
fi
S_RELEASE_NAME=${S_RELEASE_NAME,,}

for str in S_RELEASE S_RELEASE_ID S_RELEASE_NAME; do
	#sed -i "\|^${str}=| c ${str}=\"${!str}\"" "${S_GLOBAL_CONF}"
	_confset ${str} "${!str}" "${S_GLOBAL_CONF}"
done

###################  SERVER

_echot "------------------  S_ETH"

S_ETH=`ip -4 -o route show to default|cut -d' ' -f5`
_confset S_ETH "${S_ETH}" "${S_GLOBAL_CONF}"

_echot "------------------  S_SERVER_TYPE"

if [ -z "${S_SERVER_TYPE}" ]; then
	_menu "Select the server type for this server" home ovh docker kvm lxd
	S_SERVER_TYPE=${_ANSWER} && _confset S_SERVER_TYPE "${S_SERVER_TYPE}" "${S_GLOBAL_CONF}"
fi

###################  DOMAIN

_echot "------------------  S_DOM_ALL_FQDN"
if [ -z "${S_DOM_ALL_FQDN}" ]; then
	anstmp="17112018.fr.lxd 17112018.ovh.lxd ambau.fr.lxd ambau.ovh.lxd ggj.fr.lxd ggj.ovh.lxd han-sci.fr.lxd otokoz.ovh.lxd"
	_askno "Local lxd. domains (y/N)"
	[ "${_ANSWER}" != y ] && anstmp=${anstmp//.lxd/}
	_askno "All domains (FQDN) (${anstmp})"
	S_DOM_ALL_FQDN=${_ANSWER:-${anstmp}} && _confset S_DOM_ALL_FQDN "${S_DOM_ALL_FQDN}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_DOM_FQDN"
if [ -z "${S_DOM_FQDN}" ]; then
	anstmp="ambau.fr"
	_menu "A principal domain to use (ambau.fr)" ${S_DOM_ALL_FQDN}
	S_DOM_FQDN=${_ANSWER} && _confset S_DOM_FQDN "${S_DOM_FQDN}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_DOM_NAME"
if [ -z "${S_DOM_NAME}" ]; then
	anstmp="${S_DOM_FQDN%%.*}"
	_askno "Simple name of principal domain (${anstmp})"
	S_DOM_NAME=${_ANSWER:-${anstmp}} && _confset S_DOM_NAME "${S_DOM_NAME}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_EMAIL_ADMIN"
if [ -z "${S_EMAIL_ADMIN}" ]; then
	anstmp="admin@${S_DOM_FQDN}"
	_askno "Administration email of principal domain (${anstmp})"
	S_EMAIL_ADMIN="${_ANSWER:-${anstmp}}" && _confset S_EMAIL_ADMIN "${S_EMAIL_ADMIN}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_EMAIL_TECH"
if [ -z "${S_EMAIL_TECH}" ]; then
	anstmp="tech@${S_DOM_FQDN}"
	_askno "Technical email of principal domain (${anstmp})"
	S_EMAIL_TECH="${_ANSWER:-${anstmp}}" && _confset S_EMAIL_TECH "${S_EMAIL_TECH}" "${S_GLOBAL_CONF}"
fi

###################  PATH

_echot "------------------  S_PATH_INSTALL"
first_id="${!BASH_SOURCE[*]}" && first_id="${first_id##* }"
S_PATH_INSTALL=`dirname "$(readlink -e "${BASH_SOURCE[${first_id}]}")"`
_confset S_PATH_INSTALL "${S_PATH_INSTALL}" "${S_GLOBAL_CONF}"

S_PATH_INSTALL_CONF="${S_PATH_INSTALL}/conf"
_confset S_PATH_INSTALL_CONF "${S_PATH_INSTALL_CONF}" "${S_GLOBAL_CONF}"

_echot "------------------  S_PATH_SAVE"
if [ -z "${S_PATH_SAVE}" ]; then
	anstmp=/save
	_askno "path to save data (${anstmp})"
	S_PATH_SAVE=${_ANSWER:-${anstmp}} && _confset S_PATH_SAVE "${S_PATH_SAVE}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_PATH_BACKUP"
if [ -z "${S_PATH_BACKUP}" ]; then
	anstmp="${S_PATH_SAVE}/backup"
	_askno "path to backup data (${anstmp})"
	S_PATH_BACKUP=${_ANSWER:-${anstmp}} && _confset S_PATH_BACKUP "${S_PATH_BACKUP}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_PATH_LOG"
if [ -z "${S_PATH_LOG}" ]; then
	anstmp=/var/log
	_askno "path to log data (${anstmp})"
	S_PATH_LOG=${_ANSWER:-${anstmp}} && _confset S_PATH_LOG "${S_PATH_LOG}" "${S_GLOBAL_CONF}"

	S_PATH_LOG_SERVER="${S_PATH_LOG}/server"
	_confset S_PATH_LOG_SERVER "${S_PATH_LOG_SERVER}" "${S_GLOBAL_CONF}"

	S_PATH_LOG_INSTALL="${S_PATH_LOG}/install"
	_confset S_PATH_LOG_INSTALL "${S_PATH_LOG_INSTALL}" "${S_GLOBAL_CONF}"
fi

###################  HOST

str="ovh home"
if [[ " ${str} " = *" ${S_SERVER_TYPE} "* ]]; then

	_echot "------------------  S_HOST_TYPE"
	if [ -z "${S_HOST_TYPE}" ]; then
		_menu "type of VM hosting" lxd docker kvm
		S_HOST_TYPE=$_ANSWER && _confset S_HOST_TYPE "${S_HOST_TYPE}" "${S_GLOBAL_CONF}"
	fi

	_echot "------------------  S_HOST_PATH"
	if [ -z "${S_HOST_PATH}" ]; then
		anstmp=/vm
		_askno "host path for VM (${anstmp})"
		S_HOST_PATH="${_ANSWER:-${anstmp}}" && _confset S_HOST_PATH "${S_HOST_PATH}" "${S_GLOBAL_CONF}"
	fi

	_echot "------------------  S_HOST_PATH_SP"
	if [ -z "${S_HOST_PATH_SP}" ]; then
		anstmp="${S_HOST_PATH}/sp"
		_askno "host path to storage VM (${anstmp})"
		S_HOST_PATH_SP="${_ANSWER:-${anstmp}}" && _confset S_HOST_PATH_SP "${S_HOST_PATH_SP}" "${S_GLOBAL_CONF}"
	fi

		_echot "------------------  S_HOST_PATH_SHARE"
	if [ -z "${S_HOST_PATH_SHARE}" ]; then
		anstmp="${S_HOST_PATH}/share"
		_askno "host path to VM sharing (${anstmp})"
		S_HOST_PATH_SHARE="${_ANSWER:-${anstmp}}" && _confset S_HOST_PATH_SHARE "${S_HOST_PATH_SHARE}" "${S_GLOBAL_CONF}"
	fi

		_echot "------------------  S_HOST_PATH_SAVE"
	if [ -z "${S_HOST_PATH_SAVE}" ]; then
		anstmp="${S_HOST_PATH}/save"
		_askno "host path to VM saving (${anstmp})"
		S_HOST_PATH_SAVE="${_ANSWER:-${anstmp}}" && _confset S_HOST_PATH_SAVE "${S_HOST_PATH_SAVE}" "${S_GLOBAL_CONF}"
	fi

		_echot "------------------  S_HOST_PATH_LOG"
	if [ -z "${S_HOST_PATH_LOG}" ]; then
		anstmp="${S_HOST_PATH_SHARE}/log"
		_askno "host path to VM loging (${anstmp})"
		S_HOST_PATH_LOG="${_ANSWER:-${anstmp}}" && _confset S_HOST_PATH_LOG "${S_HOST_PATH_LOG}" "${S_GLOBAL_CONF}"
	fi
fi

###################  VM

_echot "------------------  S_VM_PATH_SHARE"
if [ -z "${S_VM_PATH_SHARE}" ]; then
	anstmp="/var/share"
	_askno "VM sharing path (${anstmp})"
	S_VM_PATH_SHARE=${_ANSWER:-${anstmp}} && _confset S_VM_PATH_SHARE "${S_VM_PATH_SHARE}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_VM_PATH_LOG"
if [ -z "${S_VM_PATH_LOG}" ]; then
	anstmp="${S_VM_PATH_SHARE}/log"
	_askno "VM shared path for logs (${anstmp})"
	S_VM_PATH_LOG=${_ANSWER:-${anstmp}} && _confset S_VM_PATH_LOG "${S_VM_PATH_LOG}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_VM_PATH_SAVE"
if [ -z "${S_VM_PATH_SAVE}" ]; then
	anstmp="/save"
	_askno "VM saving path (${anstmp})"
	S_VM_PATH_SAVE=${_ANSWER:-${anstmp}} && _confset S_VM_PATH_SAVE "${S_VM_PATH_SAVE}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_VM_PATH_BACKUP"
if [ -z "${S_VM_PATH_BACKUP}" ]; then
	anstmp="${S_PATH_SAVE}/backup"
	_askno "VM backing up path (${anstmp})"
	S_VM_PATH_BACKUP=${_ANSWER:-${anstmp}} && _confset S_VM_PATH_BACKUP "${S_VM_PATH_BACKUP}" "${S_GLOBAL_CONF}"
fi


###################  SERVICES

declare -A S_SERVICE

_echot "------------------  S_SERVICE[proxy]"
if [ -z "${S_SERVICE[proxy]}" ]; then
	anstmp="srv-haproxy"
	_askno "service name for proxy (${anstmp})"
	S_SERVICE[proxy]=${_ANSWER:-${anstmp}} && _confset_array "S_SERVICE" "proxy" "${S_SERVICE[proxy]}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_SERVICE[log]"
if [ -z "${S_SERVICE[log]}" ]; then
	anstmp="srv-rsyslog"
	_askno "service name for log (${anstmp})"
	S_SERVICE[log]=${_ANSWER:-${anstmp}} && _confset_array "S_SERVICE" "log" "${S_SERVICE[log]}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_SERVICE[mail]"
if [ -z "${S_SERVICE[mail]}" ]; then
	anstmp="srv-mail"
	_askno "service name for mail (${anstmp})"
	S_SERVICE[mail]=${_ANSWER:-${anstmp}} && _confset_array "S_SERVICE" "mail" "${S_SERVICE[mail]}" "${S_GLOBAL_CONF}"
fi

########################  USERS

_echot "------------------  S_IPS_ADMIN"
if [ -z "${S_IPS_ADMIN}" ]; then
	#anstmp="92.154.29.60 129.20.228.3 129.20.228.19 129.20.228.20 129.20.228.21"
	anstmp="92.154.29.60 129.20.228.1/27"
	_askno "IPs of remote administrators (${anstmp})"
	S_IPS_ADMIN=${_ANSWER:-${anstmp}} && _confset S_IPS_ADMIN "${S_IPS_ADMIN}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_IPS_DEV"
if [ -z "${S_IPS_DEV}" ]; then
	#anstmp="92.154.29.60 129.20.228.3 129.20.228.19 129.20.228.20 129.20.228.21"
	anstmp="92.154.29.60 129.20.228.1/27"
	_askno "IPs of remote developers (${anstmp})"
	S_IPS_DEV=${_ANSWER:-${anstmp}} && _confset S_IPS_DEV "${S_IPS_DEV}" "${S_GLOBAL_CONF}"
fi

########################  RSYSLOG

_echot "------------------  S_RSYSLOG_PTC"
if [ -z "${S_RSYSLOG_PTC}" ]; then
	anstmp="udp"
	_menu "Select the protocol to use for rsyslog centralisation (${anstmp})" udp tcp
	S_RSYSLOG_PTC=$_ANSWER && _confset S_RSYSLOG_PTC "${S_RSYSLOG_PTC}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_RSYSLOG_PORT"
if [ -z "${S_RSYSLOG_PORT}" ]; then
	anstmp="514"
	_askno "Port to use for rsyslog (${anstmp})"
	S_RSYSLOG_PORT=${_ANSWER:-${anstmp}} && _confset S_RSYSLOG_PORT "${S_RSYSLOG_PORT}" "${S_GLOBAL_CONF}"
fi

########################  HAPROXY

_echot "------------------  S_HAPROXY_STATS_PORTS"
if [ -z "${S_HAPROXY_STATS_PORTS}" ]; then
	anstmp="1777 1778"
	_askno "ports for haproxy statistics (${anstmp})"
	S_HAPROXY_STATS_PORTS=${_ANSWER:-${anstmp}} && _confset S_HAPROXY_STATS_PORTS "${S_HAPROXY_STATS_PORTS}" "${S_GLOBAL_CONF}"
fi

########################  LXD

_echot "------------------  S_LXD_PORT"
if [ -z "${S_LXD_PORT}" ]; then
	anstmp="8443"
	_askno "port for remote lxd acces (${anstmp})"
	S_LXD_PORT=${_ANSWER:-${anstmp}} && _confset S_LXD_PORT "${S_LXD_PORT}" "${S_GLOBAL_CONF}"
fi

########################  RSPAMD

_echot "------------------  S_RSPAMD_PORT[proxy]"
if [ -z "${S_RSPAMD_PORT[proxy]}" ]; then
	anstmp="11332"
	_askno "Port number' for rspamd 'proxy' (${anstmp})"
	S_RSPAMD_PORT[proxy]=${_ANSWER:-${anstmp}} && _confset_array "S_RSPAMD_PORT" "proxy" "${S_RSPAMD_PORT[proxy]}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_RSPAMD_PORT[normal]"
if [ -z "${S_RSPAMD_PORT[normal]}" ]; then
	anstmp="11333"
	_askno "Port number' for rspamd 'normal' (${anstmp})"
	S_RSPAMD_PORT[normal]=${_ANSWER:-${anstmp}} && _confset_array "S_RSPAMD_PORT" "normal" "${S_RSPAMD_PORT[normal]}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_RSPAMD_PORT[controller]"
if [ -z "${S_RSPAMD_PORT[controller]}" ]; then
	anstmp="11334"
	_askno "Port number' for rspamd 'controller' (${anstmp})"
	S_RSPAMD_PORT[controller]=${_ANSWER:-${anstmp}} && _confset_array "S_RSPAMD_PORT" "controller" "${S_RSPAMD_PORT[controller]}" "${S_GLOBAL_CONF}"
fi

########################  CACHE

_echot "------------------  S_CACHE_PORT_RW"
if [ -z "${S_CACHE_PORT_RW}" ]; then
	anstmp="6379"
	_askno "port for redis connection: write/read (${anstmp})"
	S_CACHE_PORT_RW=${_ANSWER:-${anstmp}} && _confset S_CACHE_PORT_RW "${S_CACHE_PORT_RW}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_CACHE_PORT_RO"
if [ -z "${S_CACHE_PORT_RO}" ]; then
	anstmp="6380"
	_askno "port for redis connection: only read (${anstmp})"
	S_CACHE_PORT_RO=${_ANSWER:-${anstmp}} && _confset S_CACHE_PORT_RO "${S_CACHE_PORT_RO}" "${S_GLOBAL_CONF}"
fi

########################  DB

_echot "------------------  S_DB_MARIA_PORT_RW"
if [ -z "${S_DB_MARIA_PORT_RW}" ]; then
	anstmp="3306"
	_askno "Port for mariadb connections: read/write (${anstmp})"
	S_DB_MARIA_PORT_RW=${_ANSWER:-${anstmp}} && _confset S_DB_MARIA_PORT_RW "${S_DB_MARIA_PORT_RW}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_DB_MARIA_PORT_RO"
if [ -z "${S_DB_MARIA_PORT_RO}" ]; then
	anstmp="3307"
	_askno "Port for mariadb connections: read only (${anstmp})"
	S_DB_MARIA_PORT_RO=${_ANSWER:-${anstmp}} && _confset S_DB_MARIA_PORT_RO "${S_DB_MARIA_PORT_RO}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_DB_PGSQL_PORT_RW"
if [ -z "${S_DB_PGSQL_PORT_RW}" ]; then
	anstmp="5432"
	_askno "Port for postgresql connections: read/write (${anstmp})"
	S_DB_PGSQL_PORT_RW=${_ANSWER:-${anstmp}} && _confset S_DB_PGSQL_PORT_RW "${S_DB_PGSQL_PORT_RW}" "${S_GLOBAL_CONF}"
fi

_echot "------------------  S_DB_PGSQL_PORT_RO"
if [ -z "${S_DB_PGSQL_PORT_RO}" ]; then
	anstmp="5433"
	_askno "Port for postgresql connections: read/write (${anstmp})"
	S_DB_PGSQL_PORT_RO=${_ANSWER:-${anstmp}} && _confset S_DB_PGSQL_PORT_RO "${S_DB_PGSQL_PORT_RO}" "${S_GLOBAL_CONF}"
fi

########################  PATHS

paths="${S_PATH_SAVE} ${S_PATH_BACKUP} ${S_PATH_LOG} ${S_PATH_LOG_SERVER} ${S_PATH_LOG_INSTALL}"
_echot "------------------  create ${paths}"
for path in ${paths}; do
	[ -d ${path} ] || _evalrq mkdir -p ${path}
	[ ${USER} != root ] && _evalrq chown :1000 ${path} && _evalrq chmod g+rw ${path}
done

_echot "------------------  create save paths for cluster"
servers_list=${!S_CLUSTER[*]}
for host in ${servers_list/${HOSTNAME}/}; do
	[ -d "${S_PATH_SAVE}/${host}" ] || _evalrq mkdir "${S_PATH_SAVE}/${host}"
done

str="ovh home"
if [[ " ${str} " = *" ${S_SERVER_TYPE} "* ]]; then

	paths="${S_HOST_PATH} ${S_HOST_PATH_SP} ${S_HOST_PATH_SHARE} ${S_HOST_PATH_LOG} ${S_HOST_PATH_SAVE}"
	_echot "------------------  create ${paths}"
	for path in ${paths}; do
		[ -d "${path}" ] || _evalrq mkdir -p "${path}"
	done
fi

str="docker kvm lxd"
if [[ " ${str} " = *" ${S_SERVER_TYPE} "* ]]; then

	_echot "------------------  create shared paths for VMS"
	paths="${S_VM_PATH_SHARE} ${S_VM_PATH_SAVE} ${S_VM_PATH_BACKUP}"
	for path in ${paths}; do
		[ -d "${path}" ] || _evalrq mkdir -p "${path}"
	done
fi

########################  END

_echoT "===================== ${_PART} end"
_partadd ${_PART} ${S_FILE_INSTALL_DONE}
