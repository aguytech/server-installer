#!/bin/bash
#
# write by Aguy

for FILE in "$S_GLOBAL_CONF" "$S_GLOBAL_FUNCTIONS"; do [ ! -f "$FILE" ] && echo -e "\e[1;31merror - unable to find file '$FILE'\e[0;0m" && exit 1 || . "$S_GLOBAL_FUNCTIONS"; done

PART="host-root"
CTID=$1
FILEDONE=$2

_echoT "\n==========================================  debian8 $PART"


####################################  MAIN

_echoT "----------  CTID test"

if [ ! "$1" ] || ! vzlist "$CTID" 1>/dev/null 2>&1; then _exite "wrong ctid '$1' or not exists"; fi


#############  log ask

_echoT "----------  log binded"
_askno "Do you want to bind container logs to host (n)" && LOGBIND=${_ANSWER:-n}


#############  stop ct

if [ ! "$(vzlist -HS "$CTID")" ]; then
	_echoT "----------  stop $CTID"
	_evalq vz-ctl stop -y "$CTID"
	CTSTARTED="true"
fi

####################################  BIND SHARE-GLOBAL

SHARE="share-global"
HOSTSHARE="$S_HOST_PATH_SHARE/global"
! [ -d "$HOSTSHARE" ] && mkdir -p "$HOSTSHARE"
if ! [ -f "${S_VZ_PATH_CT_CONF}/${CTID}.mount" ] || ! grep -q "SRC_GLOBAL=$HOSTSHARE" "${S_VZ_PATH_CT_CONF}/${CTID}.mount"; then

	_echoT "----------  mount $SHARE"

	# create path
	! [ -d $HOSTSHARE ] && _evalq mkdir -p "$HOSTSHARE"

		! [ -e "${S_VZ_PATH_CT_CONF}/${CTID}.mount" ] && echo '#!/bin/bash
# mount device for '$CTID'

# Include
. /etc/vz/vz.conf
. ${VE_CONFFILE}
' > ${S_VZ_PATH_CT_CONF}/${CTID}.mount

		echo "# $SHARE
SRC_GLOBAL=$HOSTSHARE
DST_GLOBAL=${S_VM_PATH_SHARE}/global
! [ -p \${VE_ROOT}\${DST_GLOBAL} ] && mkdir -p \${VE_ROOT}\${DST_GLOBAL}
mount -n --bind \${SRC_GLOBAL} \${VE_ROOT}\${DST_GLOBAL}
" >> ${S_VZ_PATH_CT_CONF}/${CTID}.mount

	chmod +x ${S_VZ_PATH_CT_CONF}/${CTID}.mount

fi


####################################  BIND LOG

if [ "$LOGBIND" == "y" ]; then

	#  start ct
	_echoT "----------  start $CTID"

	_evalq vz-ctl start -y "$CTID"


	#############  log

	PATHTMP="log"
	if ! [ -f ${S_VZ_PATH_CT_CONF}/${CTID}.mount ] || ! grep -q "SRC=${S_VZ_PATH_NODE}/$CTID/$PATHTMP" "${S_VZ_PATH_CT_CONF}/${CTID}.mount"; then
		_echoT "----------  mount $PATHTMP"

		FILELOGTAR="${CTID}-${PATHTMP}.tgz"
		vzctl exec $CTID "cd /var/$PATHTMP && tar czf ${S_VM_PATH_SHARE}/$FILELOGTAR . && rm -fR /var/$PATHTMP/* || echo 'ERROR while backup logs'"
		[ -d "$S_VZ_PATH_NODE/$CTID/$PATHTMP" ] && _evalq rm -fR "$S_VZ_PATH_NODE/$CTID/$PATHTMP"
		! [ -d "$S_VZ_PATH_NODE/$CTID/$PATHTMP" ] && _evalq mkdir -p "$S_VZ_PATH_NODE/$CTID/$PATHTMP"
		_evalq cd "$S_VZ_PATH_NODE/$CTID/$PATHTMP"
		_evalq tar xzf "$S_HOST_PATH_SHARE/$FILELOGTAR"
		_evalq rm "$S_HOST_PATH_SHARE/$FILELOGTAR"


		#############  ct

		_echoT "----------  stop $CTID"
			_evalq "vz-ctl stop -y $CTID"

		! [ -e "${S_VZ_PATH_CT_CONF}/${CTID}.mount" ] && echo '#!/bin/bash
# mount device for '$CTID'
' > ${S_VZ_PATH_CT_CONF}/${CTID}.mount

		echo "# $PATHTMP
SRC=${S_VZ_PATH_NODE}/$CTID/$PATHTMP
DST=/var/$PATHTMP
! [ -p \${VE_ROOT}\${DST} ] && mkdir -p \${VE_ROOT}\${DST}
mount -n --bind \${SRC} \${VE_ROOT}\${DST}
" >> ${S_VZ_PATH_CT_CONF}/${CTID}.mount

		chmod +x ${S_VZ_PATH_CT_CONF}/${CTID}.mount

	fi

fi


# start ct
if $CTSTARTED; then
	_echoT "----------  start $CTID"
	_evalq "vz-ctl start -y $CTID"
	sleep 2
fi


_echoT "----------  end"
_evalq "ssh root@${_VM_IP_BASE}.${CTID} '! grep -q ^${PART}$ ${FILEDONE} && echo $PART >> ${FILEDONE}'"

_echoi "Re-enter in container '$CTID' and relaunch installation script"
