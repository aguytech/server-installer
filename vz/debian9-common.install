#!/bin/bash
#
# write by Aguy


_echoT "\n==========================================  $S_RELEASE $_PART"

file_env="${S_PATH_SCRIPT_CONF}/env"
file_bash_aliases="${S_PATH_SCRIPT_CONF}/.bash_aliases"
file_bash_functions="${S_PATH_SCRIPT_CONF}/.bash_functions"
path_install_bash_completion="${S_PATH_INSTALL_CONF}/bash_completion"

_echoT "------------------ file required"
files="${file_env} ${file_bash_aliases} ${file_bash_functions}"
for file in ${files}; do ! [ -e "${file}" ] && _exite "Unable to find file: '${file}'"; done


####################################  MAIN

colorroot="\e[1;91m"
case "$S_SERVER_TYPE" in
	home)	color="\e[1;34m" ;;
	ovh)	color="\e[1;32m" ;;
	vz)	color="\e[1;33m" ;;
	lxd)	color="\e[1;33m" ;;
	kvm)	color="\e[1;38;5;172m" ;;
	*)	color="\e[1;34m"; colorroot=$color ;;
esac


_echoT "----------  root password change"

_askyn "Would you change the default root password "
if [ "$_ANSWER" == y ]; then
	_ask "Please enter a root password"
	passwd root <<EOF
$_ANSWER
$_ANSWER
EOF
fi


_echoT "----------  home"

# home
[ "$S_SERVER_TYPE" == home ] && _evalq "chown root.1000 /home; chmod g+rwx /home"


if [ "$S_SERVER_TYPE" != "lxd" ]; then

	_echoT "----------  shell"

	# select y
	_eval "dpkg-reconfigure dash"

fi


_echoT "----------  timezone"

[ -e /etc/localtime ] && rm /etc/localtime
ln -sv /usr/share/zoneinfo/posix/Europe/Paris /etc/localtime


_echoT "----------  .bashrc"

file=~/.bashrc
_keepmvts "${file}"

cat > "${file}" << EOF
# Source global definitions
[ -f /etc/bash.bashrc ] && . /etc/bash.bashrc

# enable bash completion in interactive shells
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
# PS1
[ "\$PS1" ] && PS1="\${debian_chroot:+(\$debian_chroot)}\[$colorroot\]\u\[\e[1;37m\]@\[$color\]\h\[\e[1;37m\]:\w\[$color\]\$\[\e[0;0m\]"

# source global variables
[ -f ${file_env} ] && . ${file_env}

# aliases
[ -f ~/.bash_aliases ] && . ~/.bash_aliases

# functions
[ -f ~/.bash_functions ] && . ~/.bash_functions
EOF


_echoT "----------  .bash_aliases"

file=~/.bash_aliases
_keepmvts "${file}"
_evalq "ln -sv ${file_bash_aliases} ${file}"


_echoT "----------  .bash_functions"

file=~/.bash_functions
_keepmvts "${file}"
_evalq "ln -sv ${file_bash_functions} ${file}"


_echoT "----------  grub"

file=/etc/default/grub
if [ -f "${file}" ]; then
	# grub timeout
	STR=0; sed -i "s/^\(GRUB_TIMEOUT=\).*/\1$STR/" "${file}"

	update-grub
fi


_echoT "----------  repository"

#apt-get install -y python-software-properties
#add-apt-repository 'deb http://http.debian.net/debian wheezy-backports main'
#if ! grep -q ${S_RELEASE_NAME}-backports /etc/apt/sources.list
#    then echo "deb http://http.debian.net/debian ${S_RELEASE_NAME}-backports main
#    deb-src http://http.debian.net/debian ${S_RELEASE_NAME}-backports main" >> /etc/apt/sources.list
#fi

file=/etc/apt/sources.list
_keepmvts "${file}"

echo "deb http://debian.mirrors.ovh.net/debian $S_RELEASE_NAME main contrib
deb-src http://debian.mirrors.ovh.net/debian $S_RELEASE_NAME main contrib

deb http://security.debian.org/ $S_RELEASE_NAME/updates main contrib
deb-src http://security.debian.org/ $S_RELEASE_NAME/updates main contrib

deb http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-updates main contrib
deb-src http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-updates main contrib

deb http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-backports main
deb-src http://debian.mirrors.ovh.net/debian ${S_RELEASE_NAME}-backports main

# old
#deb http://ftp.us.debian.org/debian $S_RELEASE_NAME main
" > "${file}"


STR=" vz "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then
	_echoT "----------  libc6"

	_eval "apt install -y libc6=2.24-11"
	_evalq "apt-mark hold libc6"
fi


STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  dirmngr install"

	_eval apt-get update
	_eval apt-get dist-upgrade


	_echoT "----------  dirmngr install"

	_eval "apt-get install -y dirmngr gnupg"


	_echoT "----------  mariadb repos"

	apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xF1656F24C74CD1D8
	# search 0xCBCB082A1BB943DB in http://keyserver.ubuntu.com:11371/
	#file=${S_PATH_INSTALL_XTRA}/mariadb-10.3-${S_RELEASE}.key
	#! [ -f "${file}" ] && _exite "Unable to find file: '${file}'"
	#_evalq "apt-key add ${file}"

	file=/etc/apt/sources.list.d/mariadb.list
	_keepmvts "${file}"
	echo "# MariaDB 10.3 repository list - created 2018-02-01 14:48 UTC
# http://downloads.mariadb.org/mariadb/repositories/
deb [arch=amd64,i386] http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main
deb-src http://mariadb.mirrors.ovh.net/MariaDB/repo/10.3/debian $S_RELEASE_NAME main" > "${file}"

	_echoT "----------  pgsql repos"

	wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
	#file=${S_PATH_INSTALL_XTRA}/postgresql-10.key
	#! [ -f "${file}" ] && _exite "Unable to find file: '${file}e'"
	#_evalq "apt-key add ${file}"

	file=/etc/apt/sources.list.d/pgdg.list
	_keepmvts "${file}"
	echo "deb http://apt.postgresql.org/pub/repos/apt/ ${S_RELEASE_NAME}-pgdg main" > "${file}"

fi


_echoT "----------  upgrade"

_eval "upgrade"


_echoT "----------  install base"

_eval "apt-get install -y bash-completion bsdmainutils cron htop less logrotate man openssh-server rsync" # apt-utils iotop lsb-release nano netcat telnet curl
# acpid apt-file apt-utils dstat hdparm iputils-tracepath jwhois mlocate mtop p7zip p7zip-plugins pciutils rcconf sysstat sysv-rc-conf wget

# while debian8 problem in lxd
#[ "$S_SERVER_TYPE" != lxd ]] && apt-get install -y bash-completion


_echoT "----------  bash_completion"

_evalq "cp -a "$path_install_bash_completion"/* /usr/share/bash-completion/completions"


_echoT "----------  exim4 install"

_eval "apt install -y exim4-base"


_echoT "----------  exim4 conf for relaying"

file=/etc/exim4/update-exim4.conf.conf
_keepcpts "${file}"
SCH='dc_eximconfig_configtype'; STR="'satellite'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_other_hostnames';       STR="''"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_local_interfaces';      STR="'127.0.0.1 ; ::1'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_readhost';              STR="'$HOSTNAME'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_relay_domains';         STR="''"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_minimaldns';            STR="'false'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_relay_nets';            STR="''"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_smarthost';             STR="'${S_SERVICE['mail']%% *}::25'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='CFILEMODE';                STR="'644'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_use_split_config';      STR="'false'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_hide_mailname';         STR="'false'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_mailname_in_oh';        STR="'true'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"
SCH='dc_localdelivery';         STR="'mail_spool'"; sed -i "s|^\($SCH=\).*$|\1$STR|" "${file}"

_service restart exim4

STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  install tools"

	_eval "apt-get install -y git lnav multitail mariadb-client postgresql-client"

fi


_echoT "----------  conf vim"

file="/etc/vim/vimrc"
sed -i "s|^\"\(syntax\).*|\1 on|" "${file}"

opts="background=dark showmatch"
# uncomment
for opt in $opts; do
	sed -i "s|^\"\(set $opt.*\)$|\1|" "${file}"
done


_echoT "------------------ conf nano"

for str in conf install; do
	cp -a /usr/share/nano/sh.nanorc /usr/share/nano/$str.nanorc
	sed -i 's|^\(syntax \).*|\1"'$str'" "\.'$str'$"|' /usr/share/nano/$str.nanorc
done

file=/etc/nanorc
cp -a $file $file.keep$(date +%s)
sed -i 's|^.*\(set tabsize\).*|\1 4|' "${file}"
sed -i 's|^\(set cut.*\)$|# \1|' "${file}"
sed -i 's|^\(set linenumbers.*\)$|# \1|' "${file}"
sed -i '/^# *include/ s/^# //' "${file}"

# various
opts="constantshow historylog matchbrackets multibuffer nohelp softwrap"
# color
opts+=" errorcolor functioncolor keycolor numbercolor selectedcolor statuscolor stripecolor titlecolor"
# uncomment
for opt in $opts; do
	sed -i "s|^.*\(set $opt .*\)$|\1|" "${file}"
done


_echoT "----------  cron conf"

file="/etc/crontab"
STR="MAILTO=$S_DOMAIN_EMAIL_TECH"
! grep -q '^MAILTO' "${file}" && sed -i "/^PATH=.*/ a $STR" "${file}"


####################################  RSYSLOG

_echoT "----------  rsyslog cron conf"

file=/etc/rsyslog.d/cron.conf
echo "#################  CRON
# rsyslog filter to separate cron log
cron.* action(type=\"omfile\" dirCreateMode=\"0700\" FileCreateMode=\"0644\" File=\"$S_PATH_LOG/cron.log\")
& stop" > "${file}"


_echoT "----------  rsyslog mail conf"

file="/etc/rsyslog.conf"
# remove mail logs for mail.log
#sed -i 's|^\(mail\.\*.*\)$|#\1|' "${file}"
# remove mail logs for syslog
! grep -q "mail\.\* *stop" "${file}" && sed -i 's|^\(mail\.err.*\)$|\1\nmail.*              stop|' "${file}"


STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  rsyslog hosting conf"

	file=/etc/rsyslog.conf
	_keepcpts "${file}"
	# udp
	if [ "$S_RSYSLOG_PTC" == udp ]; then
		sed -i "s|^#\(\$ModLoad imudp\)$|\1|" "${file}"
		sed -i "s|^#\?\(\$UDPServerRun\).*$|\1 $S_RSYSLOG_PORT|" "${file}"
	fi
	# tcp
	if [ "$S_RSYSLOG_PTC" == tcp ]; then
		sed -i "s|^#\(\$ModLoad imtcp\)$|\1|" "${file}"
		sed -i "s|^#\?\(\$InputTCPServerRun\).*$|\1 $S_RSYSLOG_PORT|" "${file}"
	fi
fi


PARTSUB="host-$_PART"
STR=" vz lxd kvm "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ] && ! grep -q "$PARTSUB" "${S_FILE_INSTALL_DONE}"; then

	_echoT "----------  $PARTSUB"

	while ! grep -q "^$PARTSUB$" "${S_FILE_INSTALL_DONE}"; do
		_echoi "from an other terminal in server host launch:"
		_echoI "${S_PATH_INSTALL}/sub/${S_HOST_RELEASE}-${PARTSUB}.install ${_CTIDTHIS} $S_FILE_INSTALL_DONE${cclear}"
		_askyn "Confirm"
	done
fi


STR=" vz lxd kvm "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  rsyslog conf auth"

	file=/etc/rsyslog.d/vm-auth.conf
	echo "##############################  AUTH
# forward auth logs from vm to hosting server ${S_SERVICE_LOG}
#auth.* @${S_SERVICE_LOG}
auth.* action(type=\"omfwd\" target=\"${S_SERVICE_LOG}\" port=\"${S_RSYSLOG_PORT}\" protocol=\"${S_RSYSLOG_PTC}\")" > "${file}"
fi


_echoT "----------  rsyslog restart"

_eval _service restart rsyslog


_echoT "----------  rsyslog mail conf"

#file="/etc/rsyslog.conf"
# remove mail logs for mail.log
#sed -i 's|^\(mail\.\*.*\)$|#\1|' "${file}"
# remove mail logs for syslog
#! grep -q "mail\.\* *stop" "${file}" && sed -i 's|^\(mail\.err.*\)$|\1\nmail.*              stop|' "${file}"


####################################  LOGROTATE

_echoT "----------  logrotate server conf"

! [ -d $S_PATH_LOG_SERVER ] && mkdir $S_PATH_LOG_SERVER

# logrotate
echo "# Logrotate file for server functions logs
#$S_PATH_LOG_INSTALL/*.log
$S_PATH_LOG_SERVER/*.log
$S_PATH_LOG_SERVER/*.err
$S_PATH_LOG_SERVER/*.debug
{
    missingok
    compress
    delaycompress
    notifempty
    weekly
    rotate 8
}
" > /etc/logrotate.d/server

file=/etc/logrotate.d/exim4-base
STR='7'
[ -f "${file}" ] && sed -i "s/\(\t\+rotate\).*/\1 $STR/" "${file}"

file=/etc/logrotate.d/munin-node
STR='7'
[ -f "${file}" ] && sed -i "s/\(\t\+rotate\).*/\1 $STR/" "${file}"

file=/etc/logrotate.d/rsyslog
STR='5'
[ -f "${file}" ] && sed -i "s/\(\t\+rotate\) 4/\1 $STR/" "${file}"


STR=" ovh home "
if [ "${STR/ "$S_SERVER_TYPE" /}" != "$STR" ]; then

	_echoT "----------  logrotate rsyslog conf"

	file=/etc/logrotate.d/rsyslog
	_eval "sed -i '\|$S_PATH_LOG/auth.log|d' '$file'"
	_eval "sed -i '1i$S_PATH_LOG/auth.log' '$file'"

	_eval "sed -i '\|$S_PATH_LOG/cron.log|d' '$file'"
	_eval "sed -i '1i$S_PATH_LOG/cron.log' '$file'"


	_echoT "----------  bind conf -IPV6"

	file=/etc/default/bind9
	SCH="OPTIONS="; STR="\"-u bind -4\""; sed -i "s|^\($SCH\).*|\1$STR|" "${file}"

	_service restart bind9
fi


if [ "$S_SERVER_TYPE" != "vz" ]; then

	_echoT "----------  install ntp"

	_eval "apt-get install -y ntp"


	_echoT "----------  conf ntp"

	file=/etc/ntp.conf
	_keepcpts "${file}"
	STR='.fr.pool.ntp.org'; sed -i "s/^\(server .\).*/\1$STR/" "${file}"
	_eval "systemctl start ntp"
fi


######################  CERTIFICATE

#_echoT "----------  certbot install"
#_eval "apt install -y certbot"
#_echoT "----------  generate certificates for mail. imap. smtp. "
#_eval "certbot certonly --standalone --rsa-key-size 4096 -d mail.$S_DOMAIN_FQDN -d imap.$S_DOMAIN_FQDN -d smtp.$S_DOMAIN_FQDN"


_echoT "----------  Openssl conf multi-domains"

_eval "apt install -y openssl"

file='/etc/ssl/openssl.cnf'
_keepcpts "${file}"

SCH='countryName_default';            STR='FR';       sed -i "s|^\(${SCH}\s*= \).*$|\1${STR}|" "${file}"
SCH='stateOrProvinceName_default';    STR='Britain';  sed -i "s|^\(${SCH}\s*= \).*$|\1${STR}|" "${file}"
SCH="0\\.organizationName_default";   STR="${S_DOMAIN_NAME}";  sed -i "s|^\(${SCH}\s*= \).*$|\1${STR}|" "${file}"
SCH="organizationalUnitName_default"; STR="${S_DOMAIN_NAME}";  sed -i "s|^#\?\(${SCH}\s*=\).*$|\1 ${STR}|" "${file}"
SCH='localityName'; STR="localityName_default\t\t= Nantes"; sed -i "s|^\(${SCH}\s*= Locality Name.*\)$|\1\n${STR}|" "${file}"
SCH='commonName'; STR="commonName_default\t\t= ${S_DOMAIN_FQDN}"; sed -i "s|^\(${SCH}\s*= Common Name.*\)$|\1\n${STR}|" "${file}"
SCH='emailAddress'; STR="emailAddress_default\t\t= ${S_DOMAIN_EMAIL_ADMIN}"; sed -i "s|^\(${SCH}\s*= Email Address.*\)$|\1\n${STR}|" "${file}"


_echoT "----------  clean"

_evalq "apt-get -y autoremove; apt-get clean; apt-get autoclean"


_echoT "----------  end"
_eval "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"


<<KEEP

_echoT "----------  pam remove log"

! grep -q 'pam_succeed_if.so' /etc/pam.d/common-session-noninteractive && sed -i "s/^\(session[[:blank:]]required[[:blank:]]*pam_unix\.so.*\)$/session\t\t\t[success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid\n\1/" /etc/pam.d/common-session-noninteractive

service cron restart


	_echoT "----------  mtop install"

	_eval "apt-get install -y libncurses5-dev make gcc libmariadbclient-dev"
	_eval "perl -MCPAN -e 'install Curses'"
	_eval "perl -MCPAN -e 'install Getopt::Long'"
	_eval "perl -MCPAN -e 'install Net::Domain'"
	_eval "perl -MCPAN -e 'install DBI'"
	_eval "perl -MCPAN -e 'install DBD::mysql'"

	version='0.6.6'
	_askno "Give the version of mtop to download from 'http://downloads.sourceforge.net/project/mtop/mtop' ($version) "
	version=${_ANSWER:-$version}
	cd /tmp
	wget -q "http://downloads.sourceforge.net/project/mtop/mtop/v$version/mtop-$version.tar.gz"
	tar xzf "mtop-$version.tar.gz"
	cd "mtop-$version"
	_eval "perl Makefile.PL"
	_eval "make"
	_eval "make install"

KEEP
