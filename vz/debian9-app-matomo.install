#!/bin/bash
#
# write by Aguy

PARTNAME="${_PART#*-}"


_echoT "\n==========================================  $S_RELEASE $_PART"

_echoT "------------------ file required"
FILE_XTRA_SUB=${S_PATH_INSTALL_CONF}/apache2/sub-site.conf
FILE_XTRA_SUB_SSL=${S_PATH_INSTALL_CONF}/apache2/sub-site-ssl.conf

FILES="$FILE_XTRA_SUB $FILE_XTRA_SUB_SSL"
for FILE in $FILES; do ! [ -f "$FILE" ] && _exite "Unable to find file: '$FILE'"; done


####################################  FUNCTION


####################################  CONTAINER

if [ "$S_SERVER_TYPE" == vz ]; then
    _echoT "----------  ctid"

    [ "${S_SERVICE[admin]/$_IPTHIS/}" == "${S_SERVICE[admin]}" ] && _askyn "This container is not the default one for Administration: '${S_SERVICE[admin]}'\nConfirm or type 'n' to exit"
    [ "$_ANSWER" == "n" ] && _exite "Bye"
fi


####################################  MAIN

_echoT "------------------ fileconf source"
[ -f "$S_FILE_INSTALL_CONF" ] && . "$S_FILE_INSTALL_CONF"


_echoT "----------  data"

[ -z ${_VERSION+x} ] && anstmp="3.6.1" && _askno "Give a version you want to install ($anstmp)" && _VERSION=${_ANSWER:-$anstmp} && _confset _VERSION "$_VERSION"

[ -z ${_SUBDOMAIN+x} ] && anstmp="${PARTNAME}" && _askno "Give a name for subdomain access ($anstmp)" && _SUBDOMAIN=${_ANSWER:-$anstmp} && _confset _SUBDOMAIN "$_SUBDOMAIN"

[ -z ${_PATH_WWW+x} ] && anstmp="/var/www" && _askno "Give a path for www ($anstmp)" && _PATH_WWW=${_ANSWER:-$anstmp} && _confset _PATH_WWW "$_PATH_WWW"

[ -z ${_PATH_INSTALL+x} ] && anstmp="$_PATH_WWW/$S_DOMAIN_FQDN" && _askno "Give a path to install ($anstmp)" && _PATH_INSTALL=${_ANSWER:-$anstmp} && _confset _PATH_INSTALL "$_PATH_INSTALL"

[ -z ${_DBHOST+x} ] && anstmp="${S_SERVICE[sgbd]%% *}" && _askno "Give address of database ($anstmp)" && _DBHOST=${_ANSWER:-$anstmp} && _confset _DBHOST "$_DBHOST"

[ -z ${_DBNAME+x} ] && anstmp="${PARTNAME}" && _askno "Give a name for database ($anstmp)" && _DBNAME=${_ANSWER:-$anstmp} && _confset _DBNAME "$_DBNAME"

[ -z ${_DBUSER+x} ] && anstmp="$_SUBDOMAIN" && _askno "Give a name for database user ($anstmp)" && _DBUSER=${_ANSWER:-$anstmp} && _confset _DBUSER "$_DBUSER"

[ -z ${_DBPWD+x} ] && anstmp="$(_pwd)" && _askno "Give a password for database user '$_DBUSER' ($anstmp)" && _DBPWD=${_ANSWER:-$anstmp} && _confset _DBPWD "$_DBPWD"

if [ -z ${_PWDROOTADMIN+x} ]; then
    _ask "Give password for user 'rootadmin'@'$_DBHOST'"
    _PWDROOTADMIN="$_ANSWER"
    while ! timeout 2 mysql -h$_DBHOST -urootadmin -p$_PWDROOTADMIN -e "" 2>/dev/null; do
        _echoE "Unable to connect to database: 'rootadmin'@'$_DBHOST' pass=$_PWDROOTADMIN"
        _ask "Give password for user 'rootadmin'@'$_DBHOST'"
        _PWDROOTADMIN=$_ANSWER
    done
fi

PATHTO="${PARTNAME}-${_VERSION}"
FILE="${PARTNAME}-${_VERSION}.tar.gz"
PATH_ADMIN="$_PATH_INSTALL/admin"


_echoT "----------  path create"

for PATHTMP in "$_PATH_WWW" "$_PATH_INSTALL" "$PATH_ADMIN"; do
    ! [ -d "$PATHTMP" ] && _evalq mkdir -p "$PATHTMP"
    _evalq chown www-data:www-data "$PATHTMP"
    _evalq chmod 755 "$PATHTMP"
done


_echoT "----------  download"

_eval cd "$_PATH_INSTALL"

if ! [ -f "$FILE" ]; then

    URLDOWN="https://builds.piwik.org/${FILE}"
    # asks
    while ! _evalq wget -q "$URLDOWN"; do
        _echoE "${redb}Unable to download software with URL:\n$URLDOWN"
        _ask "Please give a URL to download"
        URLDOWN=$_ANSWER
    done

fi


_echoT "----------  install"

[ -h "$_SUBDOMAIN" ] && _evalq rm "$_SUBDOMAIN"
[ -d "$PATHTO" ] && ! [ -d "$PATHTO.$_DDATE" ] && _evalq mv "$PATHTO" "$PATHTO.$DDATE"
[ -d "$PATHTO" ] && _evalq rm -fR "$PATHTO"
_evalq tar xzf "$FILE"
_evalq mv "${PARTNAME}" "$PATHTO"
_evalq ln -sv "$PATHTO" "$_SUBDOMAIN"
_evalq rm "$FILE"

[ -f "How to install Matomo.html" ] && rm "How to install Matomo.html"


_echoT "----------  rights www-data"

_evalq chown www-data:www-data -R "$_PATH_INSTALL/$PATHTO" "$_PATH_INSTALL/$_SUBDOMAIN" "$PATH_ADMIN"


_echoT "----------  $_DBHOST create db & user"

_evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"CREATE DATABASE IF NOT EXISTS $_DBNAME DEFAULT CHARACTER SET utf8;\""
for IP in ${S_SERVICE[admin]}; do
    _evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"GRANT USAGE ON *.* TO '$_DBUSER'@'${IP}' IDENTIFIED BY '$_DBPWD'\""
    _evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"GRANT ALL PRIVILEGES ON $_DBNAME.* TO '$_DBUSER'@'${IP}'\""
done
_evalq "mysql -h'$_DBHOST' -urootadmin -p'$_PWDROOTADMIN' -e \"FLUSH PRIVILEGES\""


####################################  APACHE

PATH_APACHE="/etc/apache2/sites-available"
FILES="$FILE_XTRA_SUB $PATH_APACHE/${S_DOMAIN_FQDN}.conf
$FILE_XTRA_SUB_SSL $PATH_APACHE/${S_DOMAIN_FQDN}-ssl.conf"

# SUBDOMAINS="$_SUBDOMAIN"
SUBDOMAINS="admin $_SUBDOMAIN"

SUBDOMAIN=$_SUBDOMAIN
for _SUBDOMAIN in $SUBDOMAINS; do
    while read FILEFROM FILETO; do
        ! [ -f "$FILETO" ] && _evalq touch "$FILETO"

        _echoT "----------  apache ${_SUBDOMAIN} $FILETO"

        if ! grep -q "ServerName ${_SUBDOMAIN}.${S_DOMAIN_FQDN}" "$FILETO"; then
            _evalq "cat '$FILEFROM' >> '$FILETO'"
            _evalq _var_replace_www "$FILETO"
        fi

    done < <(echo "$FILES")
done
_SUBDOMAIN=$SUBDOMAIN

_echoT "----------  phpinfo & monitor"

for PATHTMP in "/var/www/html" "$_PATH_INSTALL" "$PATH_ADMIN"; do
    _evalq "echo '<?php phpinfo(); ?>' > '$PATHTMP/phpinf.php.keep'"
    _evalq "echo 'admin' > '$PATHTMP/ping-monitor.html'"
    _evalq "echo '<?php echo \"admin\"; ?>' > '$PATHTMP/ping-monitor.php'"

    _evalq chown www-data:www-data -R "$PATHTMP"
done


_echoT "----------  apache enable sites"

_evalq a2ensite "${S_DOMAIN_FQDN}.conf"


_echoT "----------  rights www-data"

_eval chown www-data:www-data -R "$_PATH_INSTALL/$PATHTO"

_echoT "----------  apache reload"

_evalq systemctl reload apache2


_echoT "----------  setup"

_askno "Load the following url in your browser to setup\nhttps://${_SUBDOMAIN}.${S_DOMAIN_FQDN}/\nConfirm"


_echoT "----------  cron archive"

PATHLOG="/var/log/${PARTNAME}"
! [ -d "$PATHLOG" ] && mkdir "$PATHLOG"
_eval chown www-data:www-data "$PATHLOG"

echo "MAILTO="$S_DOMAIN_EMAIL_TECH"
5 * * * * www-data /usr/bin/php7.0 $_PATH_INSTALL/$_SUBDOMAIN/console core:archive --url=https://${_SUBDOMAIN}.${S_DOMAIN_FQDN}/ > $PATHLOG/${PARTNAME}-archive.log" > /etc/cron.d/matomo-archive

_echoi "To valid cron, test:\nsu www-data -s /bin/bash -c '/usr/bin/php7.0 /var/www/${S_DOMAIN_FQDN}/matomo/console core:archive --url=https://matomo.${S_DOMAIN_FQDN}/ > /var/log/matomo/matomo-archive.log'"
_askno "Confirm"


_echoT "----------  logrotate archive"

echo "# ${PARTNAME} archive log
$PATHLOG/${PARTNAME}-archive.log {
    missingok
    compress
    delaycompress
    notifempty
    weekly
    rotate 4
    prerotate
        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \
            run-parts /etc/logrotate.d/httpd-prerotate; \
    create 0640 www-data www-data
}" > /etc/logrotate.d/${PARTNAME}


_echoT "----------  password"

_echoi "Add this follow rules to your Ublock filters\n@@${S_DOMAIN_FQDN}/piwik.php
@@${S_DOMAIN_FQDN}/piwik.js"
_askno "Confirm"


_echoT "----------  password"

_echoA "Don't forget to keep password"
_echoa "- $_DBUSER @ $_DBHOST - $_DBPWD"


_echoT "----------  end"

_evalq _var_unset "part" "*"
_evalq "_partadd ${_PART} ${S_FILE_INSTALL_DONE}"

